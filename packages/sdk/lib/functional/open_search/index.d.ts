/**
 * @packageDocumentation
 * @module api.functional.open_search
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection } from "@nestia/fetcher";
import type { IGetQueryDataFilter } from "../../structures/IGetQueryDataFilter";
export * as process_tree from "./process_tree";
export * as get_field_values from "./get_field_values";
export * as get_fields from "./get_fields";
/**
 * @controller OpenSearchController.search
 * @path POST /open-search/search
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function search(connection: IConnection, query: search.Input): Promise<search.Output>;
export declare namespace search {
    type Input = IGetQueryDataFilter;
    type Output = any;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/open-search/search";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller OpenSearchController.alerts
 * @path POST /open-search/alerts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function alerts(connection: IConnection, query: alerts.Input): Promise<alerts.Output>;
export declare namespace alerts {
    type Input = IGetQueryDataFilter;
    type Output = any;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/open-search/alerts";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
