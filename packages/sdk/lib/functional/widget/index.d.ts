/**
 * @packageDocumentation
 * @module api.functional.widget
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection } from "@nestia/fetcher";
import type { ICreateWidgetRequest } from "../../structures/ICreateWidgetRequest";
import type { IGetQueryDataRequest } from "../../structures/IGetQueryDataRequest";
import type { IGetWidgetRequest } from "../../structures/IGetWidgetRequest";
import type { IListEntitiesRequestIWidget } from "../../structures/IListEntitiesRequestIWidget";
import type { IListEntitiesResponseany } from "../../structures/IListEntitiesResponseany";
import type { IUpdateWidgetRequest } from "../../structures/IUpdateWidgetRequest";
/**
 * @controller WidgetController.create
 * @path POST /widget/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function create(connection: IConnection, inputs: create.Input): Promise<create.Output>;
export declare namespace create {
    type Input = ICreateWidgetRequest;
    type Output = any;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/widget/create";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller WidgetController.list
 * @path POST /widget/list
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function list(connection: IConnection, inputs: list.Input): Promise<list.Output>;
export declare namespace list {
    type Input = IListEntitiesRequestIWidget;
    type Output = IListEntitiesResponseany;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/widget/list";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller WidgetController.get
 * @path GET /widget/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function get(connection: IConnection, query: get.Query): Promise<get.Output>;
export declare namespace get {
    type Query = IGetWidgetRequest;
    type Output = any;
    const METADATA: {
        readonly method: "GET";
        readonly path: "/widget/get";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: (query: get.Query) => string;
}
/**
 * @controller WidgetController.update
 * @path POST /widget/update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function update(connection: IConnection, inputs: update.Input): Promise<update.Output>;
export declare namespace update {
    type Input = IUpdateWidgetRequest;
    type Output = any;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/widget/update";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller WidgetController.aggregate
 * @path POST /widget/aggregate
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function aggregate(connection: IConnection, query: aggregate.Input): Promise<aggregate.Output>;
export declare namespace aggregate {
    type Input = IGetQueryDataRequest;
    type Output = any;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/widget/aggregate";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
