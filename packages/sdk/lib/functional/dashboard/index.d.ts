/**
 * @packageDocumentation
 * @module api.functional.dashboard
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection } from "@nestia/fetcher";
import type { ICreateDashboardRequest } from "../../structures/ICreateDashboardRequest";
import type { IDashboard } from "../../structures/IDashboard";
import type { IGetDashboardRequest } from "../../structures/IGetDashboardRequest";
import type { IUpdateDashboardRequest } from "../../structures/IUpdateDashboardRequest";
export * as list from "./list";
export * as list_all from "./list_all";
/**
 * @controller DashboardController.create
 * @path POST /dashboard/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function create(connection: IConnection, inputs: create.Input): Promise<create.Output>;
export declare namespace create {
    type Input = ICreateDashboardRequest;
    type Output = IDashboard;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/dashboard/create";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller DashboardController.get
 * @path GET /dashboard/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function get(connection: IConnection, query: get.Query): Promise<get.Output>;
export declare namespace get {
    type Query = IGetDashboardRequest;
    type Output = any;
    const METADATA: {
        readonly method: "GET";
        readonly path: "/dashboard/get";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: (query: get.Query) => string;
}
/**
 * @controller DashboardController.update
 * @path POST /dashboard/update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function update(connection: IConnection, inputs: update.Input): Promise<update.Output>;
export declare namespace update {
    type Input = IUpdateDashboardRequest;
    type Output = IDashboard;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/dashboard/update";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller DashboardController.clone
 * @path POST /dashboard/clone
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function clone(connection: IConnection, inputs: clone.Input): Promise<clone.Output>;
export declare namespace clone {
    type Input = IUpdateDashboardRequest;
    type Output = IDashboard;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/dashboard/clone";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller DashboardController.$delete
 * @path DELETE /dashboard/delete
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function $delete(connection: IConnection, query: $delete.Query): Promise<$delete.Output>;
export declare namespace $delete {
    type Query = IGetDashboardRequest;
    type Output = any;
    const METADATA: {
        readonly method: "DELETE";
        readonly path: "/dashboard/delete";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: (query: $delete.Query) => string;
}
