/**
 * @packageDocumentation
 * @module api.functional.dashboard_category
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection } from "@nestia/fetcher";
import type { ICreateDashboardCategoryRequest } from "../../structures/ICreateDashboardCategoryRequest";
import type { IDashboardCategory } from "../../structures/IDashboardCategory";
import type { IGetDashboardCategoryRequest } from "../../structures/IGetDashboardCategoryRequest";
import type { IListEntitiesRequestIDashboardCategory } from "../../structures/IListEntitiesRequestIDashboardCategory";
import type { IListEntitiesResponseIDashboardCategory } from "../../structures/IListEntitiesResponseIDashboardCategory";
/**
 * @controller DashboardCategoryController.create
 * @path POST /dashboard-category/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function create(connection: IConnection, inputs: create.Input): Promise<create.Output>;
export declare namespace create {
    type Input = ICreateDashboardCategoryRequest;
    type Output = IDashboardCategory;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/dashboard-category/create";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller DashboardCategoryController.list
 * @path POST /dashboard-category/list
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function list(connection: IConnection, inputs: list.Input): Promise<list.Output>;
export declare namespace list {
    type Input = IListEntitiesRequestIDashboardCategory;
    type Output = IListEntitiesResponseIDashboardCategory;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/dashboard-category/list";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller DashboardCategoryController.get
 * @path GET /dashboard-category/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function get(connection: IConnection, query: get.Query): Promise<get.Output>;
export declare namespace get {
    type Query = IGetDashboardCategoryRequest;
    type Output = null | IDashboardCategory;
    const METADATA: {
        readonly method: "GET";
        readonly path: "/dashboard-category/get";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: (query: get.Query) => string;
}
