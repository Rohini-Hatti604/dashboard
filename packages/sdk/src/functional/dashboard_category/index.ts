/**
 * @packageDocumentation
 * @module api.functional.dashboard_category
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { ICreateDashboardCategoryRequest } from "../../structures/ICreateDashboardCategoryRequest";
import type { IDashboardCategory } from "../../structures/IDashboardCategory";
import type { IGetDashboardCategoryRequest } from "../../structures/IGetDashboardCategoryRequest";
import type { IListEntitiesRequestIDashboardCategory } from "../../structures/IListEntitiesRequestIDashboardCategory";
import type { IListEntitiesResponseIDashboardCategory } from "../../structures/IListEntitiesResponseIDashboardCategory";

/**
 * @controller DashboardCategoryController.create
 * @path POST /dashboard-category/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  inputs: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    inputs,
  );
}
export namespace create {
  export type Input = ICreateDashboardCategoryRequest;
  export type Output = IDashboardCategory;

  export const METADATA = {
    method: "POST",
    path: "/dashboard-category/create",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/dashboard-category/create";
}

/**
 * @controller DashboardCategoryController.list
 * @path POST /dashboard-category/list
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function list(
  connection: IConnection,
  inputs: list.Input,
): Promise<list.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...list.METADATA,
      template: list.METADATA.path,
      path: list.path(),
    },
    inputs,
  );
}
export namespace list {
  export type Input = IListEntitiesRequestIDashboardCategory;
  export type Output = IListEntitiesResponseIDashboardCategory;

  export const METADATA = {
    method: "POST",
    path: "/dashboard-category/list",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/dashboard-category/list";
}

/**
 * @controller DashboardCategoryController.get
 * @path GET /dashboard-category/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection,
  query: get.Query,
): Promise<get.Output> {
  return PlainFetcher.fetch(connection, {
    ...get.METADATA,
    template: get.METADATA.path,
    path: get.path(query),
  });
}
export namespace get {
  export type Query = IGetDashboardCategoryRequest;
  export type Output = null | IDashboardCategory;

  export const METADATA = {
    method: "GET",
    path: "/dashboard-category/get",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: get.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/dashboard-category/get";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
