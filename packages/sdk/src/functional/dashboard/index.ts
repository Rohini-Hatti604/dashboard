/**
 * @packageDocumentation
 * @module api.functional.dashboard
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { ICreateDashboardRequest } from "../../structures/ICreateDashboardRequest";
import type { IDashboard } from "../../structures/IDashboard";
import type { IGetDashboardRequest } from "../../structures/IGetDashboardRequest";
import type { IUpdateDashboardRequest } from "../../structures/IUpdateDashboardRequest";

export * as list from "./list";
export * as list_all from "./list_all";

/**
 * @controller DashboardController.create
 * @path POST /dashboard/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  inputs: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    inputs,
  );
}
export namespace create {
  export type Input = ICreateDashboardRequest;
  export type Output = IDashboard;

  export const METADATA = {
    method: "POST",
    path: "/dashboard/create",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/dashboard/create";
}

/**
 * @controller DashboardController.get
 * @path GET /dashboard/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection,
  query: get.Query,
): Promise<get.Output> {
  return PlainFetcher.fetch(connection, {
    ...get.METADATA,
    template: get.METADATA.path,
    path: get.path(query),
  });
}
export namespace get {
  export type Query = IGetDashboardRequest;
  export type Output = any;

  export const METADATA = {
    method: "GET",
    path: "/dashboard/get",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: get.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/dashboard/get";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}

/**
 * @controller DashboardController.update
 * @path POST /dashboard/update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  inputs: update.Input,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(),
    },
    inputs,
  );
}
export namespace update {
  export type Input = IUpdateDashboardRequest;
  export type Output = IDashboard;

  export const METADATA = {
    method: "POST",
    path: "/dashboard/update",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/dashboard/update";
}

/**
 * @controller DashboardController.clone
 * @path POST /dashboard/clone
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function clone(
  connection: IConnection,
  inputs: clone.Input,
): Promise<clone.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...clone.METADATA,
      template: clone.METADATA.path,
      path: clone.path(),
    },
    inputs,
  );
}
export namespace clone {
  export type Input = IUpdateDashboardRequest;
  export type Output = IDashboard;

  export const METADATA = {
    method: "POST",
    path: "/dashboard/clone",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/dashboard/clone";
}

/**
 * @controller DashboardController.$delete
 * @path DELETE /dashboard/delete
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function $delete(
  connection: IConnection,
  query: $delete.Query,
): Promise<$delete.Output> {
  return PlainFetcher.fetch(connection, {
    ...$delete.METADATA,
    template: $delete.METADATA.path,
    path: $delete.path(query),
  });
}
export namespace $delete {
  export type Query = IGetDashboardRequest;
  export type Output = any;

  export const METADATA = {
    method: "DELETE",
    path: "/dashboard/delete",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: $delete.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/dashboard/delete";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
