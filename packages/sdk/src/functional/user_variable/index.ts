/**
 * @packageDocumentation
 * @module api.functional.user_variable
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { ICreateUserVariableRequest } from "../../structures/ICreateUserVariableRequest";
import type { IGetUserVariableRequest } from "../../structures/IGetUserVariableRequest";
import type { IListEntitiesRequestIUserVariable } from "../../structures/IListEntitiesRequestIUserVariable";
import type { IListEntitiesResponseIUserVariable } from "../../structures/IListEntitiesResponseIUserVariable";
import type { IUpdateUserVariableRequest } from "../../structures/IUpdateUserVariableRequest";
import type { IUserVariable } from "../../structures/IUserVariable";

/**
 * @controller UserVariableController.create
 * @path POST /user-variable/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  inputs: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    inputs,
  );
}
export namespace create {
  export type Input = ICreateUserVariableRequest;
  export type Output = IUserVariable;

  export const METADATA = {
    method: "POST",
    path: "/user-variable/create",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/user-variable/create";
}

/**
 * @controller UserVariableController.get
 * @path GET /user-variable/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection,
  query: get.Query,
): Promise<get.Output> {
  return PlainFetcher.fetch(connection, {
    ...get.METADATA,
    template: get.METADATA.path,
    path: get.path(query),
  });
}
export namespace get {
  export type Query = IGetUserVariableRequest;
  export type Output = any;

  export const METADATA = {
    method: "GET",
    path: "/user-variable/get",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: get.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/user-variable/get";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}

/**
 * @controller UserVariableController.list
 * @path POST /user-variable/list
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function list(
  connection: IConnection,
  inputs: list.Input,
): Promise<list.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...list.METADATA,
      template: list.METADATA.path,
      path: list.path(),
    },
    inputs,
  );
}
export namespace list {
  export type Input = IListEntitiesRequestIUserVariable;
  export type Output = IListEntitiesResponseIUserVariable;

  export const METADATA = {
    method: "POST",
    path: "/user-variable/list",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/user-variable/list";
}

/**
 * @controller UserVariableController.update
 * @path POST /user-variable/update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  inputs: update.Input,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(),
    },
    inputs,
  );
}
export namespace update {
  export type Input = IUpdateUserVariableRequest;
  export type Output = any;

  export const METADATA = {
    method: "POST",
    path: "/user-variable/update",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/user-variable/update";
}

/**
 * @controller UserVariableController.$delete
 * @path DELETE /user-variable/delete
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function $delete(
  connection: IConnection,
  inputs: $delete.Input,
): Promise<$delete.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...$delete.METADATA,
      template: $delete.METADATA.path,
      path: $delete.path(),
    },
    inputs,
  );
}
export namespace $delete {
  export type Input = {
    id: string;
  };
  export type Output = any;

  export const METADATA = {
    method: "DELETE",
    path: "/user-variable/delete",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/user-variable/delete";
}
