/**
 * @packageDocumentation
 * @module api.functional.widget
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { ICreateWidgetRequest } from "../../structures/ICreateWidgetRequest";
import type { IGetQueryDataRequest } from "../../structures/IGetQueryDataRequest";
import type { IGetWidgetRequest } from "../../structures/IGetWidgetRequest";
import type { IListEntitiesRequestIWidget } from "../../structures/IListEntitiesRequestIWidget";
import type { IListEntitiesResponseany } from "../../structures/IListEntitiesResponseany";
import type { IUpdateWidgetRequest } from "../../structures/IUpdateWidgetRequest";

/**
 * @controller WidgetController.create
 * @path POST /widget/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  inputs: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    inputs,
  );
}
export namespace create {
  export type Input = ICreateWidgetRequest;
  export type Output = any;

  export const METADATA = {
    method: "POST",
    path: "/widget/create",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/widget/create";
}

/**
 * @controller WidgetController.list
 * @path POST /widget/list
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function list(
  connection: IConnection,
  inputs: list.Input,
): Promise<list.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...list.METADATA,
      template: list.METADATA.path,
      path: list.path(),
    },
    inputs,
  );
}
export namespace list {
  export type Input = IListEntitiesRequestIWidget;
  export type Output = IListEntitiesResponseany;

  export const METADATA = {
    method: "POST",
    path: "/widget/list",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/widget/list";
}

/**
 * @controller WidgetController.get
 * @path GET /widget/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection,
  query: get.Query,
): Promise<get.Output> {
  return PlainFetcher.fetch(connection, {
    ...get.METADATA,
    template: get.METADATA.path,
    path: get.path(query),
  });
}
export namespace get {
  export type Query = IGetWidgetRequest;
  export type Output = any;

  export const METADATA = {
    method: "GET",
    path: "/widget/get",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: get.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/widget/get";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}

/**
 * @controller WidgetController.update
 * @path POST /widget/update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  inputs: update.Input,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(),
    },
    inputs,
  );
}
export namespace update {
  export type Input = IUpdateWidgetRequest;
  export type Output = any;

  export const METADATA = {
    method: "POST",
    path: "/widget/update",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/widget/update";
}

/**
 * @controller WidgetController.aggregate
 * @path POST /widget/aggregate
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function aggregate(
  connection: IConnection,
  query: aggregate.Input,
): Promise<aggregate.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...aggregate.METADATA,
      template: aggregate.METADATA.path,
      path: aggregate.path(),
    },
    query,
  );
}
export namespace aggregate {
  export type Input = IGetQueryDataRequest;
  export type Output = any;

  export const METADATA = {
    method: "POST",
    path: "/widget/aggregate",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/widget/aggregate";
}
