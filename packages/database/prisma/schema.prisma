//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//
// dashboard-category.prisma
//

model DashboardCategory {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  isPublic       Boolean?    @default(false)
  ownerId        String?     @db.ObjectId
  organizationId String?     @db.ObjectId
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  dashboards     Dashboard[]
  Widget         Widget[]
}

//
// dashboard-profile.prisma
//

model DashboardProfile {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  favouriteDashboardIds String[] @db.ObjectId
  favouriteDashboards   Json?
  defaultDashboards     Json?
  user                  Json?
  opensearchConfig      Json?
  defaultDashboardId    String?  @db.ObjectId
}

//
// dashboard.prisma
//

model Dashboard {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  tags                String[]
  type                String?
  isPublic            Boolean            @default(false)
  ownerId             String?            @db.ObjectId
  dashboardCategoryId String             @db.ObjectId
  parentId            String?            @db.ObjectId
  parent              Dashboard?         @relation("DashboardParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children            Dashboard[]        @relation("DashboardParent")
  dashboardCategory   DashboardCategory? @relation(fields: [dashboardCategoryId], references: [id])
  elements            DashboardElement[]
  //timestamp
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

type DashboardElement {
  key      String?
  x        Int
  y        Int
  w        Int
  h        Int
  widgetId String? @db.ObjectId
  widget   Json?
}

//
// role.prisma
//

model Role {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  roleId         String?  @db.ObjectId
  name           String   @unique
  description    String?
  permissions    String[]
  isActive       Boolean? @default(true)
  isPublic       Boolean? @default(true)
  organizationId String?  @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

//
// user-variable.prisma
//

model UserVariable {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  key            String
  value          String
  type           String
  scope          String
  isPublic       Boolean? @default(false)
  organizationId String?  @db.ObjectId
  dashboardId    String?  @db.ObjectId
  ownerId        String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// type Permissions {
//     create String[]
//     list   String[]
//     get    String[]
//     update String[]
//     delete String[]
// }

//
// widget.prisma
//

model Widget {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  isPublic     Boolean       @default(false)
  type         String
  renderMethod RenderMethod? @default(STATIC)
  config       Json
  tags         String[]

  widgetCategoryId String?            @db.ObjectId
  widgetCategory   DashboardCategory? @relation(fields: [widgetCategoryId], references: [id])
  //timestamp
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

enum RenderMethod {
  STATIC
  DYNAMIC
}

enum ChartType {
  PIE
  BAR
  LINE
  DOUGHNUT
  AREA
  TABLE
  GAUGE
  HEATMAP
  MAP
  GEO
  HISTOGRAM
  SCATTER
  SUNBURST
  TREEMAP
  FUNNEL
  WORD_CLOUD
  NETWORK
  CANDLESTICK
}
