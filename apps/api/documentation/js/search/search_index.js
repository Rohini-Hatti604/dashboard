var COMPODOC_SEARCH_INDEX = {
  index: {
    version: '2.3.9',
    fields: ['title', 'body'],
    fieldVectors: [
      ['title/interfaces/Aggregation.html', [0, 0.019, 1, 2.909]],
      [
        'body/interfaces/Aggregation.html',
        [
          0, 0.007, 1, 3.913, 2, 0.278, 3, 0.048, 4, 0.043, 5, 0.037, 6, 1.164,
          7, 1.29, 8, 1.898, 9, 0.783, 10, 0.72, 11, 0.304, 12, 0.422, 13,
          1.481, 14, 0.211, 15, 0.014, 16, 0.833, 17, 1.97, 18, 0.396, 19, 0.72,
          20, 1.353, 21, 0.288, 22, 0.587, 23, 1.04, 24, 0.25, 25, 1.612, 26,
          0.689, 27, 1.83, 28, 2.446, 29, 1.164, 30, 1.164, 31, 1.164, 32,
          0.791, 33, 0.72, 34, 1.178, 35, 0.66, 36, 0.66, 37, 0.995, 38, 1.231,
          39, 1.178, 40, 1.164, 41, 1.164, 42, 1.164, 43, 0.332, 44, 0.332, 45,
          0.332, 46, 0.332, 47, 0.368, 48, 0.381, 49, 0.368, 50, 0.32, 51,
          2.245, 52, 3.272, 53, 2.446, 54, 2.069, 55, 2.892, 56, 3.13, 57,
          2.356, 58, 1.29, 59, 3.02, 60, 1.772, 61, 2.388, 62, 2.388, 63, 1.998,
          64, 2.879, 65, 0.048, 66, 0.25, 67, 0.833, 68, 1.419, 69, 1.243, 70,
          1.014, 71, 1.29, 72, 0.504, 73, 1.07, 74, 1.448, 75, 1.302, 76, 0.689,
          77, 1.29, 78, 2.101, 79, 4.186, 80, 3.085, 81, 1.128, 82, 3.479, 83,
          4.49, 84, 0.88, 85, 2.48, 86, 1.627, 87, 1.29, 88, 1.742, 89, 2.205,
          90, 3.419, 91, 1.991, 92, 0.715, 93, 0.791, 94, 1.813, 95, 0.754, 96,
          1.29, 97, 0.933, 98, 1.29, 99, 0.754, 100, 0.995, 101, 0.689, 102,
          1.772, 103, 1.29, 104, 1.702, 105, 1.991, 106, 1.29, 107, 1.544, 108,
          1.83, 109, 1.742, 110, 1.97, 111, 0.791, 112, 1.29, 113, 1.29, 114,
          0.933, 115, 1.29, 116, 1.164, 117, 1.29, 118, 1.688, 119, 1.29, 120,
          1.29, 121, 1.29, 122, 1.29, 123, 1.29, 124, 2.889, 125, 3.467, 126,
          3.467, 127, 1.29, 128, 0.88, 129, 1.29, 130, 1.29, 131, 1.29, 132,
          1.424, 133, 1.29, 134, 2.205, 135, 0.455, 136, 1.164, 137, 0.88, 138,
          0.933, 139, 1.164, 140, 0.754, 141, 1.29, 142, 0.88, 143, 1.542, 144,
          1.164, 145, 0.995, 146, 1.29, 147, 1.214, 148, 2.889, 149, 1.29, 150,
          1.29, 151, 1.29, 152, 2.205, 153, 3.419, 154, 3.419, 155, 2.518, 156,
          2.097, 157, 3.419, 158, 2.205, 159, 2.09, 160, 5.398, 161, 3.419, 162,
          2.205, 163, 4.186, 164, 3.485, 165, 3.419, 166, 2.205, 167, 2.607,
          168, 3.419, 169, 2.205, 170, 3.841, 171, 2.607, 172, 2.205, 173,
          2.245, 174, 2.205, 175, 2.245, 176, 3.419, 177, 2.097, 178, 2.205,
          179, 3.419, 180, 2.097, 181, 2.205, 182, 3.419, 183, 2.889, 184,
          6.216, 185, 0.894, 186, 3.841, 187, 1.29, 188, 1.29, 189, 1.29, 190,
          1.164, 191, 1.29, 192, 1.29, 193, 1.595, 194, 1.07, 195, 1.29, 196,
          2.205, 197, 2.205, 198, 1.29, 199, 1.29, 200, 3.841, 201, 2.205, 202,
          2.205, 203, 1.29, 204, 1.29, 205, 4.473, 206, 1.29, 207, 2.205, 208,
          1.29, 209, 1.29, 210, 1.29, 211, 1.29, 212, 2.205, 213, 1.29, 214,
          1.29, 215, 4.186, 216, 4.186, 217, 2.205, 218, 2.205, 219, 1.29, 220,
          1.29, 221, 2.205, 222, 2.205, 223, 2.205, 224, 1.29, 225, 1.29, 226,
          1.29, 227, 1.29, 228, 1.29, 229, 1.07, 230, 1.29, 231, 1.29, 232,
          1.29, 233, 1.29, 234, 1.29, 235, 3.419, 236, 1.29, 237, 1.164, 238,
          1.164, 239, 1.29, 240, 1.595, 241, 1.595, 242, 1.29, 243, 2.205, 244,
          1.29, 245, 0.933, 246, 1.29, 247, 2.205, 248, 2.205, 249, 2.205, 250,
          1.29, 251, 1.29, 252, 1.29, 253, 1.29, 254, 1.29, 255, 1.29, 256,
          1.29, 257, 1.29, 258, 0.004, 259, 0.004,
        ],
      ],
      ['title/controllers/AppController.html', [260, 1.37, 261, 2.909]],
      [
        'body/controllers/AppController.html',
        [
          3, 0.156, 4, 0.139, 5, 0.121, 9, 0.776, 10, 3.02, 11, 0.458, 12, 1.96,
          14, 0.27, 15, 0.014, 24, 0.813, 34, 2.889, 36, 2.15, 37, 3.243, 65,
          0.156, 66, 0.813, 68, 2.029, 69, 1.529, 72, 1.642, 73, 3.487, 88,
          3.129, 94, 1.803, 107, 1.376, 135, 0.497, 258, 0.01, 259, 0.01, 260,
          2.114, 261, 4.49, 262, 1.476, 263, 4.203, 264, 1.9, 265, 6.321, 266,
          4.884, 267, 6.212, 268, 3.671, 269, 4.824, 270, 1.767, 271, 4.824,
          272, 1.968, 273, 3.914, 274, 4.824, 275, 1.9, 276, 1.392, 277, 1.441,
          278, 4.824, 279, 3.34, 280, 4.824, 281, 2.713, 282, 2.578, 283, 2.456,
          284, 4.329, 285, 4.203, 286, 3.498, 287, 4.824, 288, 3.243, 289,
          4.824, 290, 4.203, 291, 4.824, 292, 3.487, 293, 4.824, 294, 4.824,
          295, 4.824, 296, 4.824, 297, 4.824, 298, 4.824, 299, 4.824,
        ],
      ],
      ['title/modules/AppModule.html', [300, 1.189, 301, 2.909]],
      [
        'body/modules/AppModule.html',
        [
          3, 0.129, 4, 0.115, 5, 0.101, 14, 0.293, 15, 0.014, 18, 0.626, 19,
          1.946, 24, 0.675, 25, 3.044, 26, 1.862, 36, 1.784, 65, 0.129, 66,
          0.675, 75, 1.182, 86, 1.268, 109, 2.168, 258, 0.009, 259, 0.009, 261,
          4.526, 262, 1.678, 272, 1.268, 284, 4.593, 285, 3.487, 288, 2.691,
          300, 1.849, 301, 6.03, 302, 1.712, 303, 1.784, 304, 1.946, 305, 1.946,
          306, 1.784, 307, 3.044, 308, 1.946, 309, 3.487, 310, 3.487, 311,
          3.487, 312, 4.9, 313, 4.593, 314, 4.9, 315, 4.9, 316, 4.593, 317, 4.9,
          318, 4.593, 319, 4.9, 320, 4.9, 321, 4.593, 322, 2.668, 323, 1.946,
          324, 1.862, 325, 4.003, 326, 3.689, 327, 5.487, 328, 4.003, 329,
          3.148, 330, 4.315, 331, 3.148, 332, 5.487, 333, 2.378, 334, 2.378,
          335, 4.003, 336, 4.003, 337, 4.003, 338, 2.255, 339, 2.691, 340,
          4.003, 341, 2.378, 342, 3.487, 343, 4.003, 344, 4.003, 345, 3.487,
          346, 4.003, 347, 2.691, 348, 4.003, 349, 4.003, 350, 4.003, 351,
          5.487, 352, 4.003, 353, 2.378, 354, 3.148, 355, 4.003, 356, 4.003,
          357, 4.003, 358, 4.003, 359, 4.003, 360, 4.003, 361, 4.003, 362,
          4.003, 363, 4.003,
        ],
      ],
      ['title/injectables/AppService.html', [22, 0.934, 284, 2.536]],
      [
        'body/injectables/AppService.html',
        [
          3, 0.196, 4, 0.174, 5, 0.153, 9, 0.808, 12, 1.731, 14, 0.218, 15,
          0.013, 22, 1.66, 24, 1.023, 65, 0.196, 66, 1.023, 94, 1.508, 135,
          0.626, 258, 0.011, 259, 0.011, 264, 2.189, 265, 6.849, 270, 1.561,
          284, 4.51, 364, 2.823, 365, 5.287, 366, 6.069, 367, 6.069, 368, 6.069,
        ],
      ],
      ['title/controllers/AuthController.html', [260, 1.37, 369, 2.909]],
      [
        'body/controllers/AuthController.html',
        [
          3, 0.167, 4, 0.148, 5, 0.13, 11, 0.409, 12, 1.849, 14, 0.276, 15,
          0.014, 24, 0.869, 65, 0.167, 66, 0.869, 74, 2.567, 75, 2.094, 94,
          1.611, 135, 0.532, 258, 0.01, 259, 0.01, 260, 1.755, 262, 1.578, 264,
          1.983, 266, 5.096, 268, 3.464, 270, 1.667, 272, 2.543, 273, 4.084,
          275, 1.983, 276, 1.452, 277, 1.504, 282, 2.756, 283, 2.626, 286,
          3.609, 369, 4.685, 370, 4.493, 371, 2.756, 372, 3.728, 373, 5.124,
          374, 5.158, 375, 5.158, 376, 3.055, 377, 5.158, 378, 5.158, 379,
          3.064, 380, 3.25, 381, 4.493, 382, 2.626, 383, 3.064, 384, 5.158, 385,
          3.064, 386, 2.507, 387, 3.25, 388, 5.158, 389, 5.158, 390, 5.158, 391,
          5.158,
        ],
      ],
      ['title/guards/AuthGuard.html', [382, 2.049, 392, 2.909]],
      [
        'body/guards/AuthGuard.html',
        [
          3, 0.139, 4, 0.123, 5, 0.108, 11, 0.364, 12, 1.643, 14, 0.25, 15,
          0.014, 22, 1.336, 23, 2.668, 24, 0.725, 65, 0.139, 66, 0.725, 68,
          1.918, 69, 1.825, 70, 1.762, 72, 1.463, 78, 1.79, 92, 0.598, 94,
          1.724, 109, 1.699, 135, 0.443, 147, 1.575, 258, 0.009, 259, 0.009,
          264, 1.762, 270, 1.106, 275, 1.762, 276, 1.455, 277, 1.336, 286, 3.79,
          381, 3.746, 382, 2.932, 386, 2.09, 393, 3.381, 394, 3.746, 395, 0.78,
          396, 6.044, 397, 4.3, 398, 4.277, 399, 4.3, 400, 5.018, 401, 5.455,
          402, 4.3, 403, 2.891, 404, 4.664, 405, 3.381, 406, 4.3, 407, 4.3, 408,
          2.709, 409, 3.746, 410, 3.746, 411, 4.3, 412, 1.839, 413, 3.746, 414,
          4.3, 415, 4.3, 416, 4.3, 417, 4.3, 418, 4.3, 419, 4.3, 420, 4.3, 421,
          2.09, 422, 4.3, 423, 4.3, 424, 6.495, 425, 4.3, 426, 5.76, 427, 5.76,
          428, 4.3, 429, 4.3, 430, 4.3, 431, 5.76, 432, 4.164, 433, 4.3, 434,
          4.3, 435, 4.3, 436, 4.3, 437, 4.529, 438, 4.3, 439, 4.3, 440, 2.554,
          441, 2.418, 442, 2.418, 443, 4.3, 444, 4.3, 445, 4.3, 446, 4.3, 447,
          4.3, 448, 4.3, 449, 4.3, 450, 4.3, 451, 4.3, 452, 4.3, 453, 4.3, 454,
          4.3, 455, 4.3, 456, 4.3, 457, 3.746, 458, 5.76, 459, 5.76, 460, 4.3,
          461, 3.746, 462, 4.3,
        ],
      ],
      ['title/modules/AuthModule.html', [300, 1.189, 312, 2.706]],
      [
        'body/modules/AuthModule.html',
        [
          3, 0.2, 4, 0.178, 5, 0.156, 14, 0.26, 15, 0.013, 24, 1.042, 65, 0.2,
          66, 1.042, 258, 0.012, 259, 0.012, 262, 2.213, 300, 2.137, 302, 2.645,
          312, 4.865, 369, 5.546, 463, 6.184, 464, 6.184,
        ],
      ],
      ['title/modules/CachingModule.html', [300, 1.189, 313, 2.536]],
      [
        'body/modules/CachingModule.html',
        [
          3, 0.186, 4, 0.165, 5, 0.145, 14, 0.25, 15, 0.013, 24, 0.971, 65,
          0.186, 66, 0.971, 258, 0.011, 259, 0.011, 300, 2.199, 302, 2.464, 303,
          2.568, 304, 2.801, 305, 2.801, 306, 2.568, 307, 3.62, 308, 3.62, 313,
          5.119, 322, 3.373, 323, 2.801, 324, 2.68, 465, 5.019, 466, 5.019, 467,
          5.019, 468, 4.469, 469, 5.761, 470, 5.761,
        ],
      ],
      ['title/injectables/CachingService.html', [22, 0.934, 468, 2.151]],
      [
        'body/injectables/CachingService.html',
        [
          3, 0.142, 4, 0.127, 5, 0.111, 9, 0.498, 11, 0.415, 12, 1.999, 14,
          0.237, 15, 0.014, 22, 1.358, 23, 2.879, 24, 0.743, 65, 0.142, 66,
          0.743, 68, 2.07, 69, 2.084, 70, 1.791, 72, 1.5, 74, 1.923, 75, 2.215,
          78, 2.066, 86, 2.084, 88, 3.07, 94, 1.634, 107, 1.671, 135, 0.454,
          185, 2.321, 258, 0.009, 259, 0.009, 264, 1.791, 270, 1.506, 275,
          2.012, 276, 1.474, 277, 1.525, 329, 3.466, 330, 4.605, 333, 4.757,
          334, 4.333, 353, 2.619, 364, 2.051, 376, 2.879, 395, 1.062, 441, 2.48,
          468, 3.13, 471, 3.841, 472, 5.857, 473, 5.857, 474, 4.409, 475, 5.857,
          476, 5.857, 477, 5.857, 478, 4.409, 479, 5.857, 480, 4.409, 481,
          3.197, 482, 5.857, 483, 4.409, 484, 4.409, 485, 3.69, 486, 5.857, 487,
          5.857, 488, 6.577, 489, 5.857, 490, 4.409, 491, 2.964, 492, 4.409,
          493, 6.577, 494, 2.356, 495, 2.964, 496, 4.409, 497, 5.857, 498,
          4.409, 499, 4.409, 500, 2.964, 501, 4.409,
        ],
      ],
      [
        'title/controllers/DashboardCategoryController.html',
        [260, 1.37, 502, 2.909],
      ],
      [
        'body/controllers/DashboardCategoryController.html',
        [
          3, 0.134, 4, 0.119, 5, 0.104, 11, 0.403, 12, 1.818, 14, 0.287, 15,
          0.014, 18, 0.648, 21, 0.807, 24, 0.698, 33, 2.014, 65, 0.134, 66,
          0.698, 68, 1.224, 69, 1.313, 72, 1.41, 74, 2.55, 75, 2.294, 76, 1.927,
          78, 1.142, 81, 3.183, 86, 2.019, 94, 1.584, 101, 2.964, 107, 1.818,
          132, 3.159, 135, 0.427, 258, 0.009, 259, 0.009, 260, 1.41, 262, 1.267,
          264, 1.718, 268, 3.406, 270, 1.639, 272, 2.461, 275, 1.949, 276,
          1.531, 277, 1.478, 281, 3.584, 282, 2.214, 283, 2.109, 338, 2.308,
          339, 4.593, 371, 2.214, 376, 3.026, 379, 2.461, 380, 2.61, 382, 2.109,
          383, 2.461, 385, 2.461, 387, 2.61, 442, 2.33, 502, 4.061, 503, 2.807,
          504, 3.609, 505, 4.893, 506, 2.619, 507, 4.059, 508, 4.143, 509,
          4.143, 510, 3.609, 511, 4.059, 512, 4.143, 513, 4.143, 514, 2.785,
          515, 3.322, 516, 4.143, 517, 4.143, 518, 2.785, 519, 3.257, 520,
          2.785, 521, 4.061, 522, 2.109, 523, 2.785, 524, 2.461, 525, 2.785,
          526, 2.461, 527, 2.995, 528, 4.016, 529, 3.609, 530, 3.609, 531,
          4.143, 532, 3.257, 533, 2.995, 534, 4.143, 535, 2.785, 536, 4.143,
          537, 5.617, 538, 2.785, 539, 2.995, 540, 4.143, 541, 4.143,
        ],
      ],
      ['title/modules/DashboardCategoryModule.html', [300, 1.189, 314, 2.706]],
      [
        'body/modules/DashboardCategoryModule.html',
        [
          3, 0.185, 4, 0.164, 5, 0.144, 14, 0.267, 15, 0.013, 24, 0.965, 65,
          0.185, 66, 0.965, 258, 0.011, 259, 0.011, 262, 2.114, 300, 2.193, 302,
          2.448, 303, 2.551, 304, 2.782, 305, 2.782, 306, 2.551, 307, 3.609,
          308, 2.782, 314, 5.392, 322, 3.36, 323, 2.782, 324, 2.662, 338, 2.839,
          339, 3.847, 502, 5.367, 503, 2.351, 528, 5.054, 529, 4.986, 542,
          4.986, 543, 4.986, 544, 5.723, 545, 5.723,
        ],
      ],
      [
        'title/injectables/DashboardCategoryService.html',
        [22, 0.934, 528, 2.536],
      ],
      [
        'body/injectables/DashboardCategoryService.html',
        [
          3, 0.122, 4, 0.108, 5, 0.095, 9, 0.684, 11, 0.415, 12, 1.97, 14,
          0.218, 15, 0.014, 16, 2.118, 17, 4.249, 18, 0.589, 19, 1.831, 22,
          1.22, 23, 2.696, 24, 0.635, 32, 2.013, 33, 1.831, 65, 0.122, 66,
          0.635, 68, 1.791, 69, 2.079, 70, 1.609, 72, 1.282, 74, 2.498, 75,
          2.247, 76, 2.447, 78, 1.808, 81, 2.345, 82, 4.249, 84, 2.237, 85,
          3.41, 86, 2.079, 88, 1.488, 92, 0.844, 93, 2.013, 94, 1.507, 101,
          2.82, 102, 3.24, 104, 3.536, 107, 1.872, 108, 3.803, 109, 2.078, 110,
          3.125, 111, 2.013, 114, 3.315, 135, 0.388, 185, 1.329, 258, 0.008,
          259, 0.008, 264, 1.609, 270, 1.559, 272, 2.079, 275, 2.007, 276, 1.47,
          277, 1.522, 338, 2.939, 339, 4.808, 364, 1.752, 386, 1.831, 395,
          0.954, 481, 1.831, 503, 2.939, 505, 5.717, 506, 2.161, 528, 3.315,
          546, 3.281, 547, 3.536, 548, 2.373, 549, 5.261, 550, 6.063, 551,
          3.766, 552, 3.601, 553, 3.766, 554, 5.261, 555, 3.766, 556, 2.373,
          557, 5.261, 558, 5.429, 559, 3.766, 560, 5.261, 561, 3.766, 562,
          3.766, 563, 4.136, 564, 3.803, 565, 3.536, 566, 3.803, 567, 3.315,
          568, 4.583, 569, 2.558, 570, 3.766, 571, 2.961, 572, 3.766,
        ],
      ],
      ['title/controllers/DashboardController.html', [260, 1.37, 573, 2.909]],
      [
        'body/controllers/DashboardController.html',
        [
          3, 0.095, 4, 0.084, 5, 0.074, 11, 0.43, 12, 1.94, 14, 0.269, 15,
          0.014, 18, 0.458, 21, 0.571, 24, 0.494, 33, 1.424, 65, 0.095, 66,
          0.494, 69, 0.928, 74, 2.617, 75, 2.354, 76, 1.363, 78, 1.608, 81,
          3.374, 86, 2.155, 92, 0.812, 94, 1.69, 95, 1.492, 101, 2.445, 107,
          1.665, 109, 2.306, 132, 3.689, 135, 0.302, 258, 0.007, 259, 0.007,
          260, 0.997, 262, 0.896, 264, 1.342, 268, 3.634, 270, 1.749, 272,
          2.398, 275, 2.08, 276, 1.632, 277, 1.577, 281, 3.689, 282, 1.565, 283,
          1.492, 338, 1.204, 371, 1.565, 376, 3.14, 379, 1.74, 380, 1.846, 382,
          1.492, 383, 1.74, 385, 1.74, 386, 1.424, 387, 1.846, 442, 1.648, 506,
          2.16, 514, 1.969, 515, 3.306, 518, 1.969, 519, 2.303, 521, 2.118, 522,
          1.492, 523, 1.969, 524, 1.74, 525, 1.969, 526, 1.74, 527, 2.118, 532,
          2.303, 533, 2.118, 535, 1.969, 538, 1.969, 539, 3.17, 558, 2.303, 564,
          4.518, 565, 4.201, 566, 4.742, 569, 2.132, 573, 3.17, 574, 2.552, 575,
          4.133, 576, 3.17, 577, 5.257, 578, 2.343, 579, 2.552, 580, 4.039, 581,
          2.93, 582, 2.93, 583, 3.467, 584, 2.93, 585, 2.93, 586, 2.93, 587,
          4.039, 588, 2.93, 589, 2.93, 590, 2.303, 591, 2.93, 592, 2.93, 593,
          2.93, 594, 2.93, 595, 2.93, 596, 2.93, 597, 2.93, 598, 2.93, 599,
          2.93, 600, 2.93, 601, 1.969, 602, 3.312, 603, 2.552, 604, 2.93, 605,
          4.386, 606, 2.93, 607, 5.257, 608, 4.386, 609, 4.386, 610, 4.386, 611,
          2.93, 612, 2.93, 613, 2.93, 614, 2.93, 615, 2.552, 616, 2.93, 617,
          2.118, 618, 2.93, 619, 5.837, 620, 2.93, 621, 2.93, 622, 2.93, 623,
          2.552, 624, 2.93, 625, 2.93, 626, 2.93,
        ],
      ],
      ['title/modules/DashboardModule.html', [300, 1.189, 315, 2.706]],
      [
        'body/modules/DashboardModule.html',
        [
          3, 0.18, 4, 0.16, 5, 0.14, 14, 0.275, 15, 0.013, 24, 0.94, 65, 0.18,
          66, 0.94, 258, 0.011, 259, 0.011, 262, 2.081, 300, 2.168, 302, 2.385,
          303, 2.485, 304, 2.711, 305, 2.711, 306, 2.485, 307, 3.569, 308,
          2.711, 315, 5.476, 321, 5.023, 322, 3.307, 323, 2.711, 324, 2.594,
          326, 4.573, 573, 5.306, 602, 5.023, 603, 4.858, 627, 4.858, 628,
          5.576, 629, 4.858, 630, 5.576, 631, 5.576, 632, 5.576,
        ],
      ],
      [
        'title/controllers/DashboardProfileController.html',
        [260, 1.37, 633, 2.909],
      ],
      [
        'body/controllers/DashboardProfileController.html',
        [
          3, 0.114, 4, 0.101, 5, 0.089, 11, 0.403, 12, 1.818, 14, 0.259, 15,
          0.014, 18, 0.552, 21, 0.687, 24, 0.595, 49, 1.454, 65, 0.114, 66,
          0.595, 68, 1.042, 69, 1.118, 72, 1.2, 74, 2.55, 75, 2.294, 78, 1.985,
          81, 3.121, 86, 2.283, 92, 0.814, 93, 2.684, 94, 1.74, 135, 0.364, 185,
          1.773, 258, 0.008, 259, 0.008, 260, 1.2, 262, 1.079, 264, 1.536, 268,
          3.406, 270, 1.64, 272, 2.543, 275, 1.95, 276, 1.428, 277, 1.479, 281,
          3.585, 282, 1.885, 283, 1.796, 338, 2.768, 341, 4.002, 371, 1.885,
          376, 3.026, 379, 2.095, 380, 2.223, 382, 1.796, 383, 2.095, 385,
          2.095, 387, 2.223, 503, 2.768, 510, 3.073, 530, 3.073, 532, 2.773,
          565, 4.844, 633, 3.631, 634, 3.073, 635, 5.665, 636, 5.85, 637, 5.85,
          638, 5.85, 639, 3.527, 640, 4.54, 641, 3.527, 642, 3.527, 643, 3.527,
          644, 3.527, 645, 3.527, 646, 3.527, 647, 3.527, 648, 4.016, 649,
          2.223, 650, 3.527, 651, 2.55, 652, 3.475, 653, 2.773, 654, 3.527, 655,
          3.527, 656, 5.85, 657, 3.527, 658, 3.527, 659, 5.85, 660, 3.686, 661,
          5.85, 662, 3.527, 663, 5.85, 664, 3.527, 665, 5.096, 666, 3.527, 667,
          4.376, 668, 5.85, 669, 5.023, 670, 2.371, 671, 2.223, 672, 5.023, 673,
          3.527, 674, 3.527, 675, 3.527, 676, 5.023, 677, 3.527,
        ],
      ],
      ['title/modules/DashboardProfileModule.html', [300, 1.189, 316, 2.536]],
      [
        'body/modules/DashboardProfileModule.html',
        [
          3, 0.185, 4, 0.164, 5, 0.144, 14, 0.267, 15, 0.013, 24, 0.965, 65,
          0.185, 66, 0.965, 258, 0.011, 259, 0.011, 262, 2.114, 300, 2.193, 302,
          2.448, 303, 2.551, 304, 2.782, 305, 2.782, 306, 2.551, 307, 3.609,
          308, 2.782, 316, 5.054, 322, 3.36, 323, 2.782, 324, 2.662, 338, 2.839,
          341, 3.399, 503, 2.351, 633, 5.367, 652, 4.764, 653, 4.5, 678, 4.986,
          679, 4.986, 680, 5.723, 681, 5.723,
        ],
      ],
      [
        'title/injectables/DashboardProfileService.html',
        [22, 0.934, 652, 2.391],
      ],
      [
        'body/injectables/DashboardProfileService.html',
        [
          3, 0.123, 4, 0.109, 5, 0.096, 9, 0.861, 11, 0.438, 12, 2.046, 14,
          0.19, 15, 0.014, 16, 2.137, 17, 4.26, 18, 0.594, 19, 1.847, 22, 1.228,
          23, 2.706, 24, 0.64, 65, 0.123, 66, 0.64, 68, 2.118, 69, 2.087, 70,
          1.619, 72, 1.293, 74, 2.503, 75, 2.325, 76, 2.462, 78, 1.815, 81,
          3.087, 82, 4.458, 84, 2.257, 85, 3.705, 86, 2.087, 88, 2.091, 92,
          1.045, 93, 2.03, 94, 1.637, 95, 1.934, 97, 2.394, 99, 1.934, 110,
          2.257, 114, 3.335, 135, 0.392, 185, 1.341, 190, 4.161, 258, 0.008,
          259, 0.008, 264, 1.619, 270, 1.694, 275, 2.119, 276, 1.552, 277,
          1.607, 338, 2.175, 341, 4.371, 364, 1.767, 386, 1.847, 395, 0.96, 481,
          1.847, 503, 3.023, 506, 2.175, 547, 3.558, 548, 2.394, 552, 3.913,
          563, 4.161, 578, 2.715, 635, 6.276, 652, 3.144, 682, 3.31, 683, 5.293,
          684, 5.293, 685, 6.091, 686, 3.799, 687, 3.799, 688, 5.293, 689,
          3.799, 690, 6.091, 691, 3.799, 692, 5.293, 693, 3.799, 694, 3.799,
          695, 3.799, 696, 5.293, 697, 3.799, 698, 4.611, 699, 5.293, 700, 3.31,
          701, 3.799, 702, 3.799,
        ],
      ],
      ['title/injectables/DashboardService.html', [22, 0.934, 602, 2.536]],
      [
        'body/injectables/DashboardService.html',
        [
          3, 0.087, 4, 0.077, 5, 0.068, 9, 0.84, 11, 0.43, 12, 1.992, 14, 0.217,
          15, 0.014, 16, 1.514, 17, 3.772, 18, 0.643, 19, 1.308, 21, 0.524, 22,
          0.954, 23, 2.297, 24, 0.454, 32, 1.438, 33, 1.308, 65, 0.087, 66,
          0.454, 67, 3.715, 68, 2.062, 69, 1.908, 70, 1.842, 72, 1.4, 74, 2.546,
          75, 2.327, 76, 1.913, 78, 2.05, 80, 4.395, 81, 2.83, 82, 4.465, 83,
          1.809, 84, 1.599, 85, 3.571, 86, 2.295, 88, 1.972, 91, 3.234, 92,
          1.065, 93, 1.438, 94, 1.693, 95, 1.37, 97, 2.592, 99, 1.37, 100,
          2.765, 101, 2.322, 102, 2.668, 104, 2.765, 105, 3.234, 107, 1.173,
          108, 2.973, 109, 1.972, 110, 2.965, 111, 1.438, 114, 2.592, 128,
          1.599, 135, 0.277, 140, 1.37, 185, 0.95, 258, 0.007, 259, 0.007, 264,
          1.258, 270, 1.699, 273, 1.696, 275, 2.084, 276, 1.565, 277, 1.58, 338,
          3.265, 364, 1.252, 395, 0.746, 421, 1.308, 457, 2.344, 461, 2.344,
          481, 1.308, 506, 1.69, 547, 2.765, 548, 1.696, 552, 3.924, 556, 1.696,
          558, 3.234, 563, 3.234, 567, 3.522, 568, 2.344, 569, 1.308, 571,
          2.116, 575, 3.234, 576, 2.973, 578, 2.225, 579, 3.583, 602, 2.592,
          698, 2.344, 700, 2.344, 703, 2.344, 704, 4.113, 705, 4.113, 706, 6.35,
          707, 2.691, 708, 4.992, 709, 2.691, 710, 3.583, 711, 2.691, 712,
          2.691, 713, 2.691, 714, 4.113, 715, 5.59, 716, 2.691, 717, 5.59, 718,
          2.691, 719, 4.113, 720, 2.691, 721, 2.691, 722, 3.356, 723, 4.113,
          724, 2.765, 725, 4.113, 726, 2.691, 727, 2.765, 728, 4.113, 729,
          2.691, 730, 4.113, 731, 2.691, 732, 2.691, 733, 2.344, 734, 2.691,
          735, 2.691, 736, 2.691, 737, 2.691, 738, 2.691, 739, 2.691, 740,
          2.765, 741, 2.691, 742, 2.691, 743, 2.344, 744, 2.691, 745, 2.344,
          746, 2.691, 747, 2.691, 748, 4.113, 749, 2.691, 750, 2.691, 751,
          2.691, 752, 2.691, 753, 2.691,
        ],
      ],
      ['title/modules/GrpcModule.html', [300, 1.189, 317, 2.706]],
      [
        'body/modules/GrpcModule.html',
        [
          0, 0.03, 3, 0.153, 4, 0.136, 5, 0.119, 14, 0.269, 15, 0.014, 24, 0.8,
          25, 3.505, 26, 2.207, 65, 0.153, 66, 0.8, 75, 1.402, 109, 2.428, 194,
          3.43, 258, 0.01, 259, 0.01, 276, 1.377, 286, 4.15, 300, 2.013, 302,
          2.029, 303, 2.115, 304, 2.307, 305, 2.307, 306, 2.115, 307, 3.314,
          308, 3.314, 317, 5.236, 322, 2.988, 323, 2.307, 324, 2.207, 326,
          4.132, 331, 5.36, 353, 2.819, 354, 3.731, 754, 4.134, 755, 4.134, 756,
          4.134, 757, 4.745, 758, 5.354, 759, 4.745, 760, 6.817, 761, 3.19, 762,
          4.134, 763, 4.745, 764, 4.745, 765, 6.146, 766, 6.146, 767, 3.651,
          768, 3.873, 769, 4.745, 770, 4.833, 771, 6.146, 772, 6.146, 773,
          6.146, 774, 6.146, 775, 5.354, 776, 6.146, 777, 4.745, 778, 4.745,
        ],
      ],
      ['title/injectables/GrpcService.html', [22, 0.934, 286, 2.049]],
      [
        'body/injectables/GrpcService.html',
        [
          0, 0.026, 3, 0.127, 4, 0.113, 5, 0.099, 9, 0.878, 11, 0.422, 12, 2,
          14, 0.252, 15, 0.014, 22, 1.257, 24, 0.663, 25, 3.611, 26, 1.828, 65,
          0.127, 66, 0.663, 68, 2.071, 70, 1.658, 72, 1.338, 78, 1.493, 94,
          1.347, 109, 1.553, 135, 0.405, 147, 1.44, 258, 0.009, 259, 0.009, 264,
          1.658, 266, 4.261, 270, 1.595, 273, 2.477, 275, 1.897, 276, 1.39, 277,
          1.55, 286, 2.759, 292, 5.471, 353, 2.335, 364, 1.828, 373, 4.483, 395,
          0.983, 403, 2.642, 404, 4.873, 408, 2.477, 412, 2.652, 569, 1.911,
          761, 2.642, 779, 2.841, 780, 4.873, 781, 5.256, 782, 3.931, 783,
          5.256, 784, 5.419, 785, 2.896, 786, 4.261, 787, 3.931, 788, 4.261,
          789, 3.931, 790, 3.931, 791, 2.642, 792, 5.723, 793, 2.841, 794,
          2.841, 795, 3.091, 796, 5.513, 797, 4.876, 798, 4.876, 799, 2.642,
          800, 2.841, 801, 3.091, 802, 3.091, 803, 4.261, 804, 3.091, 805,
          4.876, 806, 3.091, 807, 2.841, 808, 3.091, 809, 3.091, 810, 2.211,
          811, 3.091, 812, 3.091, 813, 3.091, 814, 3.091, 815, 3.917, 816,
          4.261, 817, 4.261, 818, 5.256, 819, 4.261, 820, 4.261, 821, 4.261,
          822, 4.261, 823, 3.091, 824, 4.261, 825, 4.261, 826, 4.261, 827,
          4.261, 828, 4.261, 829, 4.261,
        ],
      ],
      ['title/interfaces/IAddToFavouriteRequest.html', [0, 0.019, 640, 2.536]],
      [
        'body/interfaces/IAddToFavouriteRequest.html',
        [
          0, 0.036, 2, 1.093, 3, 0.188, 4, 0.167, 5, 0.146, 9, 0.875, 11, 0.441,
          14, 0.209, 15, 0.013, 18, 0.909, 21, 1.132, 43, 1.302, 44, 1.302, 45,
          1.302, 46, 1.302, 47, 1.444, 48, 1.495, 49, 1.444, 50, 1.258, 65,
          0.242, 135, 0.599, 258, 0.011, 259, 0.011, 395, 1.265, 503, 2.388,
          640, 4.395, 648, 3.662, 651, 5.042, 727, 5.329, 830, 4.201, 831,
          4.201, 832, 3.907, 833, 1.444,
        ],
      ],
      ['title/interfaces/IAggs.html', [0, 0.019, 38, 1.957]],
      [
        'body/interfaces/IAggs.html',
        [
          0, 0.037, 2, 0.84, 3, 0.144, 4, 0.128, 5, 0.112, 7, 3.893, 8, 2.783,
          9, 0.938, 10, 2.173, 11, 0.445, 12, 1.275, 14, 0.161, 15, 0.014, 18,
          0.699, 20, 3.158, 21, 0.871, 28, 2.275, 38, 3.219, 39, 2.079, 43,
          1.484, 44, 1.484, 45, 1.484, 46, 1.484, 47, 1.645, 48, 1.703, 49,
          1.645, 50, 1.433, 51, 2.275, 52, 3.14, 53, 3.009, 54, 2.888, 55,
          2.388, 56, 3.538, 57, 2.388, 59, 3.158, 60, 2.388, 61, 2.749, 62,
          2.749, 63, 2.275, 64, 2.428, 65, 0.248, 92, 0.622, 107, 1.686, 118,
          2.275, 143, 2.079, 147, 1.637, 155, 3.08, 156, 2.388, 173, 2.275, 175,
          2.275, 177, 2.388, 180, 2.388, 258, 0.009, 259, 0.009, 833, 1.645,
          834, 2.514, 835, 4.469, 836, 3.324, 837, 2.388, 838, 2.275, 839,
          1.808, 840, 3.324, 841, 2.275, 842, 2.275, 843, 3.009, 844, 2.514,
          845, 2.655,
        ],
      ],
      ['title/interfaces/IAuthHeaders.html', [0, 0.019, 846, 2.706]],
      [
        'body/interfaces/IAuthHeaders.html',
        [
          0, 0.03, 2, 0.757, 3, 0.13, 4, 0.116, 5, 0.101, 9, 0.918, 11, 0.481,
          14, 0.145, 15, 0.014, 52, 1.795, 54, 2.911, 65, 0.229, 92, 1.06, 102,
          2.152, 111, 2.152, 135, 0.415, 143, 1.873, 145, 2.708, 147, 2.59, 155,
          1.873, 185, 1.422, 240, 3.472, 241, 3.472, 258, 0.009, 259, 0.009,
          272, 2.14, 277, 1.278, 279, 1.958, 395, 0.999, 412, 2.357, 432, 3.983,
          440, 2.393, 515, 1.958, 522, 2.051, 833, 1.001, 846, 3.704, 847,
          2.708, 848, 4.333, 849, 5.502, 850, 4.012, 851, 2.912, 852, 2.912,
          853, 4.333, 854, 4.939, 855, 4.333, 856, 5.502, 857, 4.333, 858,
          3.167, 859, 4.333, 860, 4.333, 861, 4.333, 862, 4.54, 863, 3.704, 864,
          3.167, 865, 3.167, 866, 2.708, 867, 6.071, 868, 3.167, 869, 3.167,
          870, 3.167, 871, 3.167, 872, 3.704, 873, 4.333, 874, 4.939, 875,
          3.167, 876, 2.912, 877, 3.704, 878, 2.152, 879, 3.704, 880, 4.333,
          881, 3.167, 882, 3.167, 883, 3.167, 884, 3.167,
        ],
      ],
      [
        'title/interfaces/ICreateDashboardCategoryRequest.html',
        [0, 0.019, 507, 2.391],
      ],
      [
        'body/interfaces/ICreateDashboardCategoryRequest.html',
        [
          0, 0.037, 2, 1.069, 3, 0.184, 4, 0.163, 5, 0.143, 9, 0.777, 11, 0.435,
          14, 0.205, 15, 0.013, 18, 0.889, 21, 1.108, 43, 1.542, 44, 1.542, 45,
          1.542, 46, 1.542, 47, 1.711, 48, 1.77, 49, 1.711, 50, 1.49, 65, 0.249,
          92, 0.958, 258, 0.011, 259, 0.011, 503, 2.336, 507, 4.398, 511, 3.377,
          520, 4.627, 833, 1.912, 839, 2.105, 885, 3.822, 886, 3.822, 887,
          3.582, 888, 3.582,
        ],
      ],
      ['title/interfaces/ICreateDashboardRequest.html', [0, 0.019, 583, 2.391]],
      [
        'body/interfaces/ICreateDashboardRequest.html',
        [
          0, 0.037, 2, 1.037, 3, 0.178, 4, 0.158, 5, 0.139, 9, 0.86, 11, 0.462,
          14, 0.199, 15, 0.013, 18, 0.863, 21, 1.075, 43, 1.637, 44, 1.637, 45,
          1.637, 46, 1.637, 47, 1.816, 48, 1.879, 49, 1.816, 50, 1.581, 65,
          0.246, 92, 0.768, 258, 0.011, 259, 0.011, 276, 1.236, 567, 3.477, 580,
          3.277, 583, 4.015, 587, 3.277, 601, 4.543, 722, 3.709, 833, 1.892,
          839, 2.235, 889, 3.709, 890, 3.477,
        ],
      ],
      ['title/interfaces/ICreateRoleRequest.html', [0, 0.019, 891, 2.391]],
      [
        'body/interfaces/ICreateRoleRequest.html',
        [
          0, 0.037, 2, 1.069, 3, 0.184, 4, 0.163, 5, 0.143, 9, 0.777, 11, 0.435,
          14, 0.205, 15, 0.013, 18, 0.889, 21, 1.108, 43, 1.542, 44, 1.542, 45,
          1.542, 46, 1.542, 47, 1.711, 48, 1.77, 49, 1.711, 50, 1.49, 65, 0.249,
          92, 0.958, 258, 0.011, 259, 0.011, 833, 1.912, 839, 2.105, 891, 4.398,
          892, 3.822, 893, 4.627, 894, 3.582, 895, 3.377, 896, 3.582,
        ],
      ],
      [
        'title/interfaces/ICreateUserVariableRequest.html',
        [0, 0.019, 897, 2.391],
      ],
      [
        'body/interfaces/ICreateUserVariableRequest.html',
        [
          0, 0.036, 2, 0.949, 3, 0.163, 4, 0.145, 5, 0.127, 9, 0.57, 11, 0.514,
          14, 0.182, 15, 0.014, 18, 0.789, 21, 0.983, 43, 1.573, 44, 1.573, 45,
          1.573, 46, 1.573, 47, 1.744, 48, 1.805, 49, 1.744, 50, 1.519, 65,
          0.238, 92, 0.703, 135, 0.52, 258, 0.01, 259, 0.01, 338, 3.032, 395,
          1.16, 833, 1.834, 839, 2.147, 850, 4.383, 897, 3.798, 898, 2.839, 899,
          3.394, 900, 3.394, 901, 5.503, 902, 5.334, 903, 5.334, 904, 5.334,
          905, 4.299, 906, 3.181, 907, 2.999, 908, 2.999,
        ],
      ],
      ['title/interfaces/ICreateWidgetRequest.html', [0, 0.019, 838, 2.049]],
      [
        'body/interfaces/ICreateWidgetRequest.html',
        [
          0, 0.037, 2, 0.83, 3, 0.143, 4, 0.127, 5, 0.111, 8, 2.601, 9, 0.939,
          11, 0.443, 14, 0.159, 15, 0.014, 18, 0.691, 20, 3.133, 21, 0.86, 28,
          2.248, 38, 2.85, 39, 2.054, 43, 1.475, 44, 1.475, 45, 1.475, 46,
          1.475, 47, 1.636, 48, 1.693, 49, 1.636, 50, 1.425, 51, 2.248, 52,
          3.125, 53, 2.985, 54, 2.882, 55, 2.36, 56, 3.517, 57, 2.36, 59, 3.133,
          60, 2.36, 61, 2.727, 62, 2.727, 63, 2.248, 64, 2.409, 65, 0.247, 92,
          0.615, 107, 1.673, 118, 2.248, 135, 0.455, 143, 2.054, 147, 1.617,
          155, 3.062, 156, 2.36, 173, 2.248, 175, 2.248, 177, 2.36, 180, 2.36,
          258, 0.009, 259, 0.009, 277, 1.36, 395, 1.063, 833, 1.743, 834, 2.484,
          836, 3.298, 837, 2.36, 838, 2.985, 839, 2.013, 840, 4.105, 841, 2.248,
          842, 2.248, 843, 2.985, 844, 2.484, 845, 2.623,
        ],
      ],
      ['title/interfaces/IGetDashboard.html', [0, 0.019, 890, 2.536]],
      [
        'body/interfaces/IGetDashboard.html',
        [
          0, 0.037, 2, 1.037, 3, 0.178, 4, 0.158, 5, 0.139, 9, 0.86, 11, 0.462,
          14, 0.199, 15, 0.013, 18, 0.863, 21, 1.075, 43, 1.637, 44, 1.637, 45,
          1.637, 46, 1.637, 47, 1.816, 48, 1.879, 49, 1.816, 50, 1.581, 65,
          0.246, 92, 0.768, 258, 0.011, 259, 0.011, 276, 1.236, 567, 3.477, 580,
          3.277, 583, 3.277, 587, 3.277, 601, 4.912, 722, 3.709, 833, 1.892,
          839, 2.067, 889, 3.709, 890, 4.259,
        ],
      ],
      ['title/interfaces/IGetDashboardCategory.html', [0, 0.019, 887, 2.536]],
      [
        'body/interfaces/IGetDashboardCategory.html',
        [
          0, 0.037, 2, 1.069, 3, 0.184, 4, 0.163, 5, 0.143, 9, 0.777, 11, 0.435,
          14, 0.205, 15, 0.013, 18, 0.889, 21, 1.108, 43, 1.542, 44, 1.542, 45,
          1.542, 46, 1.542, 47, 1.711, 48, 1.77, 49, 1.711, 50, 1.49, 65, 0.249,
          92, 0.958, 258, 0.011, 259, 0.011, 503, 2.336, 507, 4.089, 511, 3.377,
          520, 4.977, 833, 1.912, 839, 1.739, 885, 3.822, 886, 3.822, 887,
          4.337, 888, 3.582,
        ],
      ],
      [
        'title/interfaces/IGetDashboardCategoryRequest.html',
        [0, 0.019, 511, 2.391],
      ],
      [
        'body/interfaces/IGetDashboardCategoryRequest.html',
        [
          0, 0.037, 2, 1.05, 3, 0.181, 4, 0.16, 5, 0.141, 9, 0.863, 11, 0.464,
          14, 0.201, 15, 0.013, 18, 0.874, 21, 1.089, 43, 1.526, 44, 1.526, 45,
          1.526, 46, 1.526, 47, 1.693, 48, 1.752, 49, 1.693, 50, 1.474, 65,
          0.247, 92, 1.091, 135, 0.576, 258, 0.011, 259, 0.011, 395, 1.235, 503,
          2.296, 507, 4.046, 511, 4.046, 520, 4.579, 833, 1.826, 839, 1.709,
          885, 3.757, 886, 3.757, 887, 3.521, 888, 3.521,
        ],
      ],
      ['title/interfaces/IGetDashboardProfile.html', [0, 0.019, 832, 2.706]],
      [
        'body/interfaces/IGetDashboardProfile.html',
        [
          0, 0.036, 2, 1.112, 3, 0.191, 4, 0.17, 5, 0.149, 9, 0.796, 11, 0.374,
          14, 0.213, 15, 0.013, 18, 0.925, 21, 1.153, 43, 1.326, 44, 1.326, 45,
          1.326, 46, 1.326, 47, 1.471, 48, 1.522, 49, 1.471, 50, 1.281, 65,
          0.243, 258, 0.011, 259, 0.011, 503, 2.431, 640, 3.729, 648, 3.729,
          651, 5.444, 727, 4.74, 830, 4.278, 831, 4.278, 832, 4.74, 833, 1.752,
        ],
      ],
      ['title/interfaces/IGetDashboardRequest.html', [0, 0.019, 587, 2.391]],
      [
        'body/interfaces/IGetDashboardRequest.html',
        [
          0, 0.037, 2, 1.02, 3, 0.175, 4, 0.156, 5, 0.137, 9, 0.894, 11, 0.478,
          14, 0.195, 15, 0.013, 18, 0.849, 21, 1.057, 43, 1.625, 44, 1.625, 45,
          1.625, 46, 1.625, 47, 1.802, 48, 1.865, 49, 1.802, 50, 1.57, 65,
          0.245, 92, 1.054, 135, 0.559, 258, 0.011, 259, 0.011, 276, 1.216, 395,
          1.213, 567, 3.419, 580, 3.223, 583, 3.223, 587, 3.973, 601, 4.497,
          722, 3.647, 833, 1.802, 839, 2.046, 889, 3.647, 890, 3.419,
        ],
      ],
      ['title/interfaces/IGetQueryDataFilter.html', [0, 0.019, 843, 2.049]],
      [
        'body/interfaces/IGetQueryDataFilter.html',
        [
          0, 0.036, 2, 0.784, 3, 0.135, 4, 0.12, 5, 0.105, 8, 2.526, 9, 0.933,
          10, 2.743, 11, 0.501, 14, 0.15, 15, 0.014, 18, 0.652, 20, 3.015, 21,
          0.812, 28, 2.123, 38, 2.743, 39, 1.939, 43, 1.433, 44, 1.433, 45,
          1.433, 46, 1.433, 47, 1.589, 48, 1.645, 49, 1.589, 50, 1.384, 51,
          2.123, 52, 3.054, 53, 3.644, 54, 2.905, 55, 2.228, 56, 3.417, 57,
          2.228, 59, 3.015, 60, 2.228, 61, 2.624, 62, 2.624, 63, 2.123, 64,
          2.941, 65, 0.244, 92, 0.58, 107, 2.042, 118, 3.488, 135, 0.43, 143,
          3.187, 147, 1.527, 155, 2.974, 156, 2.228, 173, 2.123, 175, 2.123,
          177, 2.228, 180, 2.228, 258, 0.009, 259, 0.009, 277, 1.78, 395, 1.023,
          833, 1.589, 834, 2.345, 836, 3.173, 837, 2.228, 838, 2.123, 839,
          1.726, 840, 3.173, 841, 2.123, 842, 2.123, 843, 3.255, 844, 2.345,
          845, 4.069,
        ],
      ],
      ['title/interfaces/IGetQueryDataRequest.html', [0, 0.019, 39, 1.872]],
      [
        'body/interfaces/IGetQueryDataRequest.html',
        [
          0, 0.037, 2, 0.826, 3, 0.142, 4, 0.126, 5, 0.111, 8, 2.594, 9, 0.933,
          11, 0.46, 14, 0.158, 15, 0.014, 18, 0.687, 20, 3.739, 21, 0.856, 28,
          2.237, 38, 2.841, 39, 2.718, 43, 1.471, 44, 1.471, 45, 1.471, 46,
          1.471, 47, 1.632, 48, 1.689, 49, 1.632, 50, 1.421, 51, 2.237, 52,
          3.119, 53, 2.975, 54, 2.879, 55, 2.348, 56, 3.508, 57, 2.348, 59,
          3.123, 60, 2.348, 61, 2.718, 62, 2.718, 63, 2.237, 64, 2.401, 65,
          0.247, 92, 0.612, 107, 1.667, 118, 2.237, 135, 0.453, 143, 2.044, 147,
          1.609, 155, 3.484, 156, 2.348, 173, 2.237, 175, 2.237, 177, 2.348,
          180, 2.348, 258, 0.009, 259, 0.009, 395, 1.06, 833, 1.632, 834, 2.471,
          836, 3.287, 837, 2.348, 838, 2.237, 839, 1.787, 840, 3.287, 841,
          2.237, 842, 2.237, 843, 3.563, 844, 3.936, 845, 2.61,
        ],
      ],
      ['title/interfaces/IGetRole.html', [0, 0.019, 894, 2.536]],
      [
        'body/interfaces/IGetRole.html',
        [
          0, 0.037, 2, 1.069, 3, 0.184, 4, 0.163, 5, 0.143, 9, 0.777, 11, 0.435,
          14, 0.205, 15, 0.013, 18, 0.889, 21, 1.108, 43, 1.542, 44, 1.542, 45,
          1.542, 46, 1.542, 47, 1.711, 48, 1.77, 49, 1.711, 50, 1.49, 65, 0.249,
          92, 0.958, 258, 0.011, 259, 0.011, 833, 1.912, 839, 1.739, 891, 4.089,
          892, 3.822, 893, 4.977, 894, 4.337, 895, 3.377, 896, 3.582,
        ],
      ],
      ['title/interfaces/IGetRoleRequest.html', [0, 0.019, 896, 2.536]],
      [
        'body/interfaces/IGetRoleRequest.html',
        [
          0, 0.037, 2, 1.05, 3, 0.181, 4, 0.16, 5, 0.141, 9, 0.863, 11, 0.464,
          14, 0.201, 15, 0.013, 18, 0.874, 21, 1.089, 43, 1.526, 44, 1.526, 45,
          1.526, 46, 1.526, 47, 1.693, 48, 1.752, 49, 1.693, 50, 1.474, 65,
          0.247, 92, 1.091, 135, 0.576, 258, 0.011, 259, 0.011, 395, 1.235, 833,
          1.826, 839, 1.709, 891, 4.046, 892, 3.757, 893, 4.579, 894, 3.521,
          895, 3.319, 896, 4.292,
        ],
      ],
      ['title/interfaces/IGetUserVariable.html', [0, 0.019, 906, 2.536]],
      [
        'body/interfaces/IGetUserVariable.html',
        [
          0, 0.036, 2, 1.005, 3, 0.173, 4, 0.154, 5, 0.135, 9, 0.604, 11, 0.489,
          14, 0.192, 15, 0.014, 18, 0.836, 21, 1.042, 43, 1.615, 44, 1.615, 45,
          1.615, 46, 1.615, 47, 1.791, 48, 1.853, 49, 1.791, 50, 1.56, 65,
          0.243, 92, 0.744, 258, 0.011, 259, 0.011, 338, 2.724, 833, 1.872, 839,
          2.028, 850, 3.938, 897, 3.177, 898, 3.008, 899, 3.595, 900, 3.595,
          901, 4.793, 902, 4.793, 903, 4.793, 904, 4.793, 905, 4.844, 906,
          4.178, 907, 3.177, 908, 3.177,
        ],
      ],
      ['title/interfaces/IGetUserVariableRequest.html', [0, 0.019, 908, 2.391]],
      [
        'body/interfaces/IGetUserVariableRequest.html',
        [
          0, 0.036, 2, 0.989, 3, 0.17, 4, 0.151, 5, 0.132, 9, 0.807, 11, 0.497,
          14, 0.189, 15, 0.014, 18, 0.823, 21, 1.025, 43, 1.603, 44, 1.603, 45,
          1.603, 46, 1.603, 47, 1.778, 48, 1.84, 49, 1.778, 50, 1.548, 65,
          0.242, 92, 1.042, 135, 0.542, 258, 0.011, 259, 0.011, 338, 2.697, 395,
          1.19, 833, 1.778, 839, 2.008, 850, 3.899, 897, 3.125, 898, 2.959, 899,
          3.537, 900, 3.537, 901, 4.744, 902, 4.744, 903, 4.744, 904, 4.744,
          905, 4.412, 906, 3.315, 907, 3.125, 908, 3.899,
        ],
      ],
      ['title/interfaces/IGetWidget.html', [0, 0.019, 837, 2.151]],
      [
        'body/interfaces/IGetWidget.html',
        [
          0, 0.037, 2, 0.847, 3, 0.146, 4, 0.129, 5, 0.113, 8, 2.627, 9, 0.936,
          11, 0.42, 14, 0.162, 15, 0.014, 18, 0.705, 20, 3.176, 21, 0.878, 28,
          2.295, 38, 2.889, 39, 2.097, 43, 1.49, 44, 1.49, 45, 1.49, 46, 1.49,
          47, 1.652, 48, 1.71, 49, 1.652, 50, 1.439, 51, 2.295, 52, 3.151, 53,
          3.026, 54, 2.893, 55, 2.409, 56, 3.553, 57, 2.409, 59, 3.176, 60,
          2.409, 61, 2.764, 62, 2.764, 63, 2.295, 64, 2.442, 65, 0.249, 92,
          0.627, 107, 1.695, 118, 2.295, 143, 2.097, 147, 1.651, 155, 3.093,
          156, 2.409, 173, 2.295, 175, 2.295, 177, 2.409, 180, 2.409, 258, 0.01,
          259, 0.01, 833, 1.757, 834, 2.535, 836, 3.74, 837, 3.176, 838, 2.295,
          839, 1.818, 840, 3.343, 841, 2.295, 842, 2.295, 843, 3.026, 844,
          2.535, 845, 2.678,
        ],
      ],
      ['title/interfaces/IGetWidgetRequest.html', [0, 0.019, 841, 2.049]],
      [
        'body/interfaces/IGetWidgetRequest.html',
        [
          0, 0.037, 2, 0.836, 3, 0.144, 4, 0.128, 5, 0.112, 8, 2.609, 9, 0.939,
          11, 0.444, 14, 0.16, 15, 0.014, 18, 0.695, 20, 3.147, 21, 0.866, 28,
          2.264, 38, 2.863, 39, 2.068, 43, 1.48, 44, 1.48, 45, 1.48, 46, 1.48,
          47, 1.641, 48, 1.699, 49, 1.641, 50, 1.429, 51, 2.264, 52, 3.134, 53,
          2.999, 54, 2.885, 55, 2.376, 56, 3.529, 57, 2.376, 59, 3.147, 60,
          2.376, 61, 2.739, 62, 2.739, 63, 2.264, 64, 2.42, 65, 0.248, 92,
          0.979, 107, 1.68, 118, 2.264, 135, 0.458, 143, 2.068, 147, 1.628, 155,
          3.072, 156, 2.376, 173, 2.264, 175, 2.264, 177, 2.376, 180, 2.376,
          258, 0.009, 259, 0.009, 395, 1.068, 833, 1.641, 834, 2.501, 836,
          3.312, 837, 2.376, 838, 2.264, 839, 1.801, 840, 3.312, 841, 2.999,
          842, 2.264, 843, 2.999, 844, 2.501, 845, 2.641,
        ],
      ],
      ['title/interfaces/IListEntitiesRequest.html', [0, 0.019, 515, 1.957]],
      [
        'body/interfaces/IListEntitiesRequest.html',
        [
          0, 0.03, 2, 0.733, 3, 0.126, 4, 0.112, 5, 0.098, 9, 0.921, 11, 0.503,
          14, 0.14, 15, 0.014, 52, 1.739, 54, 2.965, 65, 0.226, 92, 0.75, 102,
          2.085, 111, 2.085, 135, 0.402, 143, 3.099, 145, 2.623, 147, 2.561,
          155, 3.099, 185, 1.377, 240, 3.397, 241, 3.397, 258, 0.009, 259,
          0.009, 272, 1.236, 277, 1.8, 279, 3.239, 395, 0.978, 412, 1.669, 432,
          2.82, 515, 2.621, 522, 1.986, 833, 0.97, 846, 2.623, 847, 2.623, 848,
          3.068, 849, 3.897, 850, 2.317, 851, 2.82, 852, 2.82, 853, 4.239, 854,
          4.857, 855, 4.239, 856, 5.461, 857, 4.239, 858, 3.068, 859, 4.239,
          860, 4.239, 861, 4.239, 862, 4.465, 863, 3.624, 864, 3.068, 865,
          3.068, 866, 2.623, 867, 6.029, 868, 3.068, 869, 3.068, 870, 3.068,
          871, 3.068, 872, 3.624, 873, 4.239, 874, 4.857, 875, 3.068, 876, 2.82,
          877, 4.479, 878, 2.085, 879, 4.479, 880, 4.239, 881, 3.068, 882,
          3.068, 883, 5.239, 884, 5.239,
        ],
      ],
      ['title/interfaces/IListEntitiesResponse.html', [0, 0.019, 522, 2.049]],
      [
        'body/interfaces/IListEntitiesResponse.html',
        [
          0, 0.031, 2, 0.769, 3, 0.132, 4, 0.117, 5, 0.103, 9, 0.919, 11, 0.495,
          14, 0.147, 15, 0.014, 52, 1.823, 54, 2.955, 65, 0.23, 92, 0.775, 102,
          3.632, 111, 3.632, 135, 0.422, 143, 1.903, 145, 2.75, 147, 2.604, 155,
          1.903, 185, 1.444, 240, 3.509, 241, 3.509, 258, 0.009, 259, 0.009,
          272, 1.296, 279, 1.989, 395, 1.01, 412, 1.75, 432, 2.957, 515, 1.989,
          522, 2.835, 833, 1.017, 846, 2.75, 847, 2.75, 848, 3.217, 849, 4.026,
          850, 2.43, 851, 2.957, 852, 2.957, 853, 4.379, 854, 4.979, 855, 4.379,
          856, 5.523, 857, 4.379, 858, 3.217, 859, 4.379, 860, 4.379, 861,
          4.379, 862, 4.577, 863, 3.744, 864, 3.217, 865, 3.217, 866, 2.75, 867,
          6.091, 868, 3.217, 869, 3.217, 870, 3.217, 871, 3.217, 872, 3.744,
          873, 4.379, 874, 4.979, 875, 3.217, 876, 2.957, 877, 3.744, 878,
          2.186, 879, 3.744, 880, 5.345, 881, 3.217, 882, 3.217, 883, 3.217,
          884, 3.217,
        ],
      ],
      [
        'title/interfaces/ISearchQueryRequestPayload.html',
        [0, 0.019, 909, 2.391],
      ],
      [
        'body/interfaces/ISearchQueryRequestPayload.html',
        [
          0, 0.029, 2, 1.112, 3, 0.191, 4, 0.17, 5, 0.149, 9, 0.85, 11, 0.493,
          15, 0.013, 35, 2.638, 64, 3.204, 65, 0.191, 107, 2.224, 135, 0.61,
          258, 0.011, 259, 0.011, 277, 1.635, 279, 2.877, 395, 1.279, 767,
          4.632, 909, 4.188, 910, 5.155, 911, 5.155, 912, 5.242,
        ],
      ],
      [
        'title/interfaces/ISetDefaultDashbordRequest.html',
        [0, 0.019, 648, 2.536],
      ],
      [
        'body/interfaces/ISetDefaultDashbordRequest.html',
        [
          0, 0.036, 2, 1.093, 3, 0.188, 4, 0.167, 5, 0.146, 9, 0.875, 11, 0.441,
          14, 0.209, 15, 0.013, 18, 0.909, 21, 1.132, 43, 1.302, 44, 1.302, 45,
          1.302, 46, 1.302, 47, 1.444, 48, 1.495, 49, 1.444, 50, 1.258, 65,
          0.242, 135, 0.599, 258, 0.011, 259, 0.011, 395, 1.265, 503, 2.388,
          640, 3.662, 648, 4.395, 651, 5.042, 727, 5.329, 830, 4.201, 831,
          4.201, 832, 3.907, 833, 1.444,
        ],
      ],
      [
        'title/interfaces/IUpdateDashboardCategoryRequest.html',
        [0, 0.019, 888, 2.536],
      ],
      [
        'body/interfaces/IUpdateDashboardCategoryRequest.html',
        [
          0, 0.037, 2, 1.046, 3, 0.18, 4, 0.16, 5, 0.14, 9, 0.862, 11, 0.463,
          14, 0.2, 15, 0.013, 18, 0.87, 21, 1.084, 43, 1.522, 44, 1.522, 45,
          1.522, 46, 1.522, 47, 1.688, 48, 1.747, 49, 1.688, 50, 1.47, 65,
          0.247, 92, 1.09, 135, 0.574, 258, 0.011, 259, 0.011, 395, 1.232, 503,
          2.286, 507, 4.356, 511, 3.305, 520, 4.567, 833, 1.898, 839, 1.702,
          885, 3.741, 886, 3.741, 887, 3.506, 888, 4.281,
        ],
      ],
      ['title/interfaces/IUpdateDashboardRequest.html', [0, 0.019, 580, 2.391]],
      [
        'body/interfaces/IUpdateDashboardRequest.html',
        [
          0, 0.036, 2, 0.975, 3, 0.168, 4, 0.149, 5, 0.131, 9, 0.922, 11, 0.495,
          14, 0.187, 15, 0.013, 18, 0.811, 21, 1.011, 43, 1.593, 44, 1.593, 45,
          1.593, 46, 1.593, 47, 1.766, 48, 1.828, 49, 1.766, 50, 1.538, 65,
          0.241, 92, 0.722, 135, 0.535, 258, 0.01, 259, 0.01, 276, 1.67, 277,
          1.817, 395, 1.18, 567, 4.696, 580, 3.865, 583, 3.082, 587, 3.082, 601,
          4.374, 722, 5.01, 833, 1.852, 839, 2.174, 889, 3.488, 890, 3.269,
        ],
      ],
      ['title/interfaces/IUpdateRoleRequest.html', [0, 0.019, 895, 2.391]],
      [
        'body/interfaces/IUpdateRoleRequest.html',
        [
          0, 0.037, 2, 1.046, 3, 0.18, 4, 0.16, 5, 0.14, 9, 0.862, 11, 0.463,
          14, 0.2, 15, 0.013, 18, 0.87, 21, 1.084, 43, 1.522, 44, 1.522, 45,
          1.522, 46, 1.522, 47, 1.688, 48, 1.747, 49, 1.688, 50, 1.47, 65,
          0.247, 92, 1.09, 135, 0.574, 258, 0.011, 259, 0.011, 395, 1.232, 833,
          1.898, 839, 1.702, 891, 4.356, 892, 3.741, 893, 4.567, 894, 3.506,
          895, 4.036, 896, 3.506,
        ],
      ],
      [
        'title/interfaces/IUpdateUserVariableRequest.html',
        [0, 0.019, 907, 2.391],
      ],
      [
        'body/interfaces/IUpdateUserVariableRequest.html',
        [
          0, 0.036, 2, 0.949, 3, 0.163, 4, 0.145, 5, 0.127, 9, 0.57, 11, 0.514,
          14, 0.182, 15, 0.014, 18, 0.789, 21, 0.983, 43, 1.573, 44, 1.573, 45,
          1.573, 46, 1.573, 47, 1.744, 48, 1.805, 49, 1.744, 50, 1.519, 65,
          0.238, 92, 0.703, 135, 0.52, 258, 0.01, 259, 0.01, 338, 3.032, 395,
          1.16, 833, 1.834, 839, 2.147, 850, 4.383, 897, 2.999, 898, 2.839, 899,
          3.394, 900, 3.394, 901, 5.503, 902, 5.334, 903, 5.334, 904, 5.334,
          905, 4.299, 906, 3.181, 907, 3.798, 908, 2.999,
        ],
      ],
      ['title/interfaces/IUpdateWidgetRequest.html', [0, 0.019, 842, 2.049]],
      [
        'body/interfaces/IUpdateWidgetRequest.html',
        [
          0, 0.037, 2, 0.83, 3, 0.143, 4, 0.127, 5, 0.111, 8, 2.601, 9, 0.939,
          11, 0.443, 14, 0.159, 15, 0.014, 18, 0.691, 20, 3.133, 21, 0.86, 28,
          2.248, 38, 2.85, 39, 2.054, 43, 1.475, 44, 1.475, 45, 1.475, 46,
          1.475, 47, 1.636, 48, 1.693, 49, 1.636, 50, 1.425, 51, 2.248, 52,
          3.125, 53, 2.985, 54, 2.882, 55, 2.36, 56, 3.517, 57, 2.36, 59, 3.133,
          60, 2.36, 61, 2.727, 62, 2.727, 63, 2.248, 64, 2.409, 65, 0.247, 92,
          0.615, 107, 1.673, 118, 2.248, 135, 0.455, 143, 2.054, 147, 1.617,
          155, 3.062, 156, 2.36, 173, 2.248, 175, 2.248, 177, 2.36, 180, 2.36,
          258, 0.009, 259, 0.009, 277, 1.36, 395, 1.063, 833, 1.743, 834, 2.484,
          836, 3.298, 837, 2.36, 838, 2.248, 839, 2.013, 840, 4.105, 841, 2.248,
          842, 2.985, 843, 2.985, 844, 2.484, 845, 2.623,
        ],
      ],
      ['title/interfaces/InterfaceResponse.html', [0, 0.019, 799, 2.706]],
      [
        'body/interfaces/InterfaceResponse.html',
        [
          0, 0.028, 2, 0.794, 3, 0.137, 4, 0.121, 5, 0.106, 9, 0.89, 11, 0.407,
          14, 0.259, 15, 0.014, 22, 1.32, 24, 0.712, 25, 3.129, 26, 1.964, 65,
          0.137, 66, 0.712, 68, 1.901, 70, 1.741, 78, 1.568, 94, 1.414, 109,
          1.669, 135, 0.435, 147, 2.357, 258, 0.009, 259, 0.009, 273, 2.661,
          277, 0.98, 286, 2.15, 292, 5.354, 353, 2.509, 373, 3.053, 395, 1.032,
          403, 2.839, 404, 4.63, 408, 2.661, 412, 2.753, 569, 2.053, 761, 2.839,
          779, 3.053, 780, 4.327, 781, 3.321, 783, 4.474, 785, 2.257, 786,
          3.321, 788, 3.321, 792, 5.79, 793, 3.053, 794, 3.053, 795, 3.321, 796,
          5.653, 797, 5.06, 798, 5.06, 799, 3.826, 800, 4.978, 801, 3.321, 802,
          3.321, 803, 4.474, 804, 3.321, 805, 5.823, 806, 3.321, 807, 3.053,
          808, 3.321, 809, 3.321, 810, 2.375, 811, 5.415, 812, 3.321, 813,
          3.321, 814, 3.321, 815, 4.114, 816, 4.474, 817, 4.474, 818, 5.415,
          819, 4.474, 820, 4.474, 821, 4.474, 822, 4.474, 823, 3.321, 824,
          4.474, 825, 4.474, 826, 4.474, 827, 4.474, 828, 4.474, 829, 4.474,
        ],
      ],
      ['title/interfaces/InterfaceService.html', [0, 0.019, 780, 2.706]],
      [
        'body/interfaces/InterfaceService.html',
        [
          0, 0.028, 2, 0.795, 3, 0.137, 4, 0.121, 5, 0.106, 9, 0.836, 10, 2.77,
          11, 0.407, 12, 1.207, 14, 0.259, 15, 0.014, 22, 1.321, 24, 0.713, 25,
          3.132, 26, 1.968, 65, 0.137, 66, 0.713, 68, 1.903, 70, 1.743, 78,
          1.57, 88, 1.671, 94, 1.416, 109, 1.671, 135, 0.436, 147, 1.549, 258,
          0.009, 259, 0.009, 264, 1.743, 270, 1.088, 273, 2.665, 275, 1.294,
          276, 0.948, 277, 1.321, 286, 2.154, 292, 5.356, 353, 2.513, 373,
          3.058, 403, 2.844, 404, 4.836, 408, 2.665, 412, 2.755, 569, 2.057,
          761, 2.844, 779, 3.058, 780, 4.633, 781, 3.326, 783, 4.479, 785, 2.26,
          786, 3.326, 788, 3.326, 792, 5.86, 793, 3.058, 794, 3.058, 795, 4.479,
          796, 5.656, 797, 5.065, 798, 5.065, 799, 2.844, 800, 3.058, 801,
          3.326, 802, 3.326, 803, 4.479, 804, 3.326, 805, 5.065, 806, 3.326,
          807, 3.058, 808, 3.326, 809, 3.326, 810, 2.379, 811, 3.326, 812,
          3.326, 813, 3.326, 814, 3.326, 815, 4.118, 816, 4.479, 817, 4.479,
          818, 5.419, 819, 4.479, 820, 4.479, 821, 4.479, 822, 4.479, 823,
          3.326, 824, 4.479, 825, 4.479, 826, 4.479, 827, 4.479, 828, 4.479,
          829, 4.479, 913, 5.697, 914, 4.23,
        ],
      ],
      ['title/interfaces/MappingInput.html', [0, 0.019, 915, 2.536]],
      [
        'body/interfaces/MappingInput.html',
        [
          0, 0.019, 2, 0.341, 3, 0.059, 4, 0.052, 5, 0.046, 8, 2.231, 9, 0.785,
          10, 1.459, 11, 0.373, 14, 0.192, 15, 0.014, 22, 0.696, 23, 1.233, 24,
          0.306, 34, 0.843, 35, 0.808, 36, 0.808, 43, 0.406, 44, 0.406, 45,
          0.406, 46, 0.406, 50, 0.392, 54, 1.099, 64, 0.745, 65, 0.059, 66,
          0.306, 68, 1.865, 69, 0.951, 70, 1.366, 72, 0.617, 74, 1.261, 75,
          1.745, 78, 2.124, 86, 2.339, 88, 2.615, 92, 0.853, 94, 1.77, 99,
          0.923, 107, 1.521, 128, 1.077, 135, 0.609, 137, 1.783, 138, 1.142,
          140, 0.923, 142, 1.783, 159, 2.421, 164, 1.688, 185, 1.882, 193,
          1.142, 245, 1.891, 258, 0.005, 259, 0.005, 262, 0.555, 270, 0.772,
          272, 2.052, 276, 1.109, 279, 0.881, 333, 4.232, 334, 2.282, 376,
          2.427, 395, 1.071, 412, 0.775, 421, 0.881, 441, 1.688, 468, 2.053,
          485, 1.891, 491, 2.582, 494, 1.604, 495, 2.582, 500, 1.219, 506,
          2.033, 578, 0.808, 649, 2.421, 660, 1.142, 670, 1.219, 671, 1.142,
          724, 2.018, 740, 2.582, 767, 1.783, 768, 4.171, 785, 3.716, 791,
          2.018, 810, 3, 878, 1.604, 909, 1.783, 912, 1.219, 915, 2.421, 916,
          1.142, 917, 3.228, 918, 2.17, 919, 1.31, 920, 2.582, 921, 1.02, 922,
          3.354, 923, 1.31, 924, 1.31, 925, 1.31, 926, 2.053, 927, 1.219, 928,
          2.814, 929, 2.282, 930, 2.17, 931, 1.891, 932, 2.777, 933, 2.777, 934,
          2.777, 935, 2.777, 936, 2.777, 937, 1.31, 938, 1.31, 939, 3.361, 940,
          1.31, 941, 3.327, 942, 3.228, 943, 1.31, 944, 3.228, 945, 1.31, 946,
          1.219, 947, 1.219, 948, 1.31, 949, 1.31, 950, 1.31, 951, 1.31, 952,
          1.31, 953, 3.578, 954, 1.31, 955, 2.17, 956, 1.31, 957, 1.31, 958,
          2.777, 959, 1.31, 960, 1.31, 961, 2.17, 962, 1.31, 963, 2.582, 964,
          4.429, 965, 1.31, 966, 1.31, 967, 3.585, 968, 1.31, 969, 2.582, 970,
          2.777, 971, 1.31, 972, 3.228, 973, 1.31, 974, 1.31, 975, 2.17, 976,
          1.31, 977, 5.251, 978, 1.31, 979, 5.15, 980, 1.31, 981, 1.31, 982,
          1.219, 983, 1.219, 984, 1.31, 985, 1.31, 986, 2.17, 987, 1.219, 988,
          3.228, 989, 3.228, 990, 2.17, 991, 1.142, 992, 1.31, 993, 2.17, 994,
          1.219, 995, 1.31, 996, 2.17, 997, 1.31, 998, 1.31, 999, 1.31, 1000,
          1.31, 1001, 1.31, 1002, 1.31, 1003, 3.228, 1004, 1.31, 1005, 2.17,
          1006, 2.777, 1007, 1.31, 1008, 1.31, 1009, 1.31, 1010, 2.777, 1011,
          2.777, 1012, 1.31, 1013, 3.228, 1014, 3.228, 1015, 2.777, 1016, 4.429,
          1017, 2.777, 1018, 2.17, 1019, 2.777, 1020, 1.891, 1021, 2.17, 1022,
          1.31, 1023, 2.17, 1024, 1.891, 1025, 1.219, 1026, 1.31, 1027, 2.17,
          1028, 2.17, 1029, 2.582, 1030, 2.777, 1031, 2.777, 1032, 1.31, 1033,
          1.31, 1034, 1.31, 1035, 1.142, 1036, 1.31, 1037, 2.582, 1038, 1.31,
          1039, 1.31, 1040, 1.31, 1041, 1.219, 1042, 2.17, 1043, 2.018, 1044,
          1.31, 1045, 2.582, 1046, 1.31, 1047, 1.31, 1048, 1.31, 1049, 2.17,
          1050, 1.31, 1051, 1.31, 1052, 1.31, 1053, 1.31, 1054, 1.31, 1055,
          1.31, 1056, 1.31, 1057, 1.31, 1058, 1.31, 1059, 1.31, 1060, 1.31,
          1061, 2.777, 1062, 1.142, 1063, 1.31, 1064, 2.17, 1065, 1.31, 1066,
          1.31, 1067, 3.228, 1068, 1.31, 1069, 1.31, 1070, 1.31, 1071, 1.31,
          1072, 1.31, 1073, 1.219, 1074, 1.31, 1075, 1.31, 1076, 1.219, 1077,
          1.31, 1078, 1.31, 1079, 1.31, 1080, 1.31, 1081, 1.31, 1082, 2.17,
          1083, 1.31, 1084, 1.31, 1085, 1.31, 1086, 1.31, 1087, 1.31, 1088,
          1.31, 1089, 2.17, 1090, 3.228, 1091, 1.31, 1092, 2.17, 1093, 2.17,
          1094, 1.891, 1095, 1.31, 1096, 2.17, 1097, 1.31, 1098, 1.31, 1099,
          1.31, 1100, 1.31, 1101, 1.31, 1102, 1.31, 1103, 2.17, 1104, 1.31,
          1105, 1.31, 1106, 1.31, 1107, 1.31, 1108, 1.31, 1109, 1.31, 1110,
          1.219, 1111, 1.31, 1112, 1.31, 1113, 1.219, 1114, 1.31, 1115, 1.31,
          1116, 1.31, 1117, 1.31, 1118, 2.17, 1119, 1.31, 1120, 1.31, 1121,
          1.31, 1122, 1.31, 1123, 1.31,
        ],
      ],
      [
        'title/injectables/OpenSearchClientProvider.html',
        [22, 0.934, 926, 2.151],
      ],
      [
        'body/injectables/OpenSearchClientProvider.html',
        [
          3, 0.087, 4, 0.077, 5, 0.068, 9, 0.889, 11, 0.38, 12, 1.809, 14,
          0.216, 15, 0.014, 22, 0.952, 23, 2.293, 24, 0.452, 25, 3.083, 26,
          1.248, 35, 2.941, 54, 2.044, 61, 1.909, 62, 1.909, 65, 0.087, 66,
          0.452, 68, 2.138, 69, 1.905, 70, 1.707, 72, 1.396, 74, 2.082, 75,
          1.873, 78, 1.818, 86, 1.3, 92, 0.571, 93, 1.434, 94, 1.387, 135,
          0.277, 147, 0.983, 185, 2.123, 229, 2.966, 258, 0.007, 259, 0.007,
          264, 1.255, 270, 1.282, 272, 1.3, 275, 1.524, 276, 1.116, 277, 1.395,
          338, 2.471, 341, 1.594, 364, 1.248, 372, 2.966, 376, 2.293, 395,
          0.744, 421, 1.304, 440, 1.594, 441, 3.828, 481, 2.713, 494, 1.434,
          556, 3.14, 569, 2.422, 635, 5.774, 652, 3.92, 653, 2.109, 660, 1.69,
          733, 2.337, 767, 1.594, 768, 4.158, 785, 3.637, 810, 3.139, 844,
          2.308, 878, 2.193, 920, 3.752, 921, 1.509, 922, 3.767, 926, 2.193,
          939, 4.485, 941, 4.785, 947, 1.803, 963, 3.752, 969, 2.758, 982, 3.35,
          987, 2.758, 994, 2.758, 1025, 1.803, 1094, 4.288, 1124, 5.749, 1125,
          2.337, 1126, 4.983, 1127, 4.983, 1128, 4.103, 1129, 2.683, 1130,
          4.103, 1131, 4.103, 1132, 2.683, 1133, 4.103, 1134, 2.683, 1135,
          4.103, 1136, 2.683, 1137, 4.103, 1138, 2.683, 1139, 2.337, 1140,
          4.983, 1141, 2.683, 1142, 2.683, 1143, 6.014, 1144, 2.683, 1145,
          7.344, 1146, 4.103, 1147, 4.103, 1148, 4.103, 1149, 4.103, 1150,
          2.683, 1151, 2.337, 1152, 4.103, 1153, 4.103, 1154, 4.103, 1155,
          5.581, 1156, 3.752, 1157, 4.103, 1158, 2.683, 1159, 4.983, 1160,
          4.103, 1161, 5.525, 1162, 5.525, 1163, 5.239, 1164, 4.983, 1165,
          3.575, 1166, 4.983, 1167, 3.226, 1168, 5.239, 1169, 5.239, 1170,
          3.575, 1171, 2.683, 1172, 2.683, 1173, 2.683, 1174, 2.683, 1175,
          2.683, 1176, 4.103, 1177, 2.683, 1178, 2.683, 1179, 2.683, 1180,
          2.683, 1181, 2.683, 1182, 2.683, 1183, 2.683, 1184, 2.683, 1185,
          2.683, 1186, 2.683, 1187, 2.683, 1188, 2.683, 1189, 2.683, 1190,
          3.575, 1191, 3.575, 1192, 2.683, 1193, 2.683,
        ],
      ],
      ['title/controllers/OpenSearchController.html', [260, 1.37, 1194, 2.909]],
      [
        'body/controllers/OpenSearchController.html',
        [
          3, 0.079, 4, 0.071, 5, 0.062, 9, 0.277, 10, 1.863, 11, 0.387, 12,
          1.647, 14, 0.25, 15, 0.014, 24, 0.414, 25, 2.291, 26, 1.142, 27, 2.77,
          28, 1.25, 29, 1.931, 30, 1.931, 31, 1.931, 34, 1.782, 35, 2.727, 36,
          2.727, 37, 1.651, 41, 1.931, 42, 1.931, 51, 1.25, 52, 2.373, 53, 2.94,
          61, 2.192, 62, 2.192, 63, 2.399, 64, 2.188, 65, 0.079, 66, 0.414, 68,
          0.725, 70, 2.022, 73, 1.775, 74, 2.447, 75, 2.201, 78, 1.872, 86,
          1.83, 88, 1.862, 92, 0.656, 94, 1.588, 107, 2.163, 109, 2.417, 118,
          2.399, 125, 3.706, 126, 3.706, 132, 2.995, 135, 0.595, 136, 1.931,
          137, 1.459, 139, 4.187, 144, 3.706, 164, 1.381, 167, 3.706, 171,
          3.706, 173, 3.115, 175, 3.115, 237, 3.706, 238, 3.706, 240, 2.97, 241,
          2.97, 258, 0.006, 259, 0.006, 260, 0.836, 262, 0.751, 264, 1.172, 268,
          3.086, 270, 1.485, 272, 2.403, 275, 1.629, 276, 1.193, 277, 1.235,
          279, 2.975, 281, 3.248, 282, 1.312, 283, 1.25, 288, 2.576, 290, 3.338,
          371, 1.312, 376, 2.855, 379, 1.459, 380, 1.547, 382, 1.25, 383, 1.459,
          385, 1.459, 386, 1.194, 421, 1.863, 494, 2.518, 565, 3.168, 649, 2.97,
          843, 3.537, 1024, 2.415, 1037, 1.651, 1041, 3.579, 1043, 3.882, 1045,
          2.576, 1194, 2.77, 1195, 2.139, 1196, 4.713, 1197, 4.713, 1198, 2.456,
          1199, 2.456, 1200, 2.456, 1201, 2.456, 1202, 4.106, 1203, 2.456, 1204,
          2.456, 1205, 3.832, 1206, 2.456, 1207, 2.456, 1208, 2.456, 1209,
          2.456, 1210, 2.456, 1211, 2.456, 1212, 4.713, 1213, 4.713, 1214,
          4.713, 1215, 6.119, 1216, 4.713, 1217, 6.119, 1218, 4.713, 1219,
          4.713, 1220, 4.713, 1221, 4.713, 1222, 4.713, 1223, 4.713, 1224,
          4.713, 1225, 4.639, 1226, 4.713, 1227, 2.456, 1228, 2.456, 1229,
          2.456, 1230, 2.456, 1231, 2.456, 1232, 2.456, 1233, 2.456, 1234,
          3.832, 1235, 3.832, 1236, 3.832, 1237, 2.456, 1238, 2.456,
        ],
      ],
      ['title/modules/OpenSearchModule.html', [300, 1.189, 318, 2.536]],
      [
        'body/modules/OpenSearchModule.html',
        [
          3, 0.139, 4, 0.124, 5, 0.109, 8, 1.704, 14, 0.278, 15, 0.014, 18,
          0.675, 24, 0.727, 25, 3.163, 26, 2.007, 34, 3.738, 35, 1.923, 36,
          1.923, 37, 2.9, 61, 2.007, 62, 2.007, 65, 0.139, 66, 0.727, 229,
          3.118, 258, 0.009, 259, 0.009, 262, 1.766, 288, 3.88, 300, 2.052, 302,
          1.845, 303, 1.923, 304, 2.097, 305, 2.097, 306, 1.923, 307, 3.163,
          308, 3.163, 313, 4.695, 316, 4.695, 318, 5.121, 322, 2.806, 323,
          2.097, 324, 2.007, 326, 4.373, 331, 5.115, 341, 2.563, 342, 3.758,
          353, 2.563, 354, 3.392, 372, 3.118, 503, 1.772, 569, 2.806, 921,
          2.426, 922, 3.864, 926, 3.982, 927, 2.9, 991, 2.718, 1094, 2.718,
          1161, 3.758, 1162, 3.758, 1163, 5.029, 1165, 3.758, 1167, 3.392, 1168,
          3.758, 1169, 3.758, 1170, 3.758, 1190, 3.758, 1191, 3.758, 1194,
          4.703, 1239, 3.758, 1240, 3.758, 1241, 3.758, 1242, 4.314, 1243,
          4.314, 1244, 4.314, 1245, 4.314, 1246, 4.314, 1247, 4.314, 1248,
          4.314, 1249, 4.314, 1250, 4.314, 1251, 4.314, 1252, 4.314, 1253,
          4.314, 1254, 4.314, 1255, 4.314, 1256, 4.314, 1257, 4.314, 1258,
          4.314, 1259, 4.314, 1260, 4.314, 1261, 4.314, 1262, 4.314, 1263,
          4.314, 1264, 4.314, 1265, 4.314, 1266, 4.314, 1267, 4.314, 1268,
          5.773, 1269, 4.314, 1270, 4.314, 1271, 4.314, 1272, 4.314, 1273,
          4.314,
        ],
      ],
      ['title/injectables/OpenSearchService.html', [22, 0.934, 34, 1.872]],
      [
        'body/injectables/OpenSearchService.html',
        [
          0, 0.016, 3, 0.049, 4, 0.044, 5, 0.038, 8, 2.057, 9, 0.796, 11, 0.412,
          12, 1.892, 14, 0.176, 15, 0.014, 22, 0.602, 23, 1.643, 24, 0.257, 34,
          1.206, 35, 3.001, 36, 3.001, 43, 0.341, 44, 0.341, 45, 0.341, 46,
          0.341, 50, 0.561, 54, 0.95, 64, 0.626, 65, 0.049, 66, 0.257, 68, 2.18,
          69, 1.267, 70, 1.371, 72, 0.883, 74, 1.8, 75, 2.12, 78, 2.066, 86,
          2.256, 88, 2.472, 92, 0.908, 94, 1.696, 99, 0.775, 107, 1.392, 128,
          0.905, 135, 0.565, 137, 1.54, 138, 0.96, 140, 0.775, 142, 2.663, 159,
          2.134, 164, 1.459, 185, 1.935, 193, 0.96, 245, 1.634, 258, 0.004, 259,
          0.004, 262, 0.793, 264, 0.793, 270, 1.609, 272, 2.133, 275, 1.492,
          276, 1.367, 277, 1.132, 279, 0.74, 333, 4.103, 334, 2.012, 364, 0.708,
          376, 2.725, 395, 0.994, 412, 1.109, 421, 0.74, 440, 0.905, 441, 1.459,
          468, 2.782, 481, 0.74, 485, 1.634, 491, 2.276, 494, 1.81, 495, 2.276,
          500, 1.024, 506, 1.842, 578, 1.156, 649, 2.825, 660, 0.96, 670, 1.024,
          671, 0.96, 724, 1.743, 740, 2.276, 767, 1.54, 768, 4.108, 785, 3.691,
          791, 2.276, 810, 2.744, 878, 1.386, 909, 2.375, 912, 1.024, 915,
          2.519, 916, 0.96, 917, 1.101, 918, 1.875, 919, 1.101, 920, 2.687, 921,
          0.857, 922, 3.397, 923, 1.101, 924, 1.101, 925, 1.101, 926, 2.607,
          927, 1.024, 928, 2.519, 929, 2.375, 930, 1.875, 931, 1.634, 932,
          2.448, 933, 2.448, 934, 2.448, 935, 2.448, 936, 2.448, 937, 1.875,
          938, 2.448, 939, 3.844, 940, 2.448, 941, 3.685, 942, 3.526, 943, 2.89,
          944, 2.89, 945, 1.875, 946, 1.743, 947, 1.024, 948, 1.875, 949, 1.101,
          950, 1.101, 951, 1.101, 952, 1.101, 953, 3.241, 954, 1.101, 955,
          1.875, 956, 1.101, 957, 1.101, 958, 2.448, 959, 1.101, 960, 1.101,
          961, 1.875, 962, 1.101, 963, 2.276, 964, 4.134, 965, 1.101, 966,
          1.101, 967, 3.279, 968, 1.101, 969, 2.276, 970, 2.448, 971, 1.101,
          972, 2.89, 973, 1.101, 974, 1.101, 975, 2.448, 976, 2.89, 977, 5.146,
          978, 1.101, 979, 4.933, 980, 1.101, 981, 1.101, 982, 1.024, 983,
          1.743, 984, 1.875, 985, 1.875, 986, 2.448, 987, 1.743, 988, 3.241,
          989, 3.241, 990, 2.448, 991, 1.634, 992, 2.89, 993, 1.875, 994, 2.687,
          995, 1.875, 996, 1.875, 997, 2.448, 998, 1.101, 999, 1.101, 1000,
          1.101, 1001, 1.101, 1002, 1.101, 1003, 2.89, 1004, 1.101, 1005, 1.875,
          1006, 2.448, 1007, 1.101, 1008, 1.101, 1009, 1.101, 1010, 2.448, 1011,
          2.448, 1012, 1.101, 1013, 2.89, 1014, 2.89, 1015, 2.448, 1016, 4.134,
          1017, 2.448, 1018, 1.875, 1019, 2.448, 1020, 1.634, 1021, 1.875, 1022,
          1.101, 1023, 1.875, 1024, 1.634, 1025, 1.024, 1026, 1.101, 1027,
          1.875, 1028, 1.875, 1029, 2.276, 1030, 2.448, 1031, 2.448, 1032,
          1.875, 1033, 1.101, 1034, 2.448, 1035, 0.96, 1036, 1.101, 1037, 2.276,
          1038, 1.101, 1039, 1.101, 1040, 1.101, 1041, 2.687, 1042, 1.875, 1043,
          1.743, 1044, 1.101, 1045, 2.276, 1046, 1.101, 1047, 1.101, 1048,
          1.101, 1049, 1.875, 1050, 1.101, 1051, 1.101, 1052, 1.101, 1053,
          1.101, 1054, 1.101, 1055, 1.101, 1056, 1.101, 1057, 1.101, 1058,
          1.101, 1059, 1.101, 1060, 1.875, 1061, 2.448, 1062, 0.96, 1063, 1.101,
          1064, 1.875, 1065, 1.101, 1066, 1.101, 1067, 2.89, 1068, 1.101, 1069,
          1.101, 1070, 1.101, 1071, 1.101, 1072, 1.101, 1073, 1.024, 1074,
          1.101, 1075, 1.101, 1076, 1.024, 1077, 1.101, 1078, 1.101, 1079,
          1.101, 1080, 1.875, 1081, 1.101, 1082, 1.875, 1083, 1.101, 1084,
          1.875, 1085, 1.101, 1086, 1.101, 1087, 1.101, 1088, 1.101, 1089,
          1.875, 1090, 2.89, 1091, 1.101, 1092, 1.875, 1093, 1.875, 1094, 1.634,
          1095, 1.101, 1096, 1.875, 1097, 1.101, 1098, 1.101, 1099, 1.101, 1100,
          1.101, 1101, 1.101, 1102, 1.101, 1103, 1.875, 1104, 1.101, 1105,
          1.101, 1106, 1.101, 1107, 1.101, 1108, 1.101, 1109, 1.101, 1110,
          1.024, 1111, 1.101, 1112, 1.101, 1113, 1.024, 1114, 1.101, 1115,
          1.101, 1116, 1.101, 1117, 1.101, 1118, 1.875, 1119, 1.101, 1120,
          1.101, 1121, 1.101, 1122, 1.101, 1123, 1.101, 1274, 2.593, 1275,
          2.593, 1276, 2.593, 1277, 1.523, 1278, 2.593, 1279, 1.523, 1280,
          1.523, 1281, 1.523, 1282, 1.523, 1283, 1.523, 1284, 1.523, 1285,
          1.523, 1286, 1.523, 1287, 1.523, 1288, 1.523, 1289, 1.523, 1290,
          1.523, 1291, 1.523,
        ],
      ],
      ['title/interfaces/Output.html', [0, 0.019, 929, 2.391]],
      [
        'body/interfaces/Output.html',
        [
          0, 0.018, 2, 0.338, 3, 0.058, 4, 0.052, 5, 0.045, 8, 2.223, 9, 0.832,
          11, 0.408, 14, 0.191, 15, 0.014, 22, 0.692, 23, 1.225, 24, 0.303, 34,
          0.836, 35, 0.801, 36, 0.801, 43, 0.403, 44, 0.403, 45, 0.403, 46,
          0.403, 50, 0.389, 54, 1.092, 64, 0.739, 65, 0.058, 66, 0.303, 68,
          1.86, 69, 0.945, 70, 1.359, 72, 0.612, 74, 1.254, 75, 1.739, 78,
          2.121, 86, 2.335, 88, 2.608, 92, 0.85, 94, 1.767, 99, 0.915, 107,
          1.515, 128, 1.068, 135, 0.607, 137, 1.771, 138, 1.133, 140, 0.915,
          142, 1.771, 159, 2.406, 164, 1.677, 185, 1.875, 193, 1.133, 245,
          1.878, 258, 0.005, 259, 0.005, 262, 0.55, 270, 0.767, 272, 2.047, 276,
          1.319, 279, 0.874, 333, 4.223, 334, 2.268, 376, 2.419, 395, 1.068,
          412, 0.769, 421, 0.874, 441, 1.677, 468, 2.041, 485, 1.878, 491,
          2.567, 494, 1.593, 495, 2.567, 500, 1.209, 506, 2.024, 578, 0.801,
          649, 2.406, 660, 1.133, 670, 1.209, 671, 1.133, 724, 2.004, 740,
          2.567, 767, 1.771, 768, 4.16, 785, 3.708, 791, 2.004, 810, 2.987, 878,
          1.593, 909, 1.771, 912, 1.209, 915, 1.878, 916, 1.133, 917, 1.3, 918,
          2.155, 919, 1.3, 920, 2.567, 921, 1.011, 922, 3.342, 923, 1.3, 924,
          1.3, 925, 1.3, 926, 2.041, 927, 1.209, 928, 2.8, 929, 2.639, 930,
          3.561, 931, 1.878, 932, 2.761, 933, 2.761, 934, 2.761, 935, 2.761,
          936, 2.761, 937, 1.3, 938, 1.3, 939, 3.347, 940, 1.3, 941, 3.312, 942,
          3.212, 943, 1.3, 944, 3.212, 945, 1.3, 946, 1.209, 947, 1.209, 948,
          1.3, 949, 1.3, 950, 1.3, 951, 1.3, 952, 1.3, 953, 3.561, 954, 1.3,
          955, 2.155, 956, 1.3, 957, 1.3, 958, 2.761, 959, 1.3, 960, 1.3, 961,
          2.155, 962, 1.3, 963, 2.567, 964, 4.415, 965, 1.3, 966, 1.3, 967,
          3.571, 968, 1.3, 969, 2.567, 970, 2.761, 971, 1.3, 972, 3.212, 973,
          1.3, 974, 1.3, 975, 2.155, 976, 1.3, 977, 5.242, 978, 1.3, 979, 5.14,
          980, 1.3, 981, 1.3, 982, 1.209, 983, 1.209, 984, 1.3, 985, 1.3, 986,
          2.155, 987, 1.209, 988, 3.212, 989, 3.212, 990, 2.155, 991, 1.133,
          992, 1.3, 993, 2.155, 994, 1.209, 995, 1.3, 996, 2.155, 997, 1.3, 998,
          1.3, 999, 1.3, 1000, 1.3, 1001, 1.3, 1002, 1.3, 1003, 3.212, 1004,
          1.3, 1005, 2.155, 1006, 2.761, 1007, 1.3, 1008, 1.3, 1009, 1.3, 1010,
          2.761, 1011, 2.761, 1012, 1.3, 1013, 3.212, 1014, 3.212, 1015, 2.761,
          1016, 4.415, 1017, 2.761, 1018, 2.155, 1019, 2.761, 1020, 1.878, 1021,
          2.155, 1022, 1.3, 1023, 2.155, 1024, 1.878, 1025, 1.209, 1026, 1.3,
          1027, 2.155, 1028, 2.155, 1029, 2.567, 1030, 2.761, 1031, 2.761, 1032,
          1.3, 1033, 1.3, 1034, 1.3, 1035, 1.133, 1036, 1.3, 1037, 2.567, 1038,
          1.3, 1039, 1.3, 1040, 1.3, 1041, 1.209, 1042, 2.155, 1043, 2.004,
          1044, 1.3, 1045, 2.567, 1046, 1.3, 1047, 1.3, 1048, 1.3, 1049, 2.155,
          1050, 1.3, 1051, 1.3, 1052, 1.3, 1053, 1.3, 1054, 1.3, 1055, 1.3,
          1056, 1.3, 1057, 1.3, 1058, 1.3, 1059, 1.3, 1060, 1.3, 1061, 2.761,
          1062, 1.133, 1063, 1.3, 1064, 2.155, 1065, 1.3, 1066, 1.3, 1067,
          3.212, 1068, 1.3, 1069, 1.3, 1070, 1.3, 1071, 1.3, 1072, 1.3, 1073,
          1.209, 1074, 1.3, 1075, 1.3, 1076, 1.209, 1077, 1.3, 1078, 1.3, 1079,
          1.3, 1080, 1.3, 1081, 1.3, 1082, 2.155, 1083, 1.3, 1084, 1.3, 1085,
          1.3, 1086, 1.3, 1087, 1.3, 1088, 1.3, 1089, 2.155, 1090, 3.212, 1091,
          1.3, 1092, 2.155, 1093, 2.155, 1094, 1.878, 1095, 1.3, 1096, 2.155,
          1097, 1.3, 1098, 1.3, 1099, 1.3, 1100, 1.3, 1101, 1.3, 1102, 1.3,
          1103, 2.155, 1104, 1.3, 1105, 1.3, 1106, 1.3, 1107, 1.3, 1108, 1.3,
          1109, 1.3, 1110, 1.209, 1111, 1.3, 1112, 1.3, 1113, 1.209, 1114, 1.3,
          1115, 1.3, 1116, 1.3, 1117, 1.3, 1118, 2.155, 1119, 1.3, 1120, 1.3,
          1121, 1.3, 1122, 1.3, 1123, 1.3,
        ],
      ],
      ['title/interfaces/ProcessNode.html', [0, 0.019, 931, 2.536]],
      [
        'body/interfaces/ProcessNode.html',
        [
          0, 0.018, 2, 0.33, 3, 0.057, 4, 0.05, 5, 0.044, 8, 2.199, 9, 0.85, 11,
          0.422, 14, 0.189, 15, 0.014, 22, 0.678, 23, 1.201, 24, 0.296, 34,
          0.817, 35, 0.782, 36, 0.782, 43, 0.393, 44, 0.393, 45, 0.393, 46,
          0.393, 50, 0.38, 54, 1.922, 64, 0.721, 65, 0.057, 66, 0.296, 68,
          1.844, 69, 0.926, 70, 1.339, 72, 0.597, 74, 1.233, 75, 1.722, 78,
          2.114, 86, 2.324, 88, 2.589, 92, 0.842, 94, 1.757, 99, 0.894, 107,
          1.498, 128, 1.043, 135, 0.601, 137, 1.736, 138, 1.106, 140, 0.894,
          142, 1.736, 159, 2.366, 164, 1.644, 185, 1.853, 193, 1.106, 245,
          1.842, 258, 0.005, 259, 0.005, 262, 0.537, 270, 0.752, 272, 2.153,
          276, 1.306, 279, 0.854, 333, 4.2, 334, 2.23, 376, 2.395, 395, 1.057,
          412, 0.751, 421, 0.854, 441, 1.644, 468, 2.006, 485, 1.842, 491,
          2.524, 494, 1.562, 495, 2.524, 500, 1.18, 506, 1.998, 578, 0.782, 649,
          2.366, 660, 1.106, 670, 1.18, 671, 1.106, 724, 1.965, 740, 3.529, 767,
          1.736, 768, 4.13, 785, 3.685, 791, 1.965, 810, 2.952, 878, 1.562, 909,
          1.736, 912, 1.18, 915, 1.842, 916, 1.106, 917, 1.269, 918, 2.113, 919,
          1.269, 920, 2.524, 921, 0.987, 922, 3.306, 923, 1.269, 924, 1.269,
          925, 1.269, 926, 2.006, 927, 1.18, 928, 2.759, 929, 2.23, 930, 2.113,
          931, 3.064, 932, 3.795, 933, 3.795, 934, 3.795, 935, 3.795, 936,
          3.795, 937, 1.269, 938, 1.269, 939, 3.308, 940, 1.269, 941, 3.269,
          942, 3.165, 943, 1.269, 944, 3.165, 945, 1.269, 946, 1.18, 947, 1.18,
          948, 1.269, 949, 1.269, 950, 1.269, 951, 1.269, 952, 1.269, 953,
          3.515, 954, 1.269, 955, 2.113, 956, 1.269, 957, 1.269, 958, 2.714,
          959, 1.269, 960, 1.269, 961, 2.113, 962, 1.269, 963, 2.524, 964,
          4.375, 965, 1.269, 966, 1.269, 967, 3.529, 968, 1.269, 969, 2.524,
          970, 2.714, 971, 1.269, 972, 3.165, 973, 1.269, 974, 1.269, 975,
          2.113, 976, 1.269, 977, 5.215, 978, 1.269, 979, 5.111, 980, 1.269,
          981, 1.269, 982, 1.18, 983, 1.18, 984, 1.269, 985, 1.269, 986, 2.113,
          987, 1.18, 988, 3.165, 989, 3.165, 990, 2.113, 991, 1.106, 992, 1.269,
          993, 2.113, 994, 1.18, 995, 1.269, 996, 2.113, 997, 1.269, 998, 1.269,
          999, 1.269, 1000, 1.269, 1001, 1.269, 1002, 1.269, 1003, 3.165, 1004,
          1.269, 1005, 2.113, 1006, 2.714, 1007, 1.269, 1008, 1.269, 1009,
          1.269, 1010, 2.714, 1011, 2.714, 1012, 1.269, 1013, 3.165, 1014,
          3.165, 1015, 2.714, 1016, 4.375, 1017, 2.714, 1018, 2.113, 1019,
          2.714, 1020, 1.842, 1021, 2.113, 1022, 1.269, 1023, 2.113, 1024,
          1.842, 1025, 1.18, 1026, 1.269, 1027, 2.113, 1028, 2.113, 1029, 2.524,
          1030, 2.714, 1031, 2.714, 1032, 1.269, 1033, 1.269, 1034, 1.269, 1035,
          1.106, 1036, 1.269, 1037, 2.524, 1038, 1.269, 1039, 1.269, 1040,
          1.269, 1041, 1.18, 1042, 2.113, 1043, 1.965, 1044, 1.269, 1045, 2.524,
          1046, 1.269, 1047, 1.269, 1048, 1.269, 1049, 2.113, 1050, 1.269, 1051,
          1.269, 1052, 1.269, 1053, 1.269, 1054, 1.269, 1055, 1.269, 1056,
          1.269, 1057, 1.269, 1058, 1.269, 1059, 1.269, 1060, 1.269, 1061,
          2.714, 1062, 1.106, 1063, 1.269, 1064, 2.113, 1065, 1.269, 1066,
          1.269, 1067, 3.165, 1068, 1.269, 1069, 1.269, 1070, 1.269, 1071,
          1.269, 1072, 1.269, 1073, 1.18, 1074, 1.269, 1075, 1.269, 1076, 1.18,
          1077, 1.269, 1078, 1.269, 1079, 1.269, 1080, 1.269, 1081, 1.269, 1082,
          2.113, 1083, 1.269, 1084, 1.269, 1085, 1.269, 1086, 1.269, 1087,
          1.269, 1088, 1.269, 1089, 2.113, 1090, 3.165, 1091, 1.269, 1092,
          2.113, 1093, 2.113, 1094, 1.842, 1095, 1.269, 1096, 2.113, 1097,
          1.269, 1098, 1.269, 1099, 1.269, 1100, 1.269, 1101, 1.269, 1102,
          1.269, 1103, 2.113, 1104, 1.269, 1105, 1.269, 1106, 1.269, 1107,
          1.269, 1108, 1.269, 1109, 1.269, 1110, 1.18, 1111, 1.269, 1112, 1.269,
          1113, 1.18, 1114, 1.269, 1115, 1.269, 1116, 1.269, 1117, 1.269, 1118,
          2.113, 1119, 1.269, 1120, 1.269, 1121, 1.269, 1122, 1.269, 1123,
          1.269,
        ],
      ],
      ['title/controllers/RoleController.html', [260, 1.37, 1292, 2.909]],
      [
        'body/controllers/RoleController.html',
        [
          3, 0.14, 4, 0.125, 5, 0.109, 11, 0.412, 12, 1.86, 14, 0.279, 15,
          0.014, 18, 0.906, 19, 2.108, 21, 0.845, 24, 0.731, 33, 2.108, 65,
          0.14, 66, 0.731, 68, 1.281, 69, 1.374, 72, 1.476, 74, 2.574, 75,
          2.315, 76, 2.017, 78, 1.596, 81, 3.451, 86, 2.066, 92, 0.806, 94,
          1.621, 95, 2.207, 101, 3.374, 132, 2.438, 135, 0.447, 258, 0.009, 259,
          0.009, 260, 1.476, 262, 1.326, 264, 1.772, 268, 3.485, 270, 1.677,
          275, 1.995, 276, 1.56, 277, 1.513, 281, 3.915, 282, 2.317, 283, 2.207,
          371, 2.317, 376, 3.066, 398, 3.668, 437, 3.409, 506, 2.98, 514, 2.915,
          515, 3.384, 518, 2.915, 522, 2.207, 523, 2.915, 524, 2.575, 535,
          2.915, 538, 2.915, 539, 3.134, 578, 3.233, 617, 3.134, 891, 4.135,
          893, 2.915, 895, 4.135, 1292, 4.187, 1293, 3.777, 1294, 4.336, 1295,
          4.336, 1296, 4.336, 1297, 4.336, 1298, 3.777, 1299, 4.336, 1300,
          4.336, 1301, 5.792, 1302, 4.336, 1303, 4.336,
        ],
      ],
      ['title/modules/RoleModule.html', [300, 1.189, 319, 2.706]],
      [
        'body/modules/RoleModule.html',
        [
          3, 0.181, 4, 0.161, 5, 0.141, 14, 0.265, 15, 0.013, 24, 0.946, 65,
          0.181, 66, 0.946, 258, 0.011, 259, 0.011, 262, 2.089, 300, 2.174, 302,
          2.4, 303, 2.501, 304, 2.728, 305, 2.728, 306, 2.501, 307, 3.579, 308,
          3.579, 319, 5.433, 322, 3.32, 323, 2.728, 324, 2.61, 398, 4.688, 758,
          5.949, 1292, 5.321, 1298, 4.889, 1304, 4.889, 1305, 4.889, 1306,
          4.889, 1307, 5.612, 1308, 5.612,
        ],
      ],
      ['title/injectables/RoleService.html', [22, 0.934, 398, 2.264]],
      [
        'body/injectables/RoleService.html',
        [
          3, 0.123, 4, 0.109, 5, 0.096, 9, 0.81, 11, 0.438, 12, 2.047, 14,
          0.219, 15, 0.014, 16, 2.14, 17, 4.262, 18, 0.595, 19, 1.85, 22, 1.229,
          23, 2.708, 24, 0.641, 32, 2.033, 33, 1.85, 65, 0.123, 66, 0.641, 68,
          1.8, 69, 2.088, 70, 1.621, 72, 1.295, 74, 2.585, 75, 2.325, 76, 2.464,
          78, 1.91, 81, 3.089, 82, 4.46, 84, 2.26, 85, 3.707, 86, 2.196, 88,
          2.093, 92, 0.917, 93, 2.033, 94, 1.638, 95, 1.937, 97, 2.397, 99,
          1.937, 100, 3.562, 101, 3.066, 102, 3.257, 104, 3.562, 107, 1.511,
          110, 3.147, 111, 2.033, 135, 0.392, 185, 1.343, 258, 0.008, 259,
          0.008, 264, 1.621, 270, 1.695, 275, 2.12, 276, 1.73, 277, 1.607, 338,
          1.563, 364, 1.77, 386, 1.85, 395, 0.961, 398, 2.98, 437, 6.136, 481,
          1.85, 506, 2.504, 548, 2.397, 552, 3.915, 556, 2.397, 578, 2.938,
          1309, 3.315, 1310, 5.298, 1311, 5.298, 1312, 6.096, 1313, 3.805, 1314,
          5.298, 1315, 3.805, 1316, 3.805, 1317, 6.096, 1318, 3.805, 1319,
          5.298, 1320, 3.805, 1321, 3.805, 1322, 3.805, 1323, 5.31, 1324, 3.805,
          1325, 3.805, 1326, 3.805, 1327, 3.805,
        ],
      ],
      ['title/guards/RolesGuard.html', [392, 2.909, 526, 2.391]],
      [
        'body/guards/RolesGuard.html',
        [
          3, 0.154, 4, 0.137, 5, 0.12, 11, 0.389, 12, 1.755, 14, 0.269, 15,
          0.014, 22, 1.427, 23, 2.803, 24, 0.801, 65, 0.154, 66, 0.801, 68,
          2.015, 69, 1.95, 70, 1.882, 72, 1.618, 78, 1.988, 94, 1.529, 109,
          2.431, 135, 0.49, 147, 2.254, 258, 0.01, 259, 0.01, 264, 1.882, 270,
          1.223, 275, 1.882, 276, 1.379, 277, 1.427, 376, 2.528, 386, 2.311,
          393, 3.738, 395, 0.862, 396, 6.286, 398, 4.306, 400, 5.361, 401,
          5.673, 403, 3.196, 404, 4.587, 405, 3.738, 408, 2.995, 409, 4.141,
          410, 4.141, 412, 2.033, 413, 4.141, 421, 2.311, 442, 4.306, 525,
          3.196, 526, 3.655, 1328, 4.141, 1329, 4.754, 1330, 7.792, 1331, 4.754,
          1332, 4.754, 1333, 4.141, 1334, 4.754, 1335, 4.754, 1336, 4.754, 1337,
          4.754, 1338, 4.754, 1339, 6.154, 1340, 4.754, 1341, 4.754, 1342,
          4.754, 1343, 6.154, 1344, 4.754, 1345, 4.754,
        ],
      ],
      [
        'title/controllers/UserVariableController.html',
        [260, 1.37, 1346, 2.909],
      ],
      [
        'body/controllers/UserVariableController.html',
        [
          3, 0.103, 4, 0.091, 5, 0.08, 8, 1.839, 9, 0.358, 10, 2.263, 11, 0.452,
          12, 1.844, 14, 0.274, 15, 0.014, 18, 0.728, 19, 1.544, 21, 0.619, 24,
          0.535, 33, 1.544, 65, 0.103, 66, 0.535, 69, 1.006, 70, 0.971, 74,
          2.565, 75, 2.307, 76, 1.477, 78, 1.519, 81, 3.309, 86, 2.14, 92,
          0.845, 94, 1.606, 95, 1.617, 101, 2.824, 107, 1.328, 109, 1.839, 132,
          3.1, 135, 0.327, 258, 0.007, 259, 0.007, 260, 1.081, 262, 0.971, 264,
          1.424, 268, 3.454, 270, 1.662, 272, 2.475, 275, 1.977, 276, 1.448,
          277, 1.499, 281, 3.635, 282, 1.697, 283, 1.617, 347, 4.541, 371,
          1.697, 376, 3.05, 379, 1.886, 380, 2.001, 382, 1.617, 383, 1.886, 385,
          1.886, 386, 1.544, 387, 2.001, 421, 1.544, 442, 1.786, 494, 1.697,
          506, 2.265, 514, 2.135, 515, 2.951, 518, 2.135, 521, 2.295, 522,
          1.617, 523, 2.135, 524, 1.886, 525, 2.135, 526, 1.886, 527, 2.295,
          533, 2.295, 535, 2.135, 538, 2.135, 539, 2.295, 564, 3.985, 565,
          4.345, 566, 3.985, 569, 1.544, 576, 4.388, 578, 2.706, 590, 2.497,
          615, 2.766, 617, 2.295, 623, 2.766, 665, 4.056, 667, 2.766, 671,
          2.001, 727, 2.135, 897, 3.606, 898, 3.799, 905, 2.135, 907, 3.606,
          908, 3.606, 1156, 2.135, 1346, 3.365, 1347, 2.766, 1348, 5.082, 1349,
          3.176, 1350, 3.176, 1351, 3.176, 1352, 3.176, 1353, 3.176, 1354,
          3.176, 1355, 3.176, 1356, 3.176, 1357, 3.176, 1358, 3.176, 1359,
          3.176, 1360, 3.176, 1361, 3.176, 1362, 3.176, 1363, 3.473, 1364,
          2.766, 1365, 3.176, 1366, 3.176, 1367, 4.656, 1368, 3.176, 1369,
          3.176, 1370, 3.176, 1371, 3.176, 1372, 3.176, 1373, 3.176, 1374,
          4.656, 1375, 3.176, 1376, 3.176, 1377, 3.176, 1378, 3.176, 1379,
          3.176, 1380, 4.656, 1381, 3.176, 1382, 3.176, 1383, 3.176,
        ],
      ],
      ['title/modules/UserVariableModule.html', [300, 1.189, 320, 2.706]],
      [
        'body/modules/UserVariableModule.html',
        [
          3, 0.185, 4, 0.164, 5, 0.144, 14, 0.267, 15, 0.013, 24, 0.965, 65,
          0.185, 66, 0.965, 258, 0.011, 259, 0.011, 262, 2.114, 272, 2.19, 300,
          2.193, 302, 2.448, 303, 2.551, 304, 2.782, 305, 2.782, 306, 2.551,
          307, 3.609, 308, 2.782, 320, 5.392, 322, 3.36, 323, 2.782, 324, 2.662,
          347, 3.847, 898, 3.219, 1346, 5.367, 1363, 5.054, 1364, 4.986, 1384,
          4.986, 1385, 4.986, 1386, 5.723, 1387, 5.723,
        ],
      ],
      ['title/injectables/UserVariableService.html', [22, 0.934, 1363, 2.536]],
      [
        'body/injectables/UserVariableService.html',
        [
          3, 0.096, 4, 0.085, 5, 0.075, 8, 1.75, 9, 0.884, 10, 2.154, 11, 0.462,
          12, 2.047, 14, 0.191, 15, 0.014, 16, 1.67, 17, 3.916, 18, 0.464, 19,
          1.444, 22, 1.028, 23, 2.414, 24, 0.501, 32, 1.587, 33, 1.444, 54,
          1.088, 65, 0.096, 66, 0.501, 68, 1.565, 69, 1.862, 70, 1.355, 72,
          1.011, 74, 2.621, 75, 2.358, 76, 2.061, 78, 1.935, 81, 2.802, 82,
          4.551, 83, 2.978, 84, 1.764, 85, 3.842, 86, 2.225, 88, 1.75, 92,
          1.066, 93, 1.587, 94, 1.698, 95, 1.512, 97, 1.871, 99, 1.512, 100,
          2.978, 101, 2.733, 102, 2.832, 107, 1.881, 109, 1.173, 110, 3.49, 111,
          1.587, 114, 2.792, 135, 0.306, 185, 1.048, 258, 0.007, 259, 0.007,
          264, 1.355, 270, 1.757, 272, 2.465, 275, 2.148, 276, 1.573, 277,
          1.629, 347, 4.911, 364, 1.381, 386, 1.444, 395, 0.803, 481, 1.444,
          506, 1.82, 547, 2.978, 548, 1.871, 552, 4.057, 556, 1.871, 564, 4.247,
          566, 2.147, 569, 1.444, 571, 2.335, 576, 3.831, 578, 2.362, 710, 3.86,
          743, 2.587, 745, 2.587, 898, 4.109, 1156, 3.563, 1348, 5.968, 1363,
          2.792, 1388, 2.587, 1389, 4.431, 1390, 5.3, 1391, 4.431, 1392, 5.3,
          1393, 2.97, 1394, 2.97, 1395, 2.97, 1396, 4.431, 1397, 2.97, 1398,
          2.97, 1399, 2.97, 1400, 2.97, 1401, 5.3, 1402, 2.97, 1403, 4.431,
          1404, 7.415, 1405, 2.97, 1406, 2.97, 1407, 2.97, 1408, 2.97, 1409,
          2.97, 1410, 2.97, 1411, 2.97, 1412, 2.97, 1413, 2.97, 1414, 2.97,
          1415, 2.97, 1416, 2.97, 1417, 2.97,
        ],
      ],
      ['title/controllers/WidgetController.html', [260, 1.37, 1418, 2.909]],
      [
        'body/controllers/WidgetController.html',
        [
          3, 0.111, 4, 0.099, 5, 0.086, 11, 0.421, 12, 1.901, 14, 0.28, 15,
          0.014, 18, 0.536, 21, 0.668, 24, 0.578, 25, 2.8, 26, 1.595, 33, 1.668,
          39, 2.927, 40, 2.697, 65, 0.111, 66, 0.578, 67, 3.239, 68, 1.013, 69,
          1.087, 70, 1.506, 74, 2.596, 75, 2.336, 76, 1.595, 78, 1.587, 81,
          3.318, 83, 2.306, 86, 2.198, 92, 0.802, 94, 1.724, 95, 1.746, 101,
          2.679, 107, 1.795, 116, 2.697, 132, 1.929, 135, 0.354, 258, 0.008,
          259, 0.008, 260, 1.167, 262, 1.049, 264, 1.506, 268, 3.561, 270,
          1.714, 272, 2.112, 275, 2.039, 276, 1.493, 277, 1.546, 281, 3.748,
          282, 1.833, 283, 1.746, 371, 1.833, 376, 3.104, 379, 2.037, 382,
          1.746, 383, 2.037, 385, 2.037, 386, 1.668, 387, 2.161, 392, 2.479,
          405, 2.697, 421, 2.394, 442, 1.929, 506, 2.366, 514, 2.306, 515, 3.06,
          518, 2.306, 519, 2.697, 521, 3.559, 522, 1.746, 523, 2.306, 524,
          2.925, 525, 2.306, 526, 2.037, 527, 2.479, 533, 2.479, 535, 2.306,
          538, 2.306, 578, 2.567, 590, 2.697, 617, 2.479, 836, 1.929, 838,
          3.204, 840, 3.54, 841, 3.204, 842, 3.204, 851, 2.479, 946, 3.31, 1020,
          2.161, 1035, 3.966, 1323, 2.988, 1418, 3.559, 1419, 2.988, 1420, 3.43,
          1421, 3.43, 1422, 3.43, 1423, 3.43, 1424, 3.43, 1425, 3.43, 1426,
          3.43, 1427, 3.43, 1428, 3.43, 1429, 3.43, 1430, 2.988, 1431, 3.43,
          1432, 3.43, 1433, 3.43, 1434, 3.43, 1435, 3.43, 1436, 6.665, 1437,
          4.924, 1438, 3.43, 1439, 4.924, 1440, 4.924, 1441, 4.924, 1442, 3.43,
          1443, 3.43, 1444, 3.43, 1445, 3.43, 1446, 3.43, 1447, 3.43, 1448,
          4.924, 1449, 3.43, 1450, 3.43,
        ],
      ],
      ['title/modules/WidgetModule.html', [300, 1.189, 321, 2.536]],
      [
        'body/modules/WidgetModule.html',
        [
          3, 0.175, 4, 0.156, 5, 0.137, 14, 0.272, 15, 0.013, 24, 0.915, 35,
          2.418, 36, 2.418, 65, 0.175, 66, 0.915, 67, 4.668, 258, 0.011, 259,
          0.011, 262, 2.046, 300, 2.142, 302, 2.32, 303, 2.418, 304, 2.638, 305,
          2.638, 306, 2.418, 307, 3.526, 308, 3.526, 318, 4.99, 321, 5.147, 322,
          3.252, 323, 2.638, 324, 2.524, 326, 4.497, 345, 4.727, 1418, 5.243,
          1430, 4.727, 1451, 4.727, 1452, 5.426, 1453, 4.727, 1454, 4.727, 1455,
          5.426, 1456, 5.426,
        ],
      ],
      ['title/injectables/WidgetService.html', [22, 0.934, 67, 2.264]],
      [
        'body/injectables/WidgetService.html',
        [
          0, 0.006, 1, 4.061, 3, 0.043, 4, 0.038, 5, 0.034, 6, 1.051, 8, 1.637,
          9, 0.8, 10, 1.781, 11, 0.416, 12, 1.542, 14, 0.202, 15, 0.014, 16,
          0.752, 17, 2.697, 18, 0.363, 19, 0.65, 20, 1.957, 21, 0.26, 22, 0.538,
          23, 1.505, 24, 0.225, 25, 2.37, 26, 0.622, 27, 1.676, 28, 2.626, 29,
          1.051, 30, 1.051, 31, 1.051, 32, 0.714, 33, 0.65, 34, 1.704, 35,
          0.596, 36, 0.596, 37, 0.899, 38, 1.127, 39, 1.704, 40, 1.051, 41,
          1.051, 42, 1.051, 43, 0.3, 44, 0.3, 45, 0.3, 46, 0.3, 47, 0.332, 48,
          0.344, 49, 0.332, 50, 0.289, 51, 2.109, 52, 3.206, 53, 2.312, 54,
          2.241, 55, 2.757, 56, 3.002, 57, 2.214, 58, 1.165, 59, 2.888, 60,
          1.64, 61, 2.267, 62, 2.267, 63, 1.865, 64, 2.808, 65, 0.043, 66,
          0.225, 67, 1.304, 68, 1.659, 69, 1.439, 70, 1.12, 71, 2.019, 72,
          0.789, 73, 2.219, 74, 2.093, 75, 1.882, 76, 1.078, 77, 2.674, 78,
          2.067, 79, 3.955, 80, 2.88, 81, 1.632, 82, 3.337, 83, 4.358, 84,
          0.794, 85, 2.33, 86, 1.544, 87, 1.165, 88, 1.637, 89, 2.019, 90,
          3.191, 91, 1.823, 92, 0.782, 93, 0.714, 94, 1.775, 95, 1.18, 96,
          2.674, 97, 0.842, 98, 1.165, 99, 0.681, 100, 1.558, 101, 1.428, 102,
          1.64, 103, 1.165, 104, 1.558, 105, 1.823, 106, 1.165, 107, 1.603, 108,
          1.676, 109, 1.637, 110, 1.823, 111, 0.714, 112, 1.165, 113, 1.165,
          114, 1.461, 115, 1.165, 116, 1.823, 117, 1.165, 118, 2.109, 119,
          1.165, 120, 1.165, 121, 1.165, 122, 1.165, 123, 1.165, 124, 2.674,
          125, 3.258, 126, 3.258, 127, 1.165, 128, 0.794, 129, 1.165, 130,
          1.165, 131, 1.165, 132, 1.304, 133, 1.165, 134, 2.019, 135, 0.468,
          136, 1.051, 137, 0.794, 138, 0.842, 139, 1.051, 140, 0.681, 141,
          2.674, 142, 1.377, 143, 1.927, 144, 1.051, 145, 0.899, 146, 1.165,
          147, 1.124, 148, 2.674, 149, 1.165, 150, 1.165, 151, 1.165, 152,
          2.019, 153, 3.191, 154, 3.191, 155, 2.399, 156, 1.957, 157, 3.191,
          158, 2.019, 159, 1.934, 160, 5.202, 161, 3.191, 162, 2.019, 163,
          3.955, 164, 3.359, 165, 3.191, 166, 2.019, 167, 2.413, 168, 3.191,
          169, 2.019, 170, 3.609, 171, 2.413, 172, 2.019, 173, 2.109, 174,
          2.019, 175, 2.109, 176, 3.191, 177, 1.957, 178, 2.019, 179, 3.191,
          180, 1.957, 181, 2.019, 182, 3.191, 183, 2.674, 184, 6.072, 185,
          1.083, 186, 3.609, 187, 1.165, 188, 1.165, 189, 1.165, 190, 1.051,
          191, 1.165, 192, 1.165, 193, 1.461, 194, 0.966, 195, 1.165, 196,
          2.019, 197, 2.019, 198, 1.165, 199, 1.165, 200, 3.609, 201, 2.019,
          202, 2.019, 203, 1.165, 204, 1.165, 205, 4.246, 206, 1.165, 207,
          2.019, 208, 1.165, 209, 1.165, 210, 1.165, 211, 1.165, 212, 2.019,
          213, 1.165, 214, 1.165, 215, 3.955, 216, 3.955, 217, 2.019, 218,
          2.019, 219, 1.165, 220, 1.165, 221, 2.019, 222, 2.019, 223, 2.019,
          224, 1.165, 225, 1.165, 226, 1.165, 227, 1.165, 228, 1.165, 229,
          0.966, 230, 1.165, 231, 1.165, 232, 1.165, 233, 1.165, 234, 1.165,
          235, 3.191, 236, 1.165, 237, 1.051, 238, 1.051, 239, 1.165, 240,
          1.461, 241, 1.461, 242, 1.165, 243, 2.019, 244, 1.165, 245, 0.842,
          246, 2.674, 247, 3.191, 248, 3.191, 249, 2.019, 250, 1.165, 251,
          1.165, 252, 1.165, 253, 1.165, 254, 1.165, 255, 1.165, 256, 1.165,
          257, 1.165, 258, 0.004, 259, 0.004, 264, 0.709, 270, 1.254, 275,
          1.578, 276, 1.156, 277, 1.197, 364, 0.622, 395, 0.42, 481, 0.65, 506,
          0.952, 547, 1.558, 548, 0.842, 552, 2.461, 556, 0.842, 578, 1.033,
          1035, 1.461, 1457, 2.318, 1458, 1.337, 1459, 1.337, 1460, 1.337, 1461,
          1.337, 1462, 1.337, 1463, 1.337, 1464, 1.337, 1465, 1.337, 1466,
          1.337,
        ],
      ],
      ['title/coverage.html', [1467, 4.331]],
      [
        'body/coverage.html',
        [
          0, 0.04, 1, 2.142, 5, 0.075, 6, 3.478, 11, 0.431, 15, 0.014, 22,
          1.719, 32, 2.363, 34, 1.378, 35, 3.127, 36, 2.936, 38, 1.44, 39,
          1.378, 67, 1.666, 70, 0.906, 164, 4.762, 258, 0.007, 259, 0.007, 260,
          2.441, 261, 2.142, 263, 2.581, 272, 0.939, 279, 1.44, 284, 1.867, 286,
          1.508, 306, 1.321, 339, 2.973, 341, 2.627, 347, 2.973, 365, 2.581,
          369, 2.142, 370, 2.581, 382, 1.508, 392, 3.197, 394, 2.581, 398,
          1.666, 442, 1.666, 468, 1.583, 471, 2.581, 502, 2.142, 503, 3.045,
          504, 2.581, 507, 1.76, 511, 1.76, 515, 1.44, 522, 1.508, 524, 1.76,
          526, 1.76, 528, 1.867, 546, 2.581, 573, 2.142, 574, 2.581, 580, 1.76,
          583, 1.76, 587, 1.76, 602, 1.867, 633, 2.142, 634, 2.581, 640, 1.867,
          648, 1.867, 652, 1.76, 682, 2.581, 703, 2.581, 779, 3.826, 780, 1.992,
          799, 1.992, 830, 3.826, 831, 3.826, 832, 1.992, 834, 3.839, 837,
          1.583, 838, 1.508, 841, 1.508, 842, 1.508, 843, 1.508, 846, 1.992,
          847, 4.589, 866, 1.992, 872, 1.992, 877, 1.992, 879, 1.992, 885,
          3.946, 886, 3.946, 887, 1.867, 888, 1.867, 889, 3.946, 890, 1.867,
          891, 1.76, 892, 3.946, 894, 1.867, 895, 1.76, 896, 1.867, 897, 1.76,
          898, 3.705, 899, 3.946, 900, 3.946, 906, 1.867, 907, 1.76, 908, 1.76,
          909, 1.76, 910, 2.581, 911, 2.581, 915, 1.867, 916, 3.957, 926, 1.583,
          928, 1.867, 929, 1.76, 931, 1.867, 1062, 3.335, 1124, 2.581, 1125,
          2.581, 1167, 2.33, 1194, 2.142, 1195, 2.581, 1225, 3.853, 1292, 2.142,
          1293, 2.581, 1309, 2.581, 1328, 2.581, 1346, 2.142, 1347, 2.581, 1348,
          4.161, 1363, 1.867, 1388, 2.581, 1418, 2.142, 1419, 2.581, 1467, 2.33,
          1468, 2.581, 1469, 2.963, 1470, 2.963, 1471, 2.581, 1472, 2.581, 1473,
          7.982, 1474, 7.016, 1475, 7.658, 1476, 6.28, 1477, 5.292, 1478, 2.963,
          1479, 2.963, 1480, 6.587, 1481, 6.587, 1482, 4.161, 1483, 4.423, 1484,
          5.292, 1485, 2.963, 1486, 5.292, 1487, 2.581, 1488, 2.581, 1489,
          2.581, 1490, 2.963, 1491, 2.963, 1492, 2.963, 1493, 2.963, 1494,
          2.963, 1495, 2.963,
        ],
      ],
      ['title/dependencies.html', [303, 2.159, 770, 2.637]],
      [
        'body/dependencies.html',
        [
          15, 0.014, 18, 1.03, 19, 2.574, 21, 1.031, 24, 0.892, 26, 2.462, 27,
          3.827, 258, 0.011, 259, 0.011, 283, 2.695, 303, 2.359, 329, 4.162,
          330, 5.64, 333, 3.913, 334, 3.144, 372, 3.827, 408, 3.336, 485, 3.336,
          761, 3.559, 775, 4.612, 792, 3.827, 793, 3.827, 794, 3.827, 852,
          3.827, 921, 2.977, 922, 3.913, 1139, 4.612, 1333, 4.612, 1496, 5.294,
          1497, 5.294, 1498, 5.294, 1499, 7.173, 1500, 5.294, 1501, 5.294, 1502,
          5.294, 1503, 5.294, 1504, 5.294, 1505, 7.173, 1506, 5.294, 1507,
          5.294, 1508, 5.294, 1509, 7.173, 1510, 5.294, 1511, 5.294, 1512,
          5.294, 1513, 5.294, 1514, 5.294, 1515, 5.294, 1516, 5.294, 1517,
          5.294, 1518, 5.294, 1519, 5.294, 1520, 5.294, 1521, 5.294, 1522,
          5.294, 1523, 5.294, 1524, 5.294, 1525, 4.612, 1526, 5.294, 1527,
          5.294, 1528, 5.294,
        ],
      ],
      ['title/miscellaneous/functions.html', [140, 2.467, 1529, 2.113]],
      [
        'body/miscellaneous/functions.html',
        [
          11, 0.438, 15, 0.013, 16, 3.902, 32, 3.979, 101, 2.68, 135, 0.594,
          140, 2.933, 185, 2.033, 258, 0.011, 259, 0.011, 270, 1.785, 275,
          2.122, 276, 1.555, 277, 1.609, 306, 3.319, 412, 3.184, 440, 3.422,
          481, 3.373, 515, 3.373, 524, 4.121, 862, 5.015, 1482, 4.53, 1489,
          5.019, 1529, 3.63, 1530, 5.761, 1531, 6.044, 1532, 5.761, 1533, 6.938,
          1534, 6.044, 1535, 6.938, 1536, 6.938, 1537, 6.938, 1538, 5.761, 1539,
          5.761,
        ],
      ],
      ['title/index.html', [85, 1.886, 135, 0.346, 1151, 2.922]],
      [
        'body/index.html',
        [
          4, 0.133, 15, 0.013, 47, 1.154, 258, 0.01, 259, 0.01, 288, 3.122, 324,
          3.326, 440, 2.759, 762, 4.046, 807, 4.877, 849, 3.357, 863, 4.074,
          921, 4.022, 991, 2.926, 1076, 3.122, 1467, 3.651, 1468, 4.046, 1540,
          4.644, 1541, 4.644, 1542, 6.747, 1543, 4.046, 1544, 4.644, 1545,
          4.644, 1546, 4.046, 1547, 4.644, 1548, 4.644, 1549, 6.747, 1550,
          4.644, 1551, 4.644, 1552, 7.151, 1553, 4.644, 1554, 6.747, 1555, 6.75,
          1556, 4.644, 1557, 7.749, 1558, 4.644, 1559, 4.644, 1560, 4.644, 1561,
          4.644, 1562, 4.644, 1563, 6.747, 1564, 4.644, 1565, 6.061, 1566,
          4.644, 1567, 4.644, 1568, 4.644, 1569, 7.151, 1570, 4.644, 1571,
          4.644, 1572, 4.644, 1573, 4.644, 1574, 4.644, 1575, 6.061, 1576,
          4.644, 1577, 4.644, 1578, 6.23, 1579, 6.061, 1580, 4.644, 1581, 4.644,
          1582, 4.644, 1583, 4.644, 1584, 4.644, 1585, 4.644, 1586, 6.747, 1587,
          4.644, 1588, 4.644, 1589, 4.644, 1590, 6.061, 1591, 4.046, 1592,
          4.644, 1593, 4.046, 1594, 6.747, 1595, 4.644, 1596, 4.644, 1597,
          4.644, 1598, 4.644, 1599, 4.046, 1600, 4.644, 1601, 6.061, 1602,
          4.644, 1603, 4.644, 1604, 4.644, 1605, 4.644, 1606, 4.644, 1607,
          6.061, 1608, 4.644, 1609, 4.644, 1610, 4.644, 1611, 6.061, 1612,
          6.061, 1613, 4.644, 1614, 4.644, 1615, 4.644, 1616, 4.644, 1617,
          4.644, 1618, 4.644, 1619, 4.644, 1620, 4.644, 1621, 4.644, 1622,
          4.046, 1623, 4.644, 1624, 4.644, 1625, 4.644, 1626, 4.644, 1627,
          4.644, 1628, 4.644, 1629, 4.046,
        ],
      ],
      ['title/modules.html', [302, 2.356]],
      [
        'body/modules.html',
        [
          15, 0.011, 258, 0.011, 259, 0.011, 301, 4.192, 302, 2.48, 312, 3.899,
          313, 3.654, 314, 3.899, 315, 3.899, 316, 3.654, 317, 3.899, 318,
          3.654, 319, 3.899, 320, 3.899, 321, 3.654, 494, 3.099, 1578, 7.233,
          1591, 5.052, 1630, 8.303, 1631, 8.303, 1632, 8.339,
        ],
      ],
      ['title/overview.html', [1633, 4.798]],
      [
        'body/overview.html',
        [
          2, 0.795, 15, 0.014, 34, 3.522, 67, 4.259, 258, 0.009, 259, 0.009,
          262, 1.294, 284, 4.059, 286, 3.855, 300, 1.249, 301, 6.037, 302,
          1.809, 303, 1.885, 304, 2.057, 305, 2.057, 306, 1.885, 307, 2.057,
          308, 2.057, 309, 3.685, 310, 3.685, 311, 3.685, 312, 4.33, 313, 4.771,
          314, 4.836, 315, 5.09, 316, 4.669, 317, 4.981, 318, 5.08, 319, 4.981,
          320, 4.836, 321, 4.915, 322, 2.77, 323, 2.057, 324, 1.968, 364, 1.968,
          393, 3.326, 398, 4.259, 465, 3.685, 466, 3.685, 467, 3.685, 468,
          4.046, 528, 4.059, 542, 3.685, 543, 3.685, 602, 4.059, 627, 3.685,
          629, 3.685, 652, 3.826, 678, 3.685, 679, 3.685, 754, 3.685, 755,
          3.685, 756, 3.685, 926, 3.442, 1113, 2.844, 1239, 3.685, 1240, 3.685,
          1241, 3.685, 1304, 3.685, 1305, 3.685, 1306, 3.685, 1363, 4.059, 1384,
          3.685, 1385, 3.685, 1451, 3.685, 1453, 3.685, 1454, 3.685, 1633,
          3.685, 1634, 5.697, 1635, 4.23, 1636, 4.23,
        ],
      ],
      ['title/properties.html', [395, 0.879, 770, 2.637]],
      [
        'body/properties.html',
        [
          15, 0.013, 258, 0.012, 259, 0.012, 395, 1.166, 440, 3.818, 1622,
          5.599, 1629, 5.599, 1637, 6.428, 1638, 6.428, 1639, 6.428,
        ],
      ],
      ['title/miscellaneous/typealiases.html', [1529, 2.113, 1640, 4.845]],
      [
        'body/miscellaneous/typealiases.html',
        [
          10, 3.683, 11, 0.495, 15, 0.011, 32, 3.798, 35, 2.674, 36, 2.674, 50,
          1.298, 135, 0.618, 258, 0.011, 259, 0.011, 441, 3.374, 847, 4.033,
          866, 4.778, 872, 4.778, 877, 4.778, 878, 3.206, 879, 4.778, 916,
          4.479, 928, 4.479, 939, 3.78, 1202, 5.226, 1482, 4.717, 1529, 3.78,
          1531, 5.226, 1534, 5.226, 1641, 5.999, 1642, 7.832, 1643, 5.999,
        ],
      ],
      ['title/miscellaneous/variables.html', [1156, 3.257, 1529, 2.113]],
      [
        'body/miscellaneous/variables.html',
        [
          5, 0.149, 11, 0.373, 15, 0.014, 66, 0.606, 70, 1.1, 75, 1.062, 78,
          1.629, 86, 1.613, 88, 2.54, 94, 1.265, 109, 2.54, 135, 0.371, 140,
          1.83, 142, 3.511, 185, 2.395, 194, 4.273, 258, 0.008, 259, 0.008, 260,
          1.733, 270, 0.925, 272, 1.613, 276, 1.141, 300, 1.062, 371, 1.921,
          401, 2.827, 412, 1.538, 442, 2.864, 481, 2.874, 552, 2.136, 569,
          2.475, 575, 2.827, 785, 1.921, 800, 3.68, 815, 3.68, 856, 2.599, 863,
          4.737, 876, 2.599, 929, 3.819, 967, 2.417, 983, 4.322, 1020, 2.265,
          1024, 2.265, 1029, 2.417, 1062, 3.208, 1073, 3.423, 1110, 2.417, 1156,
          2.417, 1471, 4.435, 1472, 4.435, 1487, 3.132, 1488, 3.132, 1525,
          3.132, 1529, 2.265, 1543, 3.132, 1546, 3.132, 1555, 3.132, 1593,
          3.132, 1599, 3.132, 1644, 3.595, 1645, 3.595, 1646, 3.595, 1647,
          3.595, 1648, 3.595, 1649, 5.912, 1650, 3.595, 1651, 3.595, 1652,
          3.595, 1653, 3.595, 1654, 5.092, 1655, 3.595, 1656, 5.092, 1657,
          6.786, 1658, 5.092, 1659, 3.595, 1660, 3.595, 1661, 3.595, 1662,
          5.912, 1663, 3.595, 1664, 3.595, 1665, 3.595, 1666, 3.595, 1667,
          3.595, 1668, 3.595, 1669, 6.786, 1670, 3.595, 1671, 3.595, 1672,
          5.092, 1673, 5.092, 1674, 5.092, 1675, 3.595, 1676, 3.595, 1677,
          3.595, 1678, 3.595, 1679, 7.633, 1680, 5.092, 1681, 7.245, 1682,
          3.595, 1683, 5.912, 1684, 3.595, 1685, 3.595, 1686, 5.092, 1687,
          5.092, 1688, 3.595, 1689, 3.595, 1690, 5.092, 1691, 3.595, 1692,
          5.092, 1693, 3.595, 1694, 3.595, 1695, 3.595, 1696, 3.595, 1697,
          3.595, 1698, 3.595, 1699, 3.595, 1700, 3.595, 1701, 5.912, 1702,
          3.595, 1703, 3.595, 1704, 3.595, 1705, 3.595, 1706, 3.595, 1707,
          3.595, 1708, 5.092, 1709, 3.595, 1710, 3.595, 1711, 3.595, 1712,
          3.595, 1713, 3.595, 1714, 3.595, 1715, 3.595, 1716, 3.595, 1717,
          3.595, 1718, 5.912, 1719, 3.595, 1720, 3.595, 1721, 3.595, 1722,
          5.092, 1723, 5.092, 1724, 5.092, 1725, 3.595, 1726, 3.595, 1727,
          3.595, 1728, 3.595, 1729, 3.595, 1730, 3.595, 1731, 3.595, 1732,
          3.595, 1733, 3.595, 1734, 3.595,
        ],
      ],
    ],
    invertedIndex: [
      [
        '',
        {
          _index: 15,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        '0',
        {
          _index: 164,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['0.0.1', { _index: 1638, title: {}, body: { 'properties.html': {} } }],
      ['0.2.0', { _index: 1523, title: {}, body: { 'dependencies.html': {} } }],
      ['0.4.0', { _index: 1519, title: {}, body: { 'dependencies.html': {} } }],
      ['0.7.0', { _index: 1501, title: {}, body: { 'dependencies.html': {} } }],
      [
        '0.7.13',
        { _index: 1498, title: {}, body: { 'dependencies.html': {} } },
      ],
      ['0/1', { _index: 1473, title: {}, body: { 'coverage.html': {} } }],
      ['0/10', { _index: 1486, title: {}, body: { 'coverage.html': {} } }],
      ['0/2', { _index: 1475, title: {}, body: { 'coverage.html': {} } }],
      ['0/3', { _index: 1476, title: {}, body: { 'coverage.html': {} } }],
      ['0/4', { _index: 1474, title: {}, body: { 'coverage.html': {} } }],
      ['0/5', { _index: 1477, title: {}, body: { 'coverage.html': {} } }],
      ['0/6', { _index: 1480, title: {}, body: { 'coverage.html': {} } }],
      ['0/7', { _index: 1484, title: {}, body: { 'coverage.html': {} } }],
      ['0/8', { _index: 1485, title: {}, body: { 'coverage.html': {} } }],
      ['0/9', { _index: 1491, title: {}, body: { 'coverage.html': {} } }],
      [
        '02t09:45:16.933z',
        { _index: 460, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      ['04', { _index: 459, title: {}, body: { 'guards/AuthGuard.html': {} } }],
      [
        '05:30',
        {
          _index: 150,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        '1',
        {
          _index: 159,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        '1.11.13',
        { _index: 1516, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        '1.12.2',
        { _index: 1496, title: {}, body: { 'dependencies.html': {} } },
      ],
      ['1.2.1', { _index: 1518, title: {}, body: { 'dependencies.html': {} } }],
      ['1/1', { _index: 1483, title: {}, body: { 'coverage.html': {} } }],
      ['1/3', { _index: 1479, title: {}, body: { 'coverage.html': {} } }],
      ['1/7', { _index: 1493, title: {}, body: { 'coverage.html': {} } }],
      [
        '10',
        {
          _index: 160,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        '10.0.0',
        { _index: 1505, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        '10.4.5',
        { _index: 1507, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        '100',
        {
          _index: 1225,
          title: {},
          body: {
            'controllers/OpenSearchController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        '1000',
        {
          _index: 236,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        '1000000000',
        {
          _index: 1170,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      ['11', { _index: 1634, title: {}, body: { 'overview.html': {} } }],
      ['14', { _index: 1492, title: {}, body: { 'coverage.html': {} } }],
      [
        '155.248.243.157:50052',
        { _index: 778, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        '15t11:36:02.965z',
        { _index: 462, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        '1d',
        {
          _index: 166,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        '2',
        {
          _index: 1113,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        '2.12.0',
        { _index: 1512, title: {}, body: { 'dependencies.html': {} } },
      ],
      ['2.2.2', { _index: 1504, title: {}, body: { 'dependencies.html': {} } }],
      [
        '200',
        {
          _index: 1024,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        '201',
        {
          _index: 1709,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        '2024.07.01',
        {
          _index: 1058,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        '2024.11.05',
        {
          _index: 1050,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        '2025',
        { _index: 458, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        '25',
        {
          _index: 1167,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        '3.13.0',
        { _index: 1499, title: {}, body: { 'dependencies.html': {} } },
      ],
      ['3.2.3', { _index: 1506, title: {}, body: { 'dependencies.html': {} } }],
      ['33', { _index: 1478, title: {}, body: { 'coverage.html': {} } }],
      [
        '353c',
        {
          _index: 826,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      ['36', { _index: 1636, title: {}, body: { 'overview.html': {} } }],
      [
        '362206ac00a4',
        {
          _index: 829,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      ['4.0.0', { _index: 1513, title: {}, body: { 'dependencies.html': {} } }],
      [
        '4.x',
        {
          _index: 1049,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['4/16', { _index: 1490, title: {}, body: { 'coverage.html': {} } }],
      [
        '46ef',
        {
          _index: 827,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        '5',
        {
          _index: 229,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['5.0.1', { _index: 1527, title: {}, body: { 'dependencies.html': {} } }],
      ['5.1.4', { _index: 1515, title: {}, body: { 'dependencies.html': {} } }],
      ['5.7.6', { _index: 1514, title: {}, body: { 'dependencies.html': {} } }],
      [
        '500',
        {
          _index: 974,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        '50a42b6f',
        {
          _index: 825,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        '6.10.0',
        { _index: 1528, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        '67ed072c6eb8ca8d73680464',
        { _index: 438, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      ['7.8.1', { _index: 1524, title: {}, body: { 'dependencies.html': {} } }],
      [
        '8',
        {
          _index: 1165,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      ['8.0.7', { _index: 1511, title: {}, body: { 'dependencies.html': {} } }],
      ['8.1.4', { _index: 1521, title: {}, body: { 'dependencies.html': {} } }],
      [
        '86400000',
        { _index: 362, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      ['9', { _index: 1635, title: {}, body: { 'overview.html': {} } }],
      [
        '_count',
        {
          _index: 161,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        '_index',
        {
          _index: 204,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        '_key',
        {
          _index: 162,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'acc',
        {
          _index: 170,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'acc[filter.label',
        {
          _index: 172,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'acc[item.id',
        {
          _index: 187,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'access',
        {
          _index: 946,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'access_token',
        {
          _index: 840,
          title: {},
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'accessor',
        {
          _index: 1647,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'add',
        {
          _index: 670,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'added',
        {
          _index: 821,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'addmetrics(aggs',
        {
          _index: 208,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'addmetrics(aggs[key].aggs',
        {
          _index: 206,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'addsearchdata(@typedbody',
        {
          _index: 295,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'addtofavourite',
        {
          _index: 636,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'addtofavourite(inputs',
        {
          _index: 639,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'agentguid',
        {
          _index: 1087,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'agg',
        {
          _index: 186,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'agg.aggs',
        {
          _index: 188,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'agg[key].aggs',
        {
          _index: 255,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'agg[key].date_histogram',
        {
          _index: 251,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'agg[key].date_histogram.extended_bounds.max',
        {
          _index: 253,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'agg[key].date_histogram.extended_bounds.min',
        {
          _index: 252,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'agg[key].date_histogram.time_zone',
        {
          _index: 254,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'aggregate',
        {
          _index: 1035,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'aggregate(query',
        {
          _index: 116,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'aggregatequery',
        {
          _index: 1034,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'aggregatequery(input',
        {
          _index: 1032,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'aggregation',
        {
          _index: 1,
          title: { 'interfaces/Aggregation.html': {} },
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'aggregations',
        {
          _index: 127,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'aggregations).map((aggregation',
        {
          _index: 133,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'aggs',
        {
          _index: 64,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'aggs[key].aggs',
        {
          _index: 235,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'aggs[key].aggs[metric.id',
        {
          _index: 202,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'alert.view',
        { _index: 448, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'alerts',
        {
          _index: 1043,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'alerts(query',
        {
          _index: 1198,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      ['alias', { _index: 1481, title: {}, body: { 'coverage.html': {} } }],
      [
        'aliases',
        {
          _index: 1641,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'allow',
        {
          _index: 1717,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'allowed',
        { _index: 1339, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'already',
        {
          _index: 671,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      ['amazing', { _index: 1616, title: {}, body: { 'index.html': {} } }],
      [
        'analyze_wildcard',
        {
          _index: 175,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'app',
        {
          _index: 1662,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'app.controller',
        { _index: 335, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'app.enableversioning',
        {
          _index: 1667,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'app.service',
        {
          _index: 285,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
          },
        },
      ],
      [
        'app.setglobalprefix("api',
        {
          _index: 1666,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'app_id',
        {
          _index: 796,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'appcontroller',
        {
          _index: 261,
          title: { 'controllers/AppController.html': {} },
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['application', { _index: 1590, title: {}, body: { 'index.html': {} } }],
      ['applications', { _index: 1548, title: {}, body: { 'index.html': {} } }],
      [
        'apply',
        {
          _index: 233,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'appmodule',
        {
          _index: 301,
          title: { 'modules/AppModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'appservice',
        {
          _index: 284,
          title: { 'injectables/AppService.html': {} },
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'archives',
        {
          _index: 138,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'args',
        {
          _index: 1537,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'array',
        {
          _index: 661,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'asc',
        {
          _index: 145,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'asia/calcutta").format(\'z',
        {
          _index: 122,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'asia/calcutta").todate()).gettime',
        {
          _index: 1215,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'asia/calcutta").toisostring',
        {
          _index: 243,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'async',
        {
          _index: 75,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'modules/AppModule.html': {},
            'controllers/AuthController.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'asynchronous',
        {
          _index: 1653,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'auth',
        {
          _index: 372,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'auth.controller',
        { _index: 464, title: {}, body: { 'modules/AuthModule.html': {} } },
      ],
      [
        'auth/auth.module',
        { _index: 336, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'auth_key',
        {
          _index: 816,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'authcontroller',
        {
          _index: 369,
          title: { 'controllers/AuthController.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'authenticated',
        {
          _index: 432,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'authguard',
        {
          _index: 382,
          title: { 'guards/AuthGuard.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'authmodule',
        {
          _index: 312,
          title: { 'modules/AuthModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'author',
        {
          _index: 1622,
          title: {},
          body: { 'index.html': {}, 'properties.html': {} },
        },
      ],
      [
        'available',
        {
          _index: 494,
          title: {},
          body: {
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/UserVariableController.html': {},
            'modules.html': {},
          },
        },
      ],
      [
        'avg',
        {
          _index: 213,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'avoid',
        {
          _index: 990,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'await',
        {
          _index: 86,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'modules/AppModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'b191',
        {
          _index: 828,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'back',
        {
          _index: 1154,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'backend',
        {
          _index: 1721,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['backers', { _index: 1617, title: {}, body: { 'index.html': {} } }],
      [
        'backward',
        {
          _index: 1247,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'basecachekey',
        {
          _index: 1042,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'based',
        {
          _index: 975,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['basic', { _index: 1517, title: {}, body: { 'dependencies.html': {} } }],
      [
        'before',
        {
          _index: 988,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'being',
        {
          _index: 1702,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'bencode',
        {
          _index: 485,
          title: {},
          body: {
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'bencode.encode(query).tostring().replace',
        {
          _index: 489,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      ['board', { _index: 1610, title: {}, body: { 'index.html': {} } }],
      [
        'body',
        {
          _index: 967,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'bool',
        {
          _index: 237,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'boolean',
        {
          _index: 147,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'guards/AuthGuard.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'guards/RolesGuard.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'boolean(config.rejectunauthorized',
        {
          _index: 1174,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'bootstrap',
        {
          _index: 306,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'coverage.html': {},
            'miscellaneous/functions.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'both',
        {
          _index: 985,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'bounds',
        {
          _index: 1231,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'break',
        {
          _index: 216,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['browse', { _index: 1632, title: {}, body: { 'modules.html': {} } }],
      ['browser', { _index: 1630, title: {}, body: { 'modules.html': {} } }],
      [
        'buckets_path',
        {
          _index: 223,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'build',
        {
          _index: 1673,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'building',
        {
          _index: 1543,
          title: {},
          body: { 'index.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'ca',
        {
          _index: 1254,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'cache',
        {
          _index: 333,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'cache_manager',
        {
          _index: 483,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'cached',
        {
          _index: 1158,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'cachedata',
        {
          _index: 1016,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'cachedclient',
        {
          _index: 1126,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'cachedprofileid',
        {
          _index: 1127,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'cachekey',
        {
          _index: 1013,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'cachemanager',
        {
          _index: 476,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'cachemodule',
        { _index: 328, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'cachemodule.registerasync',
        { _index: 352, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'caching.service',
        { _index: 470, title: {}, body: { 'modules/CachingModule.html': {} } },
      ],
      [
        'caching/caching.module',
        { _index: 337, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'cachingmodule',
        {
          _index: 313,
          title: { 'modules/CachingModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'cachingservice',
        {
          _index: 468,
          title: { 'injectables/CachingService.html': {} },
          body: {
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'called',
        {
          _index: 945,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        "can't",
        {
          _index: 1672,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'canactivate',
        {
          _index: 396,
          title: {},
          body: { 'guards/AuthGuard.html': {}, 'guards/RolesGuard.html': {} },
        },
      ],
      [
        'canactivate(context',
        {
          _index: 400,
          title: {},
          body: { 'guards/AuthGuard.html': {}, 'guards/RolesGuard.html': {} },
        },
      ],
      [
        'cardinality',
        {
          _index: 221,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'case',
        {
          _index: 184,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'catch',
        {
          _index: 969,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'categories',
        {
          _index: 560,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'category',
        {
          _index: 505,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
          },
        },
      ],
      [
        'category.controller',
        {
          _index: 545,
          title: {},
          body: { 'modules/DashboardCategoryModule.html': {} },
        },
      ],
      [
        'category.controller.ts',
        {
          _index: 504,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'category.controller.ts:27',
        {
          _index: 509,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        'category.controller.ts:37',
        {
          _index: 517,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        'category.controller.ts:50',
        {
          _index: 513,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        'category.create',
        { _index: 453, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'category.dto',
        {
          _index: 531,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        'category.dto.ts',
        {
          _index: 886,
          title: {},
          body: {
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'category.modify',
        { _index: 452, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'category.module',
        { _index: 340, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'category.module.ts',
        {
          _index: 544,
          title: {},
          body: { 'modules/DashboardCategoryModule.html': {} },
        },
      ],
      [
        'category.service',
        {
          _index: 529,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
          },
        },
      ],
      [
        'category.service.ts',
        {
          _index: 546,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'category.service.ts:10',
        {
          _index: 551,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'category.service.ts:21',
        {
          _index: 555,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'category.service.ts:60',
        {
          _index: 553,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'category.service.ts:7',
        {
          _index: 549,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'category.view',
        { _index: 444, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'category/dashboard',
        {
          _index: 339,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'category/dto/dashboard',
        {
          _index: 885,
          title: {},
          body: {
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'cert',
        {
          _index: 1265,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'certificate',
        {
          _index: 1257,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'certificates',
        {
          _index: 1262,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'change',
        {
          _index: 1661,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'changes',
        {
          _index: 952,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['channel', { _index: 1581, title: {}, body: { 'index.html': {} } }],
      ['check', { _index: 1569, title: {}, body: { 'index.html': {} } }],
      [
        'checking',
        {
          _index: 989,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'child',
        {
          _index: 1111,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'children',
        {
          _index: 740,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'class',
        {
          _index: 66,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'classes',
        {
          _index: 1648,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'client',
        {
          _index: 785,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'client(clientoptions',
        {
          _index: 1192,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'client.indices.getmapping',
        {
          _index: 1046,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'client.msearch',
        {
          _index: 1021,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'client.provider',
        {
          _index: 927,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'client.provider.ts',
        {
          _index: 1125,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'client.provider.ts:10',
        {
          _index: 1136,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'client.provider.ts:11',
        {
          _index: 1130,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'client.provider.ts:27',
        {
          _index: 1134,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'client.provider.ts:51',
        {
          _index: 1132,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'client.provider.ts:9',
        {
          _index: 1138,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'clientgrpc',
        {
          _index: 783,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'clientname',
        {
          _index: 1250,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'clientoptions',
        {
          _index: 1189,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'clientsmodule',
        { _index: 759, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'clientsmodule.register',
        { _index: 777, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'clientsmodule.registerasync',
        { _index: 764, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'clone',
        {
          _index: 575,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        "clone')@permissions(['dashboard.create",
        {
          _index: 581,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'clone(inputs',
        {
          _index: 579,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
          },
        },
      ],
      [
        'cloned',
        {
          _index: 731,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'cloneddashboard',
        {
          _index: 728,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'cluster',
        {
          _index: 977,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'cluster_appmodule',
        {
          _index: 309,
          title: {},
          body: { 'modules/AppModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_appmodule_imports',
        {
          _index: 310,
          title: {},
          body: { 'modules/AppModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_appmodule_providers',
        {
          _index: 311,
          title: {},
          body: { 'modules/AppModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_cachingmodule',
        {
          _index: 465,
          title: {},
          body: { 'modules/CachingModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_cachingmodule_exports',
        {
          _index: 466,
          title: {},
          body: { 'modules/CachingModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_cachingmodule_providers',
        {
          _index: 467,
          title: {},
          body: { 'modules/CachingModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_dashboardcategorymodule',
        {
          _index: 542,
          title: {},
          body: {
            'modules/DashboardCategoryModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'cluster_dashboardcategorymodule_providers',
        {
          _index: 543,
          title: {},
          body: {
            'modules/DashboardCategoryModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'cluster_dashboardmodule',
        {
          _index: 627,
          title: {},
          body: { 'modules/DashboardModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_dashboardmodule_imports',
        {
          _index: 628,
          title: {},
          body: { 'modules/DashboardModule.html': {} },
        },
      ],
      [
        'cluster_dashboardmodule_providers',
        {
          _index: 629,
          title: {},
          body: { 'modules/DashboardModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_dashboardprofilemodule',
        {
          _index: 678,
          title: {},
          body: {
            'modules/DashboardProfileModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'cluster_dashboardprofilemodule_providers',
        {
          _index: 679,
          title: {},
          body: {
            'modules/DashboardProfileModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'cluster_grpcmodule',
        {
          _index: 754,
          title: {},
          body: { 'modules/GrpcModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_grpcmodule_exports',
        {
          _index: 755,
          title: {},
          body: { 'modules/GrpcModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_grpcmodule_providers',
        {
          _index: 756,
          title: {},
          body: { 'modules/GrpcModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_opensearchmodule',
        {
          _index: 1239,
          title: {},
          body: { 'modules/OpenSearchModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_opensearchmodule_exports',
        {
          _index: 1241,
          title: {},
          body: { 'modules/OpenSearchModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_opensearchmodule_imports',
        {
          _index: 1242,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'cluster_opensearchmodule_providers',
        {
          _index: 1240,
          title: {},
          body: { 'modules/OpenSearchModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_rolemodule',
        {
          _index: 1304,
          title: {},
          body: { 'modules/RoleModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_rolemodule_exports',
        {
          _index: 1306,
          title: {},
          body: { 'modules/RoleModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_rolemodule_providers',
        {
          _index: 1305,
          title: {},
          body: { 'modules/RoleModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_uservariablemodule',
        {
          _index: 1384,
          title: {},
          body: { 'modules/UserVariableModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_uservariablemodule_providers',
        {
          _index: 1385,
          title: {},
          body: { 'modules/UserVariableModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_widgetmodule',
        {
          _index: 1451,
          title: {},
          body: { 'modules/WidgetModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_widgetmodule_exports',
        {
          _index: 1454,
          title: {},
          body: { 'modules/WidgetModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_widgetmodule_imports',
        { _index: 1452, title: {}, body: { 'modules/WidgetModule.html': {} } },
      ],
      [
        'cluster_widgetmodule_providers',
        {
          _index: 1453,
          title: {},
          body: { 'modules/WidgetModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'clusterurl',
        {
          _index: 1014,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'cmd',
        {
          _index: 933,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'code',
        {
          _index: 1708,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['come', { _index: 1572, title: {}, body: { 'index.html': {} } }],
      [
        'command',
        {
          _index: 1690,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'comment',
        {
          _index: 1432,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'communicate',
        {
          _index: 1720,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'comparableattributes',
        {
          _index: 872,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'compatibility',
        {
          _index: 1248,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'completed',
        {
          _index: 701,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'config',
        {
          _index: 844,
          title: {},
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/OpenSearchClientProvider.html': {},
          },
        },
      ],
      [
        'config.node_url',
        {
          _index: 1149,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'config.password',
        {
          _index: 1172,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'config.rejectunauthorized',
        {
          _index: 1173,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'config.username',
        {
          _index: 1171,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'configmodule',
        {
          _index: 331,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'configmodule.forroot',
        { _index: 350, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'configservice',
        {
          _index: 25,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'modules/AppModule.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'configservice.get',
        {
          _index: 1268,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        "configservice.get('grpc_url",
        { _index: 769, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        "configservice.get('opensearch_node",
        {
          _index: 1251,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        "configservice.get('opensearch_password",
        {
          _index: 1253,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        "configservice.get('opensearch_pool_max",
        {
          _index: 1271,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        "configservice.get('opensearch_pool_max_retries",
        {
          _index: 1272,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        "configservice.get('opensearch_pool_min",
        {
          _index: 1270,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        "configservice.get('opensearch_username",
        {
          _index: 1252,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        "configservice.get('redis_host",
        { _index: 358, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        "configservice.get('redis_port",
        { _index: 360, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'configuration',
        {
          _index: 1143,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'configure',
        {
          _index: 815,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'configured',
        {
          _index: 983,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'conflicts',
        {
          _index: 1012,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'connect',
        {
          _index: 91,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'console.log("timezone',
        {
          _index: 123,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        "console.log('data",
        {
          _index: 1047,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        "console.log('time",
        {
          _index: 1230,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'console.log(access_token',
        {
          _index: 1447,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'console.log(data',
        {
          _index: 1238,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'console.log(json.stringify(input',
        {
          _index: 1033,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'console.log(json.stringify(params',
        {
          _index: 1226,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'console.log(query',
        {
          _index: 117,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'console.log(responsedata?.user_data?.roles',
        { _index: 434, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'console.log(user',
        {
          _index: 1443,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'const',
        {
          _index: 78,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'constructor',
        {
          _index: 72,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        "constructor(@inject('iam",
        {
          _index: 812,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'constructor(@inject(cache_manager',
        {
          _index: 484,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'constructor(cachemanager',
        {
          _index: 474,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'constructor(client',
        {
          _index: 782,
          title: {},
          body: { 'injectables/GrpcService.html': {} },
        },
      ],
      [
        'constructor(configservice',
        {
          _index: 1129,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'constructor(grpcservice',
        { _index: 397, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'constructor(opensearchclientprovider',
        {
          _index: 1277,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'constructor(prismaservice',
        {
          _index: 548,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'constructor(private',
        {
          _index: 386,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardProfileService.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'constructor(roleservice',
        { _index: 1329, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'contain',
        {
          _index: 1719,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'contains',
        {
          _index: 868,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'context',
        {
          _index: 403,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'guards/RolesGuard.html': {},
          },
        },
      ],
      [
        'context.gethandler',
        { _index: 1338, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'context.switchtohttp().getrequest',
        {
          _index: 413,
          title: {},
          body: { 'guards/AuthGuard.html': {}, 'guards/RolesGuard.html': {} },
        },
      ],
      [
        'controller',
        {
          _index: 260,
          title: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        "controller('auth",
        {
          _index: 384,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "controller('dashboard",
        {
          _index: 532,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
          },
        },
      ],
      [
        "controller('open",
        {
          _index: 1210,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        "controller('role",
        {
          _index: 1299,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        "controller('user",
        {
          _index: 1365,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "controller('widget",
        {
          _index: 1431,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'controllers',
        {
          _index: 262,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'conversion',
        {
          _index: 1059,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'convert',
        {
          _index: 1534,
          title: {},
          body: {
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'convertmappingstooutput',
        {
          _index: 1274,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'convertmappingstooutput(input',
        {
          _index: 1060,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'converttonestedaggs',
        {
          _index: 141,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'converttonestedaggs(input',
        {
          _index: 1459,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'count',
        {
          _index: 201,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['courses', { _index: 1588, title: {}, body: { 'index.html': {} } }],
      [
        'coverage',
        {
          _index: 1467,
          title: { 'coverage.html': {} },
          body: { 'coverage.html': {}, 'index.html': {} },
        },
      ],
      [
        'create',
        {
          _index: 506,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        "create')@permissions(['dashboard.create",
        {
          _index: 584,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'create(inputs',
        {
          _index: 76,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'createagg',
        {
          _index: 182,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'created',
        {
          _index: 93,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'createdat',
        {
          _index: 457,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'injectables/DashboardService.html': {},
          },
        },
      ],
      [
        'createdatehistogramagg',
        {
          _index: 165,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'createfiltersagg',
        {
          _index: 168,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'creategeohashgridagg',
        {
          _index: 176,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'createhistogramagg',
        {
          _index: 179,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'createparamdecorator',
        {
          _index: 1731,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'createprocesstree',
        {
          _index: 1275,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'createprocesstree(logs',
        {
          _index: 1080,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'createtermsagg',
        {
          _index: 157,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'creation',
        {
          _index: 84,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'ctx',
        {
          _index: 1732,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'ctx.switchtohttp().getrequest',
        {
          _index: 1733,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'cumulative_sum',
        {
          _index: 232,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'current',
        {
          _index: 942,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'currentagg',
        {
          _index: 192,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'currentagg[currentid',
        {
          _index: 196,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'currentclusterurl',
        {
          _index: 940,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'currentfavorites',
        {
          _index: 668,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'currentfavorites.filter(id',
        {
          _index: 677,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'currentfavorites.includes(inputs.dashboardid',
        {
          _index: 673,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'currentkey',
        {
          _index: 1067,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'currentproperty',
        {
          _index: 1065,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'currentproperty.properties',
        {
          _index: 1069,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'currentproperty.type',
        {
          _index: 1075,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'dashboard',
        {
          _index: 338,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/RoleService.html': {},
          },
        },
      ],
      [
        'dashboard.controller',
        {
          _index: 632,
          title: {},
          body: { 'modules/DashboardModule.html': {} },
        },
      ],
      [
        'dashboard.create',
        { _index: 451, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'dashboard.delete',
        { _index: 450, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'dashboard.modify',
        { _index: 449, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'dashboard.service',
        {
          _index: 603,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
          },
        },
      ],
      [
        'dashboard.view',
        { _index: 443, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'dashboard/dashboard.module',
        { _index: 343, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'dashboard/database',
        {
          _index: 19,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'modules/AppModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'dashboard/shared',
        {
          _index: 21,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'dashboard?.id',
        {
          _index: 726,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'dashboardcategory',
        {
          _index: 558,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
          },
        },
      ],
      [
        'dashboardcategory.map((dashboard',
        {
          _index: 570,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'dashboardcategorycontroller',
        {
          _index: 502,
          title: { 'controllers/DashboardCategoryController.html': {} },
          body: {
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'dashboardcategoryid',
        {
          _index: 722,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
          },
        },
      ],
      [
        'dashboardcategorymodule',
        {
          _index: 314,
          title: { 'modules/DashboardCategoryModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'dashboardcategoryservice',
        {
          _index: 528,
          title: { 'injectables/DashboardCategoryService.html': {} },
          body: {
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'dashboardcontroller',
        {
          _index: 573,
          title: { 'controllers/DashboardController.html': {} },
          body: {
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'dashboarddetails',
        {
          _index: 619,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'dashboardid',
        {
          _index: 727,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      [
        'dashboardmodule',
        {
          _index: 315,
          title: { 'modules/DashboardModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/DashboardModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'dashboardprofile',
        {
          _index: 696,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'dashboardprofilecontroller',
        {
          _index: 633,
          title: { 'controllers/DashboardProfileController.html': {} },
          body: {
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'dashboardprofilemodule',
        {
          _index: 316,
          title: { 'modules/DashboardProfileModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'dashboardprofileservice',
        {
          _index: 652,
          title: { 'injectables/DashboardProfileService.html': {} },
          body: {
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'dashboards',
        {
          _index: 563,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
          },
        },
      ],
      [
        'dashboards.map((dashboard',
        {
          _index: 741,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'dashboardservice',
        {
          _index: 602,
          title: { 'injectables/DashboardService.html': {} },
          body: {
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'injectables/DashboardService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'data',
        {
          _index: 88,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'data.id',
        {
          _index: 966,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'data.statuscode',
        {
          _index: 1234,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'data.tenant',
        {
          _index: 1220,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'data?.body?.responses[0]?.aggregations',
        {
          _index: 1233,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'data?.body?.responses[0]?.aggregations?.values?.buckets',
        {
          _index: 1235,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        "data?.body['esdl",
        {
          _index: 1048,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'data?.body[keys[keys.length',
        {
          _index: 1053,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'date',
        {
          _index: 867,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'date().toisostring',
        {
          _index: 730,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'date(dayjs(query.timebounds.max).tz(query.timebounds.timezone',
        {
          _index: 1216,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'date(dayjs(query.timebounds.min).tz(query.timebounds.timezone',
        {
          _index: 1214,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'date(query.filters.timebounds.max).gettime',
        {
          _index: 120,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'date(query.filters.timebounds.min).gettime',
        {
          _index: 119,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'date_histogram',
        {
          _index: 57,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'dayjs',
        {
          _index: 27,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'dayjs(query.filters.timebounds.min).tz(query.filters.timebounds.timezone',
        {
          _index: 121,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'dayjs(timebounds.max).tz(timebounds.timezone',
        {
          _index: 244,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'dayjs(timebounds.min).tz(timebounds.timezone',
        {
          _index: 242,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'dayjs.extend(timezone',
        {
          _index: 42,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'dayjs.extend(utc',
        {
          _index: 41,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'dayjs/plugin/timezone',
        {
          _index: 29,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'dayjs/plugin/utc',
        {
          _index: 31,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'declarations',
        {
          _index: 305,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'decorators',
        {
          _index: 268,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'decorators/user.decorator',
        {
          _index: 1429,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      ['deeper', { _index: 1583, title: {}, body: { 'index.html': {} } }],
      [
        'default',
        {
          _index: 185,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'defaultdashboardid',
        {
          _index: 664,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'defined',
        {
          _index: 12,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/InterfaceService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'delete',
        {
          _index: 576,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
          },
        },
      ],
      [
        "delete')@permissions(['dashboard.delete",
        {
          _index: 588,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'delete(@typedquery',
        {
          _index: 625,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'delete(id',
        {
          _index: 710,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'injectables/UserVariableService.html': {},
          },
        },
      ],
      [
        'delete(inputs',
        {
          _index: 1351,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'delete(query',
        {
          _index: 586,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'deleted',
        {
          _index: 745,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'injectables/UserVariableService.html': {},
          },
        },
      ],
      [
        'deletion',
        {
          _index: 743,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'injectables/UserVariableService.html': {},
          },
        },
      ],
      [
        'dependencies',
        {
          _index: 303,
          title: { 'dependencies.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'dependencies.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'derivative',
        {
          _index: 231,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'desc',
        {
          _index: 882,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'description',
        {
          _index: 440,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'interfaces/IAuthHeaders.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'properties.html': {},
          },
        },
      ],
      [
        'details',
        {
          _index: 273,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'determined',
        {
          _index: 1715,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'developers',
        {
          _index: 1698,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['development', { _index: 1558, title: {}, body: { 'index.html': {} } }],
      ['devtools', { _index: 1595, title: {}, body: { 'index.html': {} } }],
      [
        'direction',
        {
          _index: 881,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'directory',
        {
          _index: 1657,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'disable',
        {
          _index: 44,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['discord', { _index: 1580, title: {}, body: { 'index.html': {} } }],
      [
        'discriminated',
        {
          _index: 1713,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'dist/swagger.json',
        {
          _index: 1678,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'distribute',
        {
          _index: 1683,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'distribution',
        {
          _index: 1686,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['dive', { _index: 1582, title: {}, body: { 'index.html': {} } }],
      [
        'documentation',
        {
          _index: 1468,
          title: {},
          body: { 'coverage.html': {}, 'index.html': {} },
        },
      ],
      [
        'doing',
        {
          _index: 1030,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'dont',
        {
          _index: 1433,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'dto/dashboard',
        {
          _index: 530,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardProfileController.html': {},
          },
        },
      ],
      [
        'dto/dashboard.dto',
        {
          _index: 604,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'dto/open',
        {
          _index: 924,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'dto/role.dto',
        {
          _index: 1297,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        'dto/user',
        {
          _index: 1361,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'dto/widget.dto',
        {
          _index: 40,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'dynamic',
        {
          _index: 1142,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'e',
        {
          _index: 880,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'e.g',
        {
          _index: 809,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      ['e2e', { _index: 1566, title: {}, body: { 'index.html': {} } }],
      ['efficient', { _index: 1544, title: {}, body: { 'index.html': {} } }],
      [
        'el',
        {
          _index: 750,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'el.widgetid',
        {
          _index: 753,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'elements',
        {
          _index: 717,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'elements.length',
        {
          _index: 746,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'elements.map((el',
        {
          _index: 749,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'empty',
        {
          _index: 49,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/DashboardProfileController.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'encodedkey',
        {
          _index: 488,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'endpoint',
        {
          _index: 1117,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'endswith',
        {
          _index: 870,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'ensure',
        {
          _index: 1006,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'ensureclientandclusterurl',
        {
          _index: 992,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'ensures',
        {
          _index: 984,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['enterprise', { _index: 1600, title: {}, body: { 'index.html': {} } }],
      [
        'entityfiltercommon',
        {
          _index: 854,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'entityfilterinput',
        {
          _index: 877,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'entityfilternumeric',
        {
          _index: 858,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'entityfilterrecord',
        {
          _index: 866,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'entityfilterstring',
        {
          _index: 865,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'entityfilterwithmode',
        {
          _index: 861,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'entitysortinput',
        {
          _index: 879,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'environment',
        {
          _index: 1155,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'environments',
        {
          _index: 1691,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'epoch_millis',
        {
          _index: 167,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'equals',
        {
          _index: 855,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'err',
        {
          _index: 970,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'error',
        {
          _index: 810,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        "error('opensearch",
        {
          _index: 1188,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'error(json.stringify(data',
        {
          _index: 1236,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'error.message',
        {
          _index: 1152,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'errormessage',
        {
          _index: 1176,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'esdl',
        {
          _index: 137,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'eslint',
        {
          _index: 43,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'eslint/no',
        {
          _index: 48,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'even',
        {
          _index: 1707,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'eventus',
        {
          _index: 18,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'modules/AppModule.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'modules/OpenSearchModule.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      ['example', { _index: 1554, title: {}, body: { 'index.html': {} } }],
      [
        'exception',
        {
          _index: 1029,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'executioncontext',
        {
          _index: 401,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'guards/RolesGuard.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'exists',
        {
          _index: 667,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      ['experience', { _index: 1585, title: {}, body: { 'index.html': {} } }],
      [
        'expired',
        { _index: 423, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'export',
        {
          _index: 65,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'exports',
        {
          _index: 308,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'express',
        { _index: 1509, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'extended_bounds',
        {
          _index: 60,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'extended_stats',
        {
          _index: 217,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'extends',
        {
          _index: 833,
          title: {},
          body: {
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
          },
        },
      ],
      [
        'extension',
        {
          _index: 1676,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'extract',
        {
          _index: 1114,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'failure',
        {
          _index: 804,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'fall',
        {
          _index: 1153,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'false',
        {
          _index: 569,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'fastifyadapter',
        {
          _index: 1665,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'favorites',
        {
          _index: 672,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'favourite/add',
        {
          _index: 641,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'favourite/remove',
        {
          _index: 645,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'favouritedashboardids',
        {
          _index: 659,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'favouritedashboards',
        {
          _index: 702,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'favourites',
        {
          _index: 699,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'fetched',
        {
          _index: 110,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['few', { _index: 1570, title: {}, body: { 'index.html': {} } }],
      [
        'field',
        {
          _index: 52,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'fields',
        {
          _index: 1045,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'file',
        {
          _index: 5,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'fileds',
        {
          _index: 1044,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'filehash',
        {
          _index: 935,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'filepath',
        {
          _index: 934,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'files',
        {
          _index: 1658,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'filter',
        {
          _index: 171,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'filter.query',
        {
          _index: 174,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'filters',
        {
          _index: 155,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'filters!.reduce',
        {
          _index: 169,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'find',
        {
          _index: 1535,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'first',
        {
          _index: 978,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['follow', { _index: 1604, title: {}, body: { 'index.html': {} } }],
      [
        'force',
        {
          _index: 950,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'format',
        {
          _index: 63,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'found',
        {
          _index: 733,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
          },
        },
      ],
      ['framework', { _index: 1542, title: {}, body: { 'index.html': {} } }],
      [
        'from([true',
        { _index: 433, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'from(this.roleservice.getbyname(responsedata?.user_data?.roles?.role_id)).pipe',
        { _index: 435, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'frontend',
        {
          _index: 1697,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'fs.readfilesync(client_cert_path',
        {
          _index: 1266,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'fs.readfilesync(client_key_path',
        {
          _index: 1267,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'full',
        {
          _index: 1599,
          title: {},
          body: { 'index.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'function',
        {
          _index: 1062,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'functions',
        {
          _index: 140,
          title: { 'miscellaneous/functions.html': {} },
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'generated',
        {
          _index: 1692,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'generation',
        {
          _index: 1693,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'geohash_grid',
        {
          _index: 177,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        "get')@permissions(['dashboard.view",
        {
          _index: 591,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'get(@typedquery',
        {
          _index: 615,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      [
        'get(@user',
        {
          _index: 655,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'get(query',
        {
          _index: 590,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'get(user',
        {
          _index: 510,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardProfileController.html': {},
          },
        },
      ],
      [
        'get_user_detail',
        {
          _index: 823,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'getbyid',
        {
          _index: 547,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'getbyid(id',
        {
          _index: 114,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'getbyname',
        {
          _index: 1310,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'getbyname(name',
        {
          _index: 1314,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'getbyuserid',
        {
          _index: 1389,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'getbyuserid(id',
        {
          _index: 1396,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'getbyuseridandquery',
        {
          _index: 1390,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'getbyuseridandquery(id',
        {
          _index: 1398,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'getcachebyquery',
        {
          _index: 472,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'getcachebyquery(query',
        {
          _index: 477,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'getclient',
        {
          _index: 994,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'getclient(userid',
        {
          _index: 1131,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'getcurrentuserid',
        {
          _index: 943,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'getfields',
        {
          _index: 1041,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'getfieldvalues',
        {
          _index: 1196,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'getfieldvalues(query',
        {
          _index: 1201,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'gethello',
        {
          _index: 265,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
          },
        },
      ],
      [
        'getnodeurl',
        {
          _index: 1128,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'getnodeurl(userid',
        {
          _index: 1133,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'getting',
        {
          _index: 1151,
          title: { 'index.html': {} },
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'getuserdetails',
        {
          _index: 266,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'injectables/GrpcService.html': {},
          },
        },
      ],
      [
        'getuserdetails(@typedbody',
        {
          _index: 291,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'getuserdetails(@user',
        {
          _index: 388,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'getuserdetails(data',
        {
          _index: 271,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'getuserdetails(session_id',
        {
          _index: 786,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'getuserdetails(user',
        {
          _index: 374,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'giving',
        {
          _index: 806,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'global',
        {
          _index: 758,
          title: {},
          body: {
            'modules/GrpcModule.html': {},
            'modules/RoleModule.html': {},
          },
        },
      ],
      [
        'graph',
        {
          _index: 1591,
          title: {},
          body: { 'index.html': {}, 'modules.html': {} },
        },
      ],
      ['grow', { _index: 1613, title: {}, body: { 'index.html': {} } }],
      [
        'grpc.service',
        { _index: 763, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'grpc/grpc',
        {
          _index: 793,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'grpc/grpc.module',
        { _index: 344, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'grpc/grpc.service',
        {
          _index: 287,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'grpc/proto',
        { _index: 1497, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'grpcmodule',
        {
          _index: 317,
          title: { 'modules/GrpcModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/GrpcModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'grpcservice',
        {
          _index: 286,
          title: { 'injectables/GrpcService.html': {} },
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'gt',
        {
          _index: 860,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'gte',
        {
          _index: 240,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'guard',
        {
          _index: 392,
          title: { 'guards/AuthGuard.html': {}, 'guards/RolesGuard.html': {} },
          body: {
            'controllers/WidgetController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'guards',
        {
          _index: 393,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'guards/RolesGuard.html': {},
            'overview.html': {},
          },
        },
      ],
      ['hands', { _index: 1584, title: {}, body: { 'index.html': {} } }],
      ['handy', { _index: 1573, title: {}, body: { 'index.html': {} } }],
      [
        'headers',
        {
          _index: 848,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'hello',
        { _index: 367, title: {}, body: { 'injectables/AppService.html': {} } },
      ],
      ['help', { _index: 1597, title: {}, body: { 'index.html': {} } }],
      ['here', { _index: 1620, title: {}, body: { 'index.html': {} } }],
      [
        'histogram',
        {
          _index: 180,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'host',
        { _index: 357, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'hostname',
        {
          _index: 1263,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'httpcode',
        {
          _index: 973,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'httpexception',
        {
          _index: 918,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        "httpexception('timeout",
        {
          _index: 1039,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'https://nestjs.com',
        { _index: 1626, title: {}, body: { 'index.html': {} } },
      ],
      [
        'httpstatus',
        {
          _index: 919,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'httpstatus.gateway_timeout',
        {
          _index: 1040,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'httpstatus.internal_server_error',
        {
          _index: 1038,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'iaddtofavouriterequest',
        {
          _index: 640,
          title: { 'interfaces/IAddToFavouriteRequest.html': {} },
          body: {
            'controllers/DashboardProfileController.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'iaggs',
        {
          _index: 38,
          title: { 'interfaces/IAggs.html': {} },
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'iam',
        { _index: 765, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'iam/interface.proto',
        { _index: 774, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'iauthheaders',
        {
          _index: 846,
          title: { 'interfaces/IAuthHeaders.html': {} },
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'icreatedashboardcategoryrequest',
        {
          _index: 507,
          title: { 'interfaces/ICreateDashboardCategoryRequest.html': {} },
          body: {
            'controllers/DashboardCategoryController.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'icreatedashboardrequest',
        {
          _index: 583,
          title: { 'interfaces/ICreateDashboardRequest.html': {} },
          body: {
            'controllers/DashboardController.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'icreaterolerequest',
        {
          _index: 891,
          title: { 'interfaces/ICreateRoleRequest.html': {} },
          body: {
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'controllers/RoleController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'icreateuservariablerequest',
        {
          _index: 897,
          title: { 'interfaces/ICreateUserVariableRequest.html': {} },
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'controllers/UserVariableController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'icreatewidgetrequest',
        {
          _index: 838,
          title: { 'interfaces/ICreateWidgetRequest.html': {} },
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'id',
        {
          _index: 92,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'guards/AuthGuard.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'id.split',
        {
          _index: 191,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'idashboard',
        {
          _index: 601,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
          },
        },
      ],
      [
        'idashboardcategory',
        {
          _index: 520,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
          },
        },
      ],
      [
        'idashboardelement',
        {
          _index: 715,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'idashboardprofile',
        {
          _index: 651,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
          },
        },
      ],
      [
        'identifier',
        { _index: 1469, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'idp_data',
        { _index: 429, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'ids',
        {
          _index: 190,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'ids.foreach((currentid',
        {
          _index: 195,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'igetdashboard',
        {
          _index: 890,
          title: { 'interfaces/IGetDashboard.html': {} },
          body: {
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetdashboardcategory',
        {
          _index: 887,
          title: { 'interfaces/IGetDashboardCategory.html': {} },
          body: {
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetdashboardcategoryrequest',
        {
          _index: 511,
          title: { 'interfaces/IGetDashboardCategoryRequest.html': {} },
          body: {
            'controllers/DashboardCategoryController.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetdashboardprofile',
        {
          _index: 832,
          title: { 'interfaces/IGetDashboardProfile.html': {} },
          body: {
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetdashboardrequest',
        {
          _index: 587,
          title: { 'interfaces/IGetDashboardRequest.html': {} },
          body: {
            'controllers/DashboardController.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetquerydatafilter',
        {
          _index: 843,
          title: { 'interfaces/IGetQueryDataFilter.html': {} },
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetquerydatarequest',
        {
          _index: 39,
          title: { 'interfaces/IGetQueryDataRequest.html': {} },
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetrole',
        {
          _index: 894,
          title: { 'interfaces/IGetRole.html': {} },
          body: {
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetrolerequest',
        {
          _index: 896,
          title: { 'interfaces/IGetRoleRequest.html': {} },
          body: {
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetuservariable',
        {
          _index: 906,
          title: { 'interfaces/IGetUserVariable.html': {} },
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetuservariablerequest',
        {
          _index: 908,
          title: { 'interfaces/IGetUserVariableRequest.html': {} },
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'controllers/UserVariableController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetwidget',
        {
          _index: 837,
          title: { 'interfaces/IGetWidget.html': {} },
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'igetwidgetrequest',
        {
          _index: 841,
          title: { 'interfaces/IGetWidgetRequest.html': {} },
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'ilistentitiesrequest',
        {
          _index: 515,
          title: { 'interfaces/IListEntitiesRequest.html': {} },
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'ilistentitiesresponse',
        {
          _index: 522,
          title: { 'interfaces/IListEntitiesResponse.html': {} },
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'implements',
        {
          _index: 410,
          title: {},
          body: { 'guards/AuthGuard.html': {}, 'guards/RolesGuard.html': {} },
        },
      ],
      [
        'import',
        {
          _index: 14,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        "import('bencode",
        {
          _index: 486,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'imports',
        {
          _index: 326,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/WidgetModule.html': {},
          },
        },
      ],
      [
        'include',
        {
          _index: 108,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'includes',
        {
          _index: 1011,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'index',
        {
          _index: 135,
          title: { 'index.html': {} },
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'indexable',
        {
          _index: 7,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
          },
        },
      ],
      [
        'indexes',
        {
          _index: 912,
          title: {},
          body: {
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'indicates',
        {
          _index: 801,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'inestapplication',
        {
          _index: 1655,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'inestiaconfig',
        {
          _index: 1646,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'info',
        {
          _index: 3,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'ingesting',
        {
          _index: 959,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'initialize',
        {
          _index: 660,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'initialized',
        {
          _index: 986,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'inject',
        {
          _index: 353,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'injectables/CachingService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'injectable',
        {
          _index: 22,
          title: {
            'injectables/AppService.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/AppService.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'injectables',
        {
          _index: 364,
          title: {},
          body: {
            'injectables/AppService.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'input',
        {
          _index: 142,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'input.aggregation',
        {
          _index: 148,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'input.aggs',
        {
          _index: 1002,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'input.bucketaggs.foreach((agg',
        {
          _index: 189,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'input.bucketaggs.reduce((acc',
        {
          _index: 151,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'input.data[0',
        {
          _index: 962,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'input.indexes.map((index',
        {
          _index: 1004,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'input.indexname',
        {
          _index: 961,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'input.metrics',
        {
          _index: 209,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'input.options',
        {
          _index: 1001,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'input.query',
        {
          _index: 245,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'input.timefield',
        {
          _index: 239,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'input?.indexes?.join',
        {
          _index: 999,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'inputs',
        {
          _index: 81,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'inputs.dashboardid',
        {
          _index: 665,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      [
        'inputs.ispublic',
        {
          _index: 1416,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'inputs.key',
        {
          _index: 1369,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'inputs.name',
        {
          _index: 729,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'inputs.type',
        {
          _index: 1370,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'insensitive',
        {
          _index: 871,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        "insensitive'|'default",
        {
          _index: 864,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'inside',
        {
          _index: 956,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'installcompile',
        { _index: 1556, title: {}, body: { 'index.html': {} } },
      ],
      [
        'instance',
        {
          _index: 1656,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'instanceof',
        {
          _index: 1177,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'integritylevel',
        {
          _index: 936,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'intel',
        {
          _index: 612,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        "intel')@permissions(['dashboard.view",
        {
          _index: 597,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'intelligence',
        {
          _index: 614,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      ['interact', { _index: 1592, title: {}, body: { 'index.html': {} } }],
      [
        'interaction',
        {
          _index: 1703,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'interface',
        {
          _index: 0,
          title: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
          body: {
            'interfaces/Aggregation.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'interfaceresponse',
        {
          _index: 799,
          title: { 'interfaces/InterfaceResponse.html': {} },
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'interfaces',
        {
          _index: 2,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'interfaceservice',
        {
          _index: 780,
          title: { 'interfaces/InterfaceService.html': {} },
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'interval',
        {
          _index: 59,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'ipropagation',
        {
          _index: 1710,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'irole',
        {
          _index: 893,
          title: {},
          body: {
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'controllers/RoleController.html': {},
          },
        },
      ],
      [
        'isavailable',
        {
          _index: 1367,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'isearchqueryrequestpayload',
        {
          _index: 909,
          title: { 'interfaces/ISearchQueryRequestPayload.html': {} },
          body: {
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'isetdefaultdashbordrequest',
        {
          _index: 648,
          title: { 'interfaces/ISetDefaultDashbordRequest.html': {} },
          body: {
            'controllers/DashboardProfileController.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'isglobal',
        { _index: 351, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'ispublic',
        {
          _index: 566,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
          },
        },
      ],
      [
        'isset',
        {
          _index: 568,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
          },
        },
      ],
      [
        'item',
        {
          _index: 152,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'items',
        {
          _index: 111,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'iupdatedashboardcategoryrequest',
        {
          _index: 888,
          title: { 'interfaces/IUpdateDashboardCategoryRequest.html': {} },
          body: {
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'iupdatedashboardrequest',
        {
          _index: 580,
          title: { 'interfaces/IUpdateDashboardRequest.html': {} },
          body: {
            'controllers/DashboardController.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'iupdaterolerequest',
        {
          _index: 895,
          title: { 'interfaces/IUpdateRoleRequest.html': {} },
          body: {
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'controllers/RoleController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'iupdateuservariablerequest',
        {
          _index: 907,
          title: { 'interfaces/IUpdateUserVariableRequest.html': {} },
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'controllers/UserVariableController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'iupdatewidgetrequest',
        {
          _index: 842,
          title: { 'interfaces/IUpdateWidgetRequest.html': {} },
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'iuservariable',
        {
          _index: 905,
          title: {},
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      [
        'iwidget',
        {
          _index: 836,
          title: {},
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'iwidgetconfig',
        {
          _index: 20,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['job', { _index: 1607, title: {}, body: { 'index.html': {} } }],
      ['jobs', { _index: 1609, title: {}, body: { 'index.html': {} } }],
      [
        'join',
        {
          _index: 762,
          title: {},
          body: { 'modules/GrpcModule.html': {}, 'index.html': {} },
        },
      ],
      [
        'join(__dirname',
        { _index: 772, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'js',
        {
          _index: 794,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'json.parse(res.response_data)?.data',
        { _index: 425, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'json.parse(value',
        {
          _index: 492,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'json.stringify',
        {
          _index: 824,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'json.stringify(clientoptions',
        {
          _index: 1193,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'json.stringify(data',
        {
          _index: 498,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'json.stringify(error?.name',
        {
          _index: 1031,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'json.stringify(permissions',
        { _index: 1345, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'json.stringify(query',
        {
          _index: 1407,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'json.stringify(res',
        { _index: 420, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'k',
        {
          _index: 873,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      ['kamil', { _index: 1623, title: {}, body: { 'index.html': {} } }],
      [
        'keep',
        {
          _index: 736,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'keepcase',
        { _index: 776, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'key',
        {
          _index: 8,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'keyof',
        {
          _index: 874,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'keys',
        {
          _index: 1051,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'label',
        {
          _index: 930,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['learn', { _index: 1576, title: {}, body: { 'index.html': {} } }],
      [
        'legend',
        {
          _index: 304,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'level',
        {
          _index: 193,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'library',
        {
          _index: 1681,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'license',
        {
          _index: 1629,
          title: {},
          body: { 'index.html': {}, 'properties.html': {} },
        },
      ],
      ['licensed', { _index: 1612, title: {}, body: { 'index.html': {} } }],
      [
        'line',
        {
          _index: 46,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'link',
        {
          _index: 1110,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['linkedin', { _index: 1605, title: {}, body: { 'index.html': {} } }],
      [
        'list',
        {
          _index: 101,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        "list')@permissions(['dashboard.view",
        {
          _index: 593,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'list(inputs',
        {
          _index: 514,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'list(query',
        {
          _index: 100,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'list(user',
        {
          _index: 554,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'list/threat',
        {
          _index: 596,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'listrequesttofindmanyargs',
        {
          _index: 524,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'listrequesttofindmanyargs(inputs',
        {
          _index: 539,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      [
        'listrequesttofindmanyargs(request',
        {
          _index: 1532,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'listthreatintel',
        {
          _index: 577,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'listthreatintel(inputs',
        {
          _index: 595,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'literal',
        {
          _index: 10,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'loader',
        {
          _index: 775,
          title: {},
          body: { 'modules/GrpcModule.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'log.data.endpoint_agentguid',
        {
          _index: 1088,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.integritylevel',
        {
          _index: 1109,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.parentcmd',
        {
          _index: 1098,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.parentfilehash',
        {
          _index: 1100,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.parentfilepath',
        {
          _index: 1099,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.parentintegritylevel',
        {
          _index: 1102,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.parentname',
        {
          _index: 1097,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.parentpid',
        {
          _index: 1091,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.parentuser',
        {
          _index: 1101,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.processcmd',
        {
          _index: 1105,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.processfilehash',
        {
          _index: 1107,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.processfilepath',
        {
          _index: 1106,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.processname',
        {
          _index: 1104,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.processpid',
        {
          _index: 1093,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'log.data.processuser',
        {
          _index: 1108,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'logger',
        {
          _index: 23,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'logger(authguard.name',
        { _index: 411, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'logger(cachingservice.name',
        {
          _index: 482,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'logger(dashboardcategoryservice.name',
        {
          _index: 557,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'logger(dashboardprofileservice.name',
        {
          _index: 692,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'logger(dashboardservice.name',
        {
          _index: 719,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'logger(opensearchclientprovider.name',
        {
          _index: 1137,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'logger(opensearchservice.name',
        {
          _index: 937,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'logger(roleservice.name',
        {
          _index: 1319,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'logger(rolesguard.name',
        { _index: 1334, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'logger(uservariableservice.name',
        {
          _index: 1403,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'logger(widgetservice.name',
        {
          _index: 71,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'logout',
        {
          _index: 373,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'logout(@user',
        {
          _index: 390,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'logout(session_id',
        {
          _index: 788,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'logout(user',
        {
          _index: 377,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'logs',
        {
          _index: 1084,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'logs.foreach(log',
        {
          _index: 1086,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'logs.some(log',
        {
          _index: 1122,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['looking', { _index: 1606, title: {}, body: { 'index.html': {} } }],
      ['loop', { _index: 1602, title: {}, body: { 'index.html': {} } }],
      [
        'lowest',
        {
          _index: 234,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'lt',
        {
          _index: 859,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'lte',
        {
          _index: 241,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'makes',
        {
          _index: 1007,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'manage',
        {
          _index: 738,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'manager',
        {
          _index: 330,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'injectables/CachingService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'many',
        {
          _index: 1536,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'map',
        { _index: 406, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'map((role',
        { _index: 436, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'mappinginput',
        {
          _index: 915,
          title: { 'interfaces/MappingInput.html': {} },
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'mappingproperties',
        {
          _index: 928,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'mappings',
        {
          _index: 917,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'matching',
        {
          _index: 259,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'max',
        {
          _index: 62,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'maxpoolsize',
        {
          _index: 1166,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'maxretries',
        {
          _index: 1168,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'means',
        {
          _index: 1705,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'message',
        {
          _index: 805,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'metadata',
        {
          _index: 792,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        "metadata.add('app_id",
        {
          _index: 817,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        "metadata.add('auth_key",
        {
          _index: 819,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'method',
        {
          _index: 958,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'methods',
        {
          _index: 264,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metric',
        {
          _index: 211,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metric.field',
        {
          _index: 205,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metric.settings?.model',
        {
          _index: 225,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metric.settings?.percents',
        {
          _index: 220,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metric.settings?.window',
        {
          _index: 228,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metric.type',
        {
          _index: 200,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metricagg',
        {
          _index: 212,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metricagg[metric.id',
        {
          _index: 215,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metrics',
        {
          _index: 207,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metrics.foreach((metric',
        {
          _index: 199,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'metrics.reduce((acc',
        {
          _index: 210,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'milliseconds',
        { _index: 363, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'min',
        {
          _index: 61,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'min_doc_count',
        {
          _index: 56,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'minpoolsize',
        {
          _index: 1164,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'miscellaneous',
        {
          _index: 1529,
          title: {
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
          body: {
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'mismatch',
        {
          _index: 1264,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'missing',
        {
          _index: 1095,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['mit', { _index: 1611, title: {}, body: { 'index.html': {} } }],
      [
        'mock',
        {
          _index: 1723,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'mode',
        {
          _index: 863,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'index.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'model',
        {
          _index: 224,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'moderator',
        { _index: 439, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'module',
        {
          _index: 300,
          title: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
          },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'overview.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'modules',
        {
          _index: 302,
          title: { 'modules.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'more',
        {
          _index: 807,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'move',
        {
          _index: 1694,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'moving_avg',
        {
          _index: 222,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'moving_fn',
        {
          _index: 230,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'msearchrequest',
        {
          _index: 1003,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'msearchrequest.push',
        {
          _index: 1005,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['myśliwiec', { _index: 1624, title: {}, body: { 'index.html': {} } }],
      [
        'name',
        {
          _index: 276,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['need', { _index: 1596, title: {}, body: { 'index.html': {} } }],
      [
        'needed',
        {
          _index: 987,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['nest', { _index: 1549, title: {}, body: { 'index.html': {} } }],
      [
        'nested',
        {
          _index: 1070,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'nestfactory.create(appmodule',
        {
          _index: 1663,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'nestfactory.create(yourmodule',
        {
          _index: 1664,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'nestframework',
        { _index: 1628, title: {}, body: { 'index.html': {} } },
      ],
      [
        'nestia',
        {
          _index: 1689,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'nestia.config.ts',
        {
          _index: 1471,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'nestia/core',
        {
          _index: 283,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestia/e2e',
        { _index: 1500, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'nestia/fetcher',
        { _index: 1502, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'nestia/sdk',
        { _index: 1503, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'nestia_config',
        {
          _index: 1472,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'nestjs',
        {
          _index: 921,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'dependencies.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'nestjs/cache',
        {
          _index: 329,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'injectables/CachingService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/common',
        {
          _index: 24,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/config',
        {
          _index: 26,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'modules/AppModule.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/core',
        {
          _index: 1333,
          title: {},
          body: { 'guards/RolesGuard.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'nestjs/microservices',
        {
          _index: 761,
          title: {},
          body: {
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/platform',
        { _index: 1508, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'nestjs/swagger',
        { _index: 1510, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'never',
        {
          _index: 876,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'new',
        {
          _index: 70,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'newfavorites',
        {
          _index: 676,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'newmax',
        {
          _index: 248,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'newmin',
        {
          _index: 247,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'next',
        {
          _index: 45,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'node',
        {
          _index: 1094,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['node.js', { _index: 1541, title: {}, body: { 'index.html': {} } }],
      [
        'node.pid',
        {
          _index: 1123,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'nodeurl',
        {
          _index: 1145,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'notacceptableexception',
        {
          _index: 1360,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "notacceptableexception('key",
        {
          _index: 1371,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'notfoundexception',
        {
          _index: 720,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        "notfoundexception('dashboard",
        {
          _index: 732,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'notin',
        {
          _index: 857,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'npm',
        {
          _index: 1555,
          title: {},
          body: { 'index.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'npx',
        {
          _index: 1688,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'null',
        {
          _index: 441,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'nulltoundefined',
        {
          _index: 32,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'nulltoundefined(dashboard',
        {
          _index: 571,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/UserVariableService.html': {},
          },
        },
      ],
      [
        'nulltoundefined(role',
        {
          _index: 1327,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'nulltoundefined(value',
        {
          _index: 1539,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'nulltoundefined(widget',
        {
          _index: 113,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'number',
        {
          _index: 54,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'numerical',
        {
          _index: 903,
          title: {},
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
          },
        },
      ],
      [
        'object',
        {
          _index: 50,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'object.keys(aggs).foreach((key',
        {
          _index: 197,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'object.keys(aggs[key].aggs).length',
        {
          _index: 198,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'object.keys(data?.body',
        {
          _index: 1052,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'object.keys(processmap).foreach(agentguid',
        {
          _index: 1119,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'object.values(processmap[agentguid]).filter(node',
        {
          _index: 1121,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'observable',
        {
          _index: 404,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'guards/RolesGuard.html': {},
          },
        },
      ],
      [
        'occurred',
        {
          _index: 972,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['offer', { _index: 1608, title: {}, body: { 'index.html': {} } }],
      ['official', { _index: 1586, title: {}, body: { 'index.html': {} } }],
      [
        'omit',
        {
          _index: 839,
          title: {},
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
          },
        },
      ],
      [
        'onmoduleinit',
        {
          _index: 781,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'open',
        {
          _index: 288,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'opensearch',
        {
          _index: 922,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'opensearch_reject_unauthorized',
        {
          _index: 1269,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'opensearch_request_timeout',
        {
          _index: 1273,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'opensearchclient',
        {
          _index: 920,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'opensearchclientprovider',
        {
          _index: 926,
          title: { 'injectables/OpenSearchClientProvider.html': {} },
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'opensearchcontroller',
        {
          _index: 1194,
          title: { 'controllers/OpenSearchController.html': {} },
          body: {
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'opensearchmodule',
        {
          _index: 318,
          title: { 'modules/OpenSearchModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/WidgetModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'opensearchmodule.forrootasync',
        {
          _index: 1249,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'opensearchservice',
        {
          _index: 34,
          title: { 'injectables/OpenSearchService.html': {} },
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'opossum',
        { _index: 1520, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'optional',
        {
          _index: 277,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'options',
        {
          _index: 767,
          title: {},
          body: {
            'modules/GrpcModule.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'options.length',
        {
          _index: 1055,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'order',
        {
          _index: 55,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'orderby',
        {
          _index: 154,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'organization',
        {
          _index: 850,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
          },
        },
      ],
      [
        'organizationid',
        {
          _index: 1373,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'organize',
        {
          _index: 1083,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'original',
        {
          _index: 1246,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'otherwise',
        {
          _index: 1675,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'out',
        {
          _index: 324,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'index.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'output',
        {
          _index: 929,
          title: { 'interfaces/Output.html': {} },
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'overview',
        {
          _index: 1633,
          title: { 'overview.html': {} },
          body: { 'overview.html': {} },
        },
      ],
      [
        'ownerid',
        {
          _index: 564,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
          },
        },
      ],
      [
        'package',
        {
          _index: 770,
          title: { 'dependencies.html': {}, 'properties.html': {} },
          body: { 'modules/GrpcModule.html': {} },
        },
      ],
      [
        'packages/api',
        {
          _index: 1699,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'packages/sdk',
        {
          _index: 1684,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'packages/sdk/src',
        {
          _index: 1682,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'param',
        {
          _index: 947,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'parameters',
        {
          _index: 275,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'params',
        {
          _index: 132,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'params.push',
        {
          _index: 134,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'params.where',
        {
          _index: 609,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'params.where?.and',
        {
          _index: 610,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'params?.where',
        {
          _index: 1377,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'params?.where?.and',
        {
          _index: 1378,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'parent',
        {
          _index: 724,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'parentid',
        {
          _index: 567,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
          },
        },
      ],
      [
        'parentkey',
        {
          _index: 1064,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'parentkey}.${key',
        {
          _index: 1068,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'parentpid',
        {
          _index: 1090,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'parseint(interval',
        {
          _index: 181,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'parseint(min_doc_count',
        {
          _index: 163,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'parseint(precision',
        {
          _index: 178,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'parseint(size',
        {
          _index: 158,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['part', { _index: 1598, title: {}, body: { 'index.html': {} } }],
      [
        'password',
        {
          _index: 1162,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'path',
        {
          _index: 194,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'modules/GrpcModule.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'per',
        {
          _index: 1116,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'percentiles',
        {
          _index: 218,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'percents',
        {
          _index: 219,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'perform',
        {
          _index: 1704,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'permissions',
        {
          _index: 442,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        "permissions(['category.create",
        {
          _index: 534,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        "permissions(['category.create'])@('create",
        {
          _index: 508,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        "permissions(['category.view",
        {
          _index: 537,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        "permissions(['category.view'])@('get",
        {
          _index: 512,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        "permissions(['category.view'])@('list",
        {
          _index: 516,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        "permissions(['dashboard.create",
        {
          _index: 605,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        "permissions(['dashboard.delete",
        {
          _index: 624,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        "permissions(['dashboard.modify",
        {
          _index: 618,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        "permissions(['dashboard.view",
        {
          _index: 607,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        "permissions(['variable.create",
        {
          _index: 1366,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['variable.create'])@('create",
        {
          _index: 1349,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['variable.delete",
        {
          _index: 1382,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['variable.delete'])@('delete",
        {
          _index: 1352,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['variable.modify",
        {
          _index: 1379,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['variable.modify'])@('update",
        {
          _index: 1358,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['variable.view",
        {
          _index: 1374,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['variable.view'])@('get",
        {
          _index: 1354,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['variable.view'])@('list",
        {
          _index: 1356,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        "permissions(['widget.create",
        {
          _index: 1435,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        "permissions(['widget.create'])@('create",
        {
          _index: 1421,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        "permissions(['widget.modify",
        {
          _index: 1446,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        "permissions(['widget.modify'])@('update",
        {
          _index: 1427,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        "permissions(['widget.view",
        {
          _index: 1441,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        "permissions(['widget.view'])@('get",
        {
          _index: 1423,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        "permissions(['widget.view'])@('list",
        {
          _index: 1425,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'permissions.some((permission',
        { _index: 1340, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'pid',
        {
          _index: 932,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'placed',
        {
          _index: 1680,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['please', { _index: 1579, title: {}, body: { 'index.html': {} } }],
      [
        'pool',
        {
          _index: 1191,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'populated',
        {
          _index: 1009,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'populatedelements',
        {
          _index: 748,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'populatefavourites',
        {
          _index: 683,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'populatefavourites(ids',
        {
          _index: 688,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'populatewidget',
        {
          _index: 704,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'populatewidget(elements',
        {
          _index: 714,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'populating',
        {
          _index: 698,
          title: {},
          body: {
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
          },
        },
      ],
      [
        'port',
        { _index: 359, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'possible',
        {
          _index: 1670,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'precision',
        {
          _index: 156,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'prefer',
        {
          _index: 1000,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'prefix',
        {
          _index: 371,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'prisma',
        {
          _index: 16,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'prisma.args',
        {
          _index: 1538,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'prisma.dashboardcategorycreateinput',
        {
          _index: 550,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'prisma.dashboardprofileuncheckedcreateinput',
        {
          _index: 685,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'prisma.dashboardprofileuncheckedupdateinput',
        {
          _index: 690,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'prisma.dashboarduncheckedcreateinput',
        {
          _index: 708,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'prisma.dashboarduncheckedupdateinput',
        {
          _index: 706,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'prisma.rolecreateinput',
        {
          _index: 1312,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'prisma.roleuncheckedupdateinput',
        {
          _index: 1317,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'prisma.uservariablecreateinput',
        {
          _index: 1392,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'prisma.uservariableuncheckedupdateinput',
        {
          _index: 1401,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'prisma.widgetuncheckedcreateinput',
        {
          _index: 77,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'prisma.widgetuncheckedupdateinput',
        {
          _index: 96,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'prisma/client',
        {
          _index: 519,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'prismaclient',
        {
          _index: 518,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'prismamodule',
        { _index: 327, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'prismaservice',
        {
          _index: 17,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'private',
        {
          _index: 68,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'process',
        {
          _index: 1037,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processing',
        {
          _index: 1077,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processmap',
        {
          _index: 1081,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processmap[agentguid',
        {
          _index: 1089,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processmap[agentguid][parentpid',
        {
          _index: 1096,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processmap[agentguid][parentpid].children.push(processmap[agentguid][processpid',
        {
          _index: 1112,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processmap[agentguid][processpid',
        {
          _index: 1103,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processnode',
        {
          _index: 931,
          title: { 'interfaces/ProcessNode.html': {} },
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'processpid',
        {
          _index: 1092,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processproperties',
        {
          _index: 1063,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processproperties(currentproperty.properties',
        {
          _index: 1072,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processproperties(input.mappings.properties',
        {
          _index: 1079,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processtree',
        {
          _index: 1197,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'processtree(query',
        {
          _index: 1204,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'processtrees',
        {
          _index: 1118,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'processtrees[agentguid',
        {
          _index: 1120,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['production', { _index: 1561, title: {}, body: { 'index.html': {} } }],
      [
        'profile',
        {
          _index: 635,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
          },
        },
      ],
      [
        'profile.controller',
        {
          _index: 681,
          title: {},
          body: { 'modules/DashboardProfileModule.html': {} },
        },
      ],
      [
        'profile.controller.ts',
        {
          _index: 634,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'profile.controller.ts:20',
        {
          _index: 643,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'profile.controller.ts:38',
        {
          _index: 650,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'profile.controller.ts:49',
        {
          _index: 642,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'profile.controller.ts:72',
        {
          _index: 646,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'profile.dto',
        {
          _index: 654,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'profile.dto.ts',
        {
          _index: 831,
          title: {},
          body: {
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'profile.module',
        {
          _index: 342,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'profile.module.ts',
        {
          _index: 680,
          title: {},
          body: { 'modules/DashboardProfileModule.html': {} },
        },
      ],
      [
        'profile.opensearchconfig',
        {
          _index: 1148,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'profile.service',
        {
          _index: 653,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/OpenSearchClientProvider.html': {},
          },
        },
      ],
      [
        'profile.service.ts',
        {
          _index: 682,
          title: {},
          body: {
            'injectables/DashboardProfileService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'profile.service.ts:10',
        {
          _index: 686,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'profile.service.ts:21',
        {
          _index: 687,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'profile.service.ts:32',
        {
          _index: 691,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'profile.service.ts:45',
        {
          _index: 689,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'profile.service.ts:6',
        {
          _index: 684,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'profile/dashboard',
        {
          _index: 341,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'profile/dto/dashboard',
        {
          _index: 830,
          title: {},
          body: {
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'profile?.favouritedashboardids',
        {
          _index: 669,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'profile?.id',
        {
          _index: 657,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'profile?.opensearchconfig',
        {
          _index: 1147,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      ['progressive', { _index: 1540, title: {}, body: { 'index.html': {} } }],
      ['project', { _index: 1552, title: {}, body: { 'index.html': {} } }],
      [
        'project/opensearch',
        {
          _index: 1139,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'promise',
        {
          _index: 376,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'promise.all',
        {
          _index: 128,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'propagate',
        {
          _index: 1716,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'propagation',
        {
          _index: 1701,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'properties',
        {
          _index: 395,
          title: { 'properties.html': {} },
          body: {
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'properties.html': {},
          },
        },
      ],
      [
        'properties[key',
        {
          _index: 1066,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'property',
        {
          _index: 1073,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'proto',
        { _index: 773, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'protopath',
        { _index: 771, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'providers',
        {
          _index: 307,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'public',
        {
          _index: 74,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AuthController.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'publish',
        {
          _index: 1695,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'query',
        {
          _index: 107,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'query.aggs',
        {
          _index: 1223,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'query.config.map((config',
        {
          _index: 129,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'query.dto',
        {
          _index: 925,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'query.dto.ts',
        {
          _index: 911,
          title: {},
          body: {
            'interfaces/ISearchQueryRequestPayload.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'query.field',
        {
          _index: 1232,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'query.query',
        {
          _index: 1219,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'query.queryjson',
        {
          _index: 1217,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'query.queryjson.bool',
        {
          _index: 1222,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'query.queryjson?.bool?.filter',
        {
          _index: 1218,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'query.size',
        {
          _index: 1224,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'query.where',
        {
          _index: 104,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'query?.filters?.sort',
        {
          _index: 131,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'query?.where',
        {
          _index: 1409,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'query_string',
        {
          _index: 173,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'queryjson',
        {
          _index: 845,
          title: {},
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
          },
        },
      ],
      [
        'querysearchdata',
        {
          _index: 267,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'querysearchdata(@typedbody',
        {
          _index: 298,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'querysearchdata(data',
        {
          _index: 278,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      ['questions', { _index: 1577, title: {}, body: { 'index.html': {} } }],
      [
        'random',
        {
          _index: 1722,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'range',
        {
          _index: 238,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['read', { _index: 1619, title: {}, body: { 'index.html': {} } }],
      [
        "readfilesync(configservice.get('opensearch_ca_path",
        {
          _index: 1255,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'readonly',
        {
          _index: 69,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'real',
        {
          _index: 1593,
          title: {},
          body: { 'index.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'record',
        {
          _index: 878,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'recursively',
        {
          _index: 1071,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'redis',
        {
          _index: 334,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'redisstore',
        { _index: 332, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'reference',
        {
          _index: 1727,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'reflect',
        { _index: 1522, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'reflector',
        { _index: 1330, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'reflector.createdecorator',
        {
          _index: 1730,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'refresh',
        {
          _index: 951,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'rejectunauthorized',
        {
          _index: 1163,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'remove',
        {
          _index: 675,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'removefromfavourite',
        {
          _index: 637,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'removefromfavourite(inputs',
        {
          _index: 644,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'renamed',
        {
          _index: 1677,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['repository', { _index: 1551, title: {}, body: { 'index.html': {} } }],
      [
        'request',
        {
          _index: 412,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'guards/RolesGuard.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'request.user',
        {
          _index: 1734,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'request?.user?.role?.permissions',
        { _index: 1336, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        "request['user",
        { _index: 427, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'request_data',
        {
          _index: 798,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'requestion',
        {
          _index: 1725,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'requesttimeout',
        {
          _index: 1169,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'required',
        { _index: 1343, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'res',
        {
          _index: 964,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'res.body',
        {
          _index: 968,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'res.status',
        { _index: 418, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'res.statuscode',
        {
          _index: 1023,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'reset',
        {
          _index: 323,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'resource_path',
        {
          _index: 797,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      ['resources', { _index: 1571, title: {}, body: { 'index.html': {} } }],
      [
        'response',
        {
          _index: 808,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'response_data',
        {
          _index: 811,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'responsedata',
        { _index: 424, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'responsedata?.user_data?.idp_data',
        { _index: 426, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'responsedata?.user_data?.session_response',
        { _index: 430, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'rest',
        {
          _index: 80,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'result',
        {
          _index: 1061,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'result.push',
        {
          _index: 1074,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'results',
        {
          _index: 258,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'return',
        {
          _index: 94,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'returning',
        {
          _index: 1654,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'returns',
        {
          _index: 270,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'role',
        {
          _index: 437,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
          },
        },
      ],
      [
        'role.controller',
        { _index: 1308, title: {}, body: { 'modules/RoleModule.html': {} } },
      ],
      [
        'role.service',
        {
          _index: 1298,
          title: {},
          body: {
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
          },
        },
      ],
      [
        'role/role.module',
        { _index: 346, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'rolecontroller',
        {
          _index: 1292,
          title: { 'controllers/RoleController.html': {} },
          body: {
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'roledetails',
        {
          _index: 1301,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        'rolemodule',
        {
          _index: 319,
          title: { 'modules/RoleModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/RoleModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'roles',
        {
          _index: 1323,
          title: {},
          body: {
            'injectables/RoleService.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'roles.map((role',
        {
          _index: 1326,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'roleservice',
        {
          _index: 398,
          title: { 'injectables/RoleService.html': {} },
          body: {
            'guards/AuthGuard.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'rolesguard',
        {
          _index: 526,
          title: { 'guards/RolesGuard.html': {} },
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['run', { _index: 1557, title: {}, body: { 'index.html': {} } }],
      [
        'runs',
        {
          _index: 1687,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'rxjs',
        {
          _index: 408,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'guards/RolesGuard.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'same',
        {
          _index: 1025,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'saving',
        {
          _index: 500,
          title: {},
          body: {
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['scalable', { _index: 1545, title: {}, body: { 'index.html': {} } }],
      [
        'scope',
        {
          _index: 901,
          title: {},
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
          },
        },
      ],
      [
        'sdk',
        {
          _index: 1679,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'search',
        {
          _index: 279,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'search(query',
        {
          _index: 1207,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'search.controller',
        {
          _index: 1245,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'search.controller.ts',
        {
          _index: 1195,
          title: {},
          body: {
            'controllers/OpenSearchController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'search.controller.ts:138',
        {
          _index: 1206,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'search.controller.ts:197',
        {
          _index: 1203,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'search.controller.ts:22',
        {
          _index: 1208,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'search.controller.ts:224',
        {
          _index: 1200,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'search.controller.ts:80',
        {
          _index: 1199,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'search.module',
        {
          _index: 345,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/WidgetModule.html': {},
          },
        },
      ],
      [
        'search.module.ts',
        {
          _index: 1243,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'search.service',
        {
          _index: 37,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'search.service.ts',
        {
          _index: 916,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'search.service.ts:114',
        {
          _index: 1282,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:120',
        {
          _index: 1283,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:128',
        {
          _index: 1286,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:199',
        {
          _index: 1279,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:246',
        {
          _index: 1285,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:295',
        {
          _index: 1280,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:328',
        {
          _index: 1281,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:39',
        {
          _index: 1290,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:40',
        {
          _index: 1291,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:41',
        {
          _index: 1289,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:43',
        {
          _index: 1278,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:54',
        {
          _index: 1284,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:62',
        {
          _index: 1287,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.service.ts:97',
        {
          _index: 1288,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'search.view',
        { _index: 447, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'search/dto/open',
        {
          _index: 910,
          title: {},
          body: {
            'interfaces/ISearchQueryRequestPayload.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'search/open',
        {
          _index: 36,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'search/opensearch',
        {
          _index: 1124,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'searchbyquery',
        {
          _index: 997,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'searchbyquery(input',
        {
          _index: 995,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'searchclient',
        {
          _index: 938,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'searchfields',
        {
          _index: 1533,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'searching',
        {
          _index: 998,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'searchservice',
        {
          _index: 73,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'self',
        {
          _index: 1260,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'sendrequest',
        {
          _index: 913,
          title: {},
          body: { 'interfaces/InterfaceService.html': {} },
        },
      ],
      [
        'sendrequest(data',
        {
          _index: 795,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'server',
        {
          _index: 1546,
          title: {},
          body: { 'index.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'service',
        {
          _index: 1212,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'session',
        { _index: 414, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'session$.pipe',
        { _index: 416, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'session_id',
        {
          _index: 292,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'set',
        {
          _index: 649,
          title: {},
          body: {
            'controllers/DashboardProfileController.html': {},
            'interfaces/MappingInput.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'setcachebyquery',
        {
          _index: 473,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'setcachebyquery(query',
        {
          _index: 479,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'setdefaultdashboard',
        {
          _index: 638,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'setdefaultdashboard(inputs',
        {
          _index: 647,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'settings',
        {
          _index: 153,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['setup', { _index: 1553, title: {}, body: { 'index.html': {} } }],
      [
        'setuserid',
        {
          _index: 1276,
          title: {},
          body: { 'injectables/OpenSearchService.html': {} },
        },
      ],
      [
        'setuserid(userid',
        {
          _index: 948,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'share',
        {
          _index: 1696,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'show',
        {
          _index: 737,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      ['side', { _index: 1547, title: {}, body: { 'index.html': {} } }],
      [
        'signed',
        {
          _index: 1261,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'simple',
        {
          _index: 226,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'simulate',
        {
          _index: 1729,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'simulation',
        {
          _index: 1718,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'single',
        {
          _index: 960,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'singledataingestion(input',
        {
          _index: 954,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'singleupload',
        {
          _index: 957,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'size',
        {
          _index: 53,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'skip',
        {
          _index: 883,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'socket',
        { _index: 356, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'sort',
        {
          _index: 143,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'source',
        {
          _index: 4,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'modules/AuthModule.html': {},
            'modules/CachingModule.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'modules/DashboardModule.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'modules/RoleModule.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'specific',
        {
          _index: 1135,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'specified',
        {
          _index: 1671,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'specify',
        {
          _index: 1649,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['sponsors', { _index: 1615, title: {}, body: { 'index.html': {} } }],
      [
        'src/**/*.controller.ts',
        {
          _index: 1660,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/.../dtos.ts',
        {
          _index: 1642,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'src/.../main.ts',
        {
          _index: 1530,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'src/.../open',
        {
          _index: 1643,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'src/.../permission.decorator.ts',
        {
          _index: 1644,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/.../user.decorator.ts',
        {
          _index: 1645,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/.../utils.ts',
        {
          _index: 1531,
          title: {},
          body: {
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'src/app.controller.ts',
        {
          _index: 263,
          title: {},
          body: { 'controllers/AppController.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/app.controller.ts:16',
        {
          _index: 269,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'src/app.controller.ts:21',
        {
          _index: 274,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'src/app.controller.ts:31',
        {
          _index: 280,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'src/app.module.ts',
        { _index: 325, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'src/app.service.ts',
        {
          _index: 365,
          title: {},
          body: { 'injectables/AppService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/app.service.ts:5',
        { _index: 366, title: {}, body: { 'injectables/AppService.html': {} } },
      ],
      [
        'src/auth/auth.controller.ts',
        {
          _index: 370,
          title: {},
          body: { 'controllers/AuthController.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:12',
        {
          _index: 375,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:17',
        {
          _index: 378,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.module.ts',
        { _index: 463, title: {}, body: { 'modules/AuthModule.html': {} } },
      ],
      [
        'src/caching/caching.module',
        {
          _index: 1244,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        'src/caching/caching.module.ts',
        { _index: 469, title: {}, body: { 'modules/CachingModule.html': {} } },
      ],
      [
        'src/caching/caching.service',
        {
          _index: 923,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'src/caching/caching.service.ts',
        {
          _index: 471,
          title: {},
          body: { 'injectables/CachingService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/caching/caching.service.ts:10',
        {
          _index: 478,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'src/caching/caching.service.ts:26',
        {
          _index: 480,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'src/caching/caching.service.ts:7',
        {
          _index: 475,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'src/common/dtos',
        {
          _index: 523,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'src/common/dtos.ts',
        {
          _index: 847,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'src/common/utils',
        {
          _index: 33,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'src/common/utils.ts',
        {
          _index: 1482,
          title: {},
          body: {
            'coverage.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'src/controllers',
        {
          _index: 1659,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/dashboard',
        {
          _index: 503,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'modules/DashboardCategoryModule.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardProfileController.html': {},
            'modules/DashboardProfileModule.html': {},
            'injectables/DashboardProfileService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'modules/OpenSearchModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/dashboard/dashboard.controller.ts',
        {
          _index: 574,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/dashboard/dashboard.controller.ts:139',
        {
          _index: 592,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.controller.ts:145',
        {
          _index: 600,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.controller.ts:154',
        {
          _index: 582,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.controller.ts:166',
        {
          _index: 589,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.controller.ts:26',
        {
          _index: 585,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.controller.ts:39',
        {
          _index: 594,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.controller.ts:86',
        {
          _index: 598,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.module.ts',
        {
          _index: 630,
          title: {},
          body: { 'modules/DashboardModule.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts',
        {
          _index: 703,
          title: {},
          body: {
            'injectables/DashboardService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts:104',
        {
          _index: 712,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts:121',
        {
          _index: 711,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts:135',
        {
          _index: 716,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts:15',
        {
          _index: 709,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts:42',
        {
          _index: 707,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts:65',
        {
          _index: 718,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts:78',
        {
          _index: 713,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/dashboard/dashboard.service.ts:9',
        {
          _index: 705,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/dashboard/dto/dashboard.dto.ts',
        {
          _index: 889,
          title: {},
          body: {
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/decorators/permission.decorator',
        {
          _index: 525,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'src/decorators/permission.decorator.ts',
        {
          _index: 1487,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/decorators/user.decorator',
        {
          _index: 380,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      [
        'src/decorators/user.decorator.ts',
        {
          _index: 1488,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/grpc/grpc.module.ts',
        { _index: 757, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'src/grpc/grpc.service',
        {
          _index: 381,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
          },
        },
      ],
      [
        'src/grpc/grpc.service.ts',
        {
          _index: 779,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/grpc/grpc.service.ts:23',
        {
          _index: 784,
          title: {},
          body: { 'injectables/GrpcService.html': {} },
        },
      ],
      [
        'src/grpc/grpc.service.ts:27',
        {
          _index: 790,
          title: {},
          body: { 'injectables/GrpcService.html': {} },
        },
      ],
      [
        'src/grpc/grpc.service.ts:32',
        {
          _index: 787,
          title: {},
          body: { 'injectables/GrpcService.html': {} },
        },
      ],
      [
        'src/grpc/grpc.service.ts:51',
        {
          _index: 789,
          title: {},
          body: { 'injectables/GrpcService.html': {} },
        },
      ],
      [
        'src/grpc/grpc.service.ts:8',
        {
          _index: 914,
          title: {},
          body: { 'interfaces/InterfaceService.html': {} },
        },
      ],
      [
        'src/guards/auth.guard',
        {
          _index: 383,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'src/guards/auth.guard.ts',
        {
          _index: 394,
          title: {},
          body: { 'guards/AuthGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/guards/auth.guard.ts:14',
        { _index: 399, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'src/guards/auth.guard.ts:17',
        { _index: 402, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'src/guards/permissions.guard',
        {
          _index: 527,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'src/guards/permissions.guard.ts',
        {
          _index: 1328,
          title: {},
          body: { 'guards/RolesGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/guards/permissions.guard.ts:15',
        { _index: 1331, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'src/guards/permissions.guard.ts:18',
        { _index: 1332, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'src/main.ts',
        {
          _index: 1489,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'src/open',
        {
          _index: 35,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'src/role/dto/role.dto.ts',
        {
          _index: 892,
          title: {},
          body: {
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/role/role.controller.ts',
        {
          _index: 1293,
          title: {},
          body: { 'controllers/RoleController.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/role/role.controller.ts:18',
        {
          _index: 1294,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        'src/role/role.controller.ts:28',
        {
          _index: 1296,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        'src/role/role.controller.ts:37',
        {
          _index: 1295,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        'src/role/role.module.ts',
        { _index: 1307, title: {}, body: { 'modules/RoleModule.html': {} } },
      ],
      [
        'src/role/role.service',
        {
          _index: 409,
          title: {},
          body: { 'guards/AuthGuard.html': {}, 'guards/RolesGuard.html': {} },
        },
      ],
      [
        'src/role/role.service.ts',
        {
          _index: 1309,
          title: {},
          body: { 'injectables/RoleService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/role/role.service.ts:11',
        {
          _index: 1313,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'src/role/role.service.ts:23',
        {
          _index: 1318,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'src/role/role.service.ts:37',
        {
          _index: 1315,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'src/role/role.service.ts:51',
        {
          _index: 1316,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'src/role/role.service.ts:7',
        {
          _index: 1311,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'src/user',
        {
          _index: 898,
          title: {},
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/widget/dto/widget.dto',
        {
          _index: 1209,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'src/widget/dto/widget.dto.ts',
        {
          _index: 834,
          title: {},
          body: {
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/widget/dto/widget.dto.ts:39',
        { _index: 835, title: {}, body: { 'interfaces/IAggs.html': {} } },
      ],
      [
        'src/widget/widget.controller.ts',
        {
          _index: 1419,
          title: {},
          body: {
            'controllers/WidgetController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/widget/widget.controller.ts:28',
        {
          _index: 1422,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'src/widget/widget.controller.ts:46',
        {
          _index: 1426,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'src/widget/widget.controller.ts:62',
        {
          _index: 1424,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'src/widget/widget.controller.ts:70',
        {
          _index: 1428,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'src/widget/widget.controller.ts:90',
        {
          _index: 1420,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'src/widget/widget.module',
        {
          _index: 631,
          title: {},
          body: { 'modules/DashboardModule.html': {} },
        },
      ],
      [
        'src/widget/widget.module.ts',
        { _index: 1455, title: {}, body: { 'modules/WidgetModule.html': {} } },
      ],
      [
        'src/widget/widget.service',
        {
          _index: 721,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'src/widget/widget.service.ts',
        {
          _index: 6,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/widget/widget.service.ts:108',
        {
          _index: 1462,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'src/widget/widget.service.ts:122',
        {
          _index: 1458,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'src/widget/widget.service.ts:157',
        {
          _index: 1460,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'src/widget/widget.service.ts:18',
        { _index: 13, title: {}, body: { 'interfaces/Aggregation.html': {} } },
      ],
      [
        'src/widget/widget.service.ts:40',
        {
          _index: 1457,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'src/widget/widget.service.ts:47',
        {
          _index: 1461,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'src/widget/widget.service.ts:478',
        {
          _index: 1466,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'src/widget/widget.service.ts:66',
        {
          _index: 1464,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'src/widget/widget.service.ts:86',
        {
          _index: 1463,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      [
        'ssl',
        {
          _index: 1190,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'start',
        {
          _index: 1076,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'index.html': {},
          },
        },
      ],
      ['start:dev', { _index: 1560, title: {}, body: { 'index.html': {} } }],
      [
        'start:prodrun',
        { _index: 1562, title: {}, body: { 'index.html': {} } },
      ],
      [
        'started',
        {
          _index: 85,
          title: { 'index.html': {} },
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['starter', { _index: 1550, title: {}, body: { 'index.html': {} } }],
      [
        'startswith',
        {
          _index: 869,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'statements',
        { _index: 1470, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'status',
        {
          _index: 800,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['stay', { _index: 1601, title: {}, body: { 'index.html': {} } }],
      [
        'step',
        {
          _index: 1082,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'store',
        { _index: 355, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'string',
        {
          _index: 9,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'string(error',
        {
          _index: 1178,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'stringified',
        {
          _index: 499,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'stringifieddata',
        {
          _index: 497,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'structure',
        {
          _index: 1026,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'success',
        {
          _index: 803,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'successful',
        {
          _index: 802,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'sum',
        {
          _index: 214,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'support',
        {
          _index: 1578,
          title: {},
          body: { 'index.html': {}, 'modules.html': {} },
        },
      ],
      [
        'sure',
        {
          _index: 1008,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      ['svg', { _index: 1631, title: {}, body: { 'modules.html': {} } }],
      [
        'swagger',
        {
          _index: 1525,
          title: {},
          body: { 'dependencies.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'swagger.json',
        {
          _index: 1669,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'switch',
        {
          _index: 183,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'switchmap',
        { _index: 407, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'switchmap((res',
        { _index: 417, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        't',
        {
          _index: 862,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        't[k',
        {
          _index: 875,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      ['table', { _index: 1495, title: {}, body: { 'coverage.html': {} } }],
      [
        "tablesort(document.getelementbyid('coverage",
        { _index: 1494, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'tags',
        {
          _index: 851,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'tags.pattern',
        {
          _index: 853,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'take',
        {
          _index: 884,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
          },
        },
      ],
      [
        'target',
        {
          _index: 1685,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'tenant/endpoint',
        {
          _index: 1085,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'terms',
        {
          _index: 51,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['test', { _index: 1565, title: {}, body: { 'index.html': {} } }],
      [
        'test:covresources',
        { _index: 1568, title: {}, body: { 'index.html': {} } },
      ],
      ['test:e2e', { _index: 1567, title: {}, body: { 'index.html': {} } }],
      ['tests', { _index: 1563, title: {}, body: { 'index.html': {} } }],
      [
        'text',
        {
          _index: 902,
          title: {},
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
          },
        },
      ],
      ['thanks', { _index: 1614, title: {}, body: { 'index.html': {} } }],
      [
        'this.appservice.gethello',
        {
          _index: 289,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'this.cachedclient',
        {
          _index: 1159,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.cachedprofileid',
        {
          _index: 1160,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.cachemanager.get(encodedkey',
        {
          _index: 490,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'this.cachemanager.set(encodedkey',
        {
          _index: 501,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'this.cachingservice.getcachebyquery(cachekey',
        {
          _index: 1017,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.cachingservice.setcachebyquery(cachekey',
        {
          _index: 1027,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.cachingservice.setcachebyquery(cachekey,options',
        {
          _index: 1056,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        "this.client.getservice('interfaceservice",
        {
          _index: 814,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        "this.configservice.get('grpc_app_id",
        {
          _index: 818,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        "this.configservice.get('grpc_auth_key",
        {
          _index: 820,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        "this.configservice.get('opensearch_alert_index",
        {
          _index: 1228,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        "this.configservice.get('opensearch_log_index",
        {
          _index: 136,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        "this.configservice.get('opensearch_node",
        {
          _index: 1157,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        "this.configservice.get('opensearch_password",
        {
          _index: 1181,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        "this.configservice.get('opensearch_pool_max",
        {
          _index: 1184,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        "this.configservice.get('opensearch_pool_max_retries",
        {
          _index: 1185,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        "this.configservice.get('opensearch_pool_min",
        {
          _index: 1183,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        "this.configservice.get('opensearch_reject_unauthorized",
        {
          _index: 1182,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        "this.configservice.get('opensearch_request_timeout",
        {
          _index: 1186,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        "this.configservice.get('opensearch_username",
        {
          _index: 1180,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        "this.configservice.get('widget_access_token",
        {
          _index: 1437,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'this.convertmappingstooutput(data?.body[keys[keys.length',
        {
          _index: 1054,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.converttonestedaggs(config',
        {
          _index: 130,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'this.currentclusterurl',
        {
          _index: 979,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.dashboardcategoryservice.create',
        {
          _index: 536,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        'this.dashboardcategoryservice.getbyid(query.id',
        {
          _index: 541,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        'this.dashboardcategoryservice.list(user',
        {
          _index: 540,
          title: {},
          body: { 'controllers/DashboardCategoryController.html': {} },
        },
      ],
      [
        'this.dashboardprofileservice',
        {
          _index: 1140,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.dashboardprofileservice.create',
        {
          _index: 658,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'this.dashboardprofileservice.getbyid',
        {
          _index: 656,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'this.dashboardprofileservice.getbyid(userid',
        {
          _index: 1146,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.dashboardprofileservice.update',
        {
          _index: 663,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        'this.dashboardservice.clone',
        {
          _index: 622,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'this.dashboardservice.create',
        {
          _index: 606,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'this.dashboardservice.delete(query.id',
        {
          _index: 626,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'this.dashboardservice.getbyid(query.id',
        {
          _index: 616,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'this.dashboardservice.list',
        {
          _index: 608,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'this.dashboardservice.update',
        {
          _index: 620,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'this.ensureclientandclusterurl',
        {
          _index: 1010,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.getclient',
        {
          _index: 1019,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.grpcservice.getuserdetails(data.session_id',
        {
          _index: 293,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'this.grpcservice.getuserdetails(request.headers.session_id',
        { _index: 415, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'this.grpcservice.logout(json.parse(user.session_id',
        {
          _index: 391,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'this.interfaceservice',
        {
          _index: 813,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'this.interfaceservice.sendrequest',
        {
          _index: 822,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
          },
        },
      ],
      [
        'this.logger.debug',
        {
          _index: 1406,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.logger.error',
        {
          _index: 1028,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        "this.logger.error('unauthorized",
        { _index: 419, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'this.logger.error(`error',
        {
          _index: 1150,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.logger.error(`exception',
        {
          _index: 971,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.error(`failed',
        {
          _index: 1179,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.logger.error(`user',
        { _index: 1342, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'this.logger.log',
        {
          _index: 955,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        "this.logger.log('user",
        { _index: 431, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        "this.logger.log('using",
        {
          _index: 1187,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.logger.log(`checking',
        {
          _index: 1015,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.log(`data',
        {
          _index: 493,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'this.logger.log(`getting',
        {
          _index: 487,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'this.logger.log(`inside',
        {
          _index: 996,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.log(`opensearch',
        {
          _index: 982,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.log(`reading',
        {
          _index: 1018,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.log(`res',
        {
          _index: 1022,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.log(`returning',
        {
          _index: 491,
          title: {},
          body: {
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.log(`saving',
        {
          _index: 495,
          title: {},
          body: {
            'injectables/CachingService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.log(`stringifying',
        {
          _index: 496,
          title: {},
          body: { 'injectables/CachingService.html': {} },
        },
      ],
      [
        'this.logger.log(`user',
        {
          _index: 949,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.logger.log(`using',
        {
          _index: 1175,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.logger.verbose',
        {
          _index: 82,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        "this.logger.warn('dashboardprofileservice",
        {
          _index: 1141,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      [
        'this.opensearchclientprovider.getclient(this.userid',
        {
          _index: 981,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.opensearchclientprovider.getnodeurl(this.userid',
        {
          _index: 980,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.populatefavourites(profile?.favouritedashboardids',
        {
          _index: 695,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'this.populatewidget(dashboard?.elements',
        {
          _index: 742,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboard.count',
        {
          _index: 735,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboard.create',
        {
          _index: 723,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboard.delete',
        {
          _index: 744,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboard.findmany',
        {
          _index: 700,
          title: {},
          body: {
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
          },
        },
      ],
      [
        'this.prismaservice.dashboard.findunique',
        {
          _index: 725,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboard.update',
        {
          _index: 734,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboardcategory.count',
        {
          _index: 561,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboardcategory.create',
        {
          _index: 559,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboardcategory.findmany',
        {
          _index: 562,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboardcategory.findunique',
        {
          _index: 572,
          title: {},
          body: { 'injectables/DashboardCategoryService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboardprofile.create',
        {
          _index: 693,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboardprofile.findunique',
        {
          _index: 694,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'this.prismaservice.dashboardprofile.update',
        {
          _index: 697,
          title: {},
          body: { 'injectables/DashboardProfileService.html': {} },
        },
      ],
      [
        'this.prismaservice.role.count',
        {
          _index: 1324,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'this.prismaservice.role.create',
        {
          _index: 1320,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'this.prismaservice.role.findmany',
        {
          _index: 1325,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'this.prismaservice.role.findunique',
        {
          _index: 1322,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'this.prismaservice.role.update',
        {
          _index: 1321,
          title: {},
          body: { 'injectables/RoleService.html': {} },
        },
      ],
      [
        'this.prismaservice.uservariable.count',
        {
          _index: 1408,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.prismaservice.uservariable.create',
        {
          _index: 1405,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.prismaservice.uservariable.delete',
        {
          _index: 1417,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.prismaservice.uservariable.findfirst',
        {
          _index: 1414,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.prismaservice.uservariable.findmany',
        {
          _index: 1413,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.prismaservice.uservariable.findmany(query',
        {
          _index: 1410,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.prismaservice.uservariable.findunique',
        {
          _index: 1412,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.prismaservice.uservariable.update',
        {
          _index: 1415,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'this.prismaservice.widget.count',
        {
          _index: 103,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'this.prismaservice.widget.create',
        {
          _index: 87,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'this.prismaservice.widget.findmany',
        {
          _index: 106,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'this.prismaservice.widget.findunique',
        {
          _index: 115,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'this.prismaservice.widget.update',
        {
          _index: 98,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'this.reflector.get(permissions',
        { _index: 1337, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'this.roleservice.create',
        {
          _index: 1300,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        'this.roleservice.list(params',
        {
          _index: 1303,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        'this.roleservice.update',
        {
          _index: 1302,
          title: {},
          body: { 'controllers/RoleController.html': {} },
        },
      ],
      [
        'this.searchclient',
        {
          _index: 953,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.searchclient.index',
        {
          _index: 965,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.searchclient.indices.getmapping',
        {
          _index: 1057,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.searchservice.aggregatequery(params',
        {
          _index: 139,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'this.searchservice.getfields',
        {
          _index: 1237,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'this.searchservice.searchbyquery(data',
        {
          _index: 299,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'this.searchservice.setuserid(user.user_data.id',
        {
          _index: 1213,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'this.searchservice.singledataingestion(data',
        {
          _index: 296,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'this.updateclientfromuserid',
        {
          _index: 993,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.updatedatehistogram',
        {
          _index: 149,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'this.userid',
        {
          _index: 944,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'this.uservariableservice.create',
        {
          _index: 1372,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'this.uservariableservice.delete(inputs.id',
        {
          _index: 1383,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'this.uservariableservice.getbyid(query.id',
        {
          _index: 1375,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'this.uservariableservice.getbyuseridandquery',
        {
          _index: 1368,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'this.uservariableservice.list',
        {
          _index: 1376,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'this.uservariableservice.update',
        {
          _index: 1381,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'this.widgetservice.aggregate(query',
        {
          _index: 1450,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'this.widgetservice.create',
        {
          _index: 1438,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'this.widgetservice.getbyid(query.id',
        {
          _index: 1445,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'this.widgetservice.list',
        {
          _index: 747,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'this.widgetservice.list(params',
        {
          _index: 1444,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'this.widgetservice.update',
        {
          _index: 1448,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'threat',
        {
          _index: 613,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'through',
        {
          _index: 1712,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'throw',
        {
          _index: 421,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'throwing',
        {
          _index: 1706,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['time', { _index: 1594, title: {}, body: { 'index.html': {} } }],
      [
        'time_based',
        {
          _index: 904,
          title: {},
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
          },
        },
      ],
      [
        'time_zone',
        {
          _index: 58,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'timebounds',
        {
          _index: 118,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'timebounds.max',
        {
          _index: 126,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'timebounds.min',
        {
          _index: 125,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'timebounds.timezone',
        {
          _index: 124,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'timestamp',
        {
          _index: 144,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'timezone',
        {
          _index: 28,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'title',
        {
          _index: 1442,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'token',
        {
          _index: 1440,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'top',
        {
          _index: 1078,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'total',
        {
          _index: 102,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ['touch', { _index: 1621, title: {}, body: { 'index.html': {} } }],
      [
        'transport',
        { _index: 760, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'transport.grpc',
        { _index: 766, title: {}, body: { 'modules/GrpcModule.html': {} } },
      ],
      [
        'traverseandupdate',
        {
          _index: 250,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'traverseandupdate(agg[key].aggs',
        {
          _index: 256,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'traverseandupdate(updatedaggregation',
        {
          _index: 257,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'tree',
        {
          _index: 1205,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'trees',
        {
          _index: 1115,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'true',
        {
          _index: 109,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'modules/AppModule.html': {},
            'guards/AuthGuard.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardService.html': {},
            'modules/GrpcModule.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'controllers/OpenSearchController.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'try',
        {
          _index: 963,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'ttl',
        { _index: 361, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'turn',
        {
          _index: 1256,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      ['twitter', { _index: 1627, title: {}, body: { 'index.html': {} } }],
      [
        'two',
        {
          _index: 1651,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'type',
        {
          _index: 11,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'guards/AuthGuard.html': {},
            'injectables/CachingService.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/GrpcService.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/ISearchQueryRequestPayload.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'interfaces/InterfaceResponse.html': {},
            'interfaces/InterfaceService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'guards/RolesGuard.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'typealiases',
        {
          _index: 1640,
          title: { 'miscellaneous/typealiases.html': {} },
          body: {},
        },
      ],
      [
        'typed',
        {
          _index: 1711,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'typedbody',
        {
          _index: 281,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'typedquery',
        {
          _index: 521,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'typedroute',
        {
          _index: 282,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        "typedroute.delete('delete",
        {
          _index: 623,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      [
        "typedroute.get('get",
        {
          _index: 387,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        "typedroute.post('add",
        {
          _index: 294,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        "typedroute.post('aggregate",
        {
          _index: 1449,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        "typedroute.post('alerts",
        {
          _index: 1227,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        "typedroute.post('clone",
        {
          _index: 621,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        "typedroute.post('create",
        {
          _index: 535,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        "typedroute.post('favourite/add",
        {
          _index: 666,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        "typedroute.post('favourite/remove",
        {
          _index: 674,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        "typedroute.post('get",
        {
          _index: 290,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/OpenSearchController.html': {},
          },
        },
      ],
      [
        "typedroute.post('list",
        {
          _index: 538,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        "typedroute.post('list/threat",
        {
          _index: 611,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        "typedroute.post('logout",
        {
          _index: 389,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "typedroute.post('process",
        {
          _index: 1229,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        "typedroute.post('query",
        {
          _index: 297,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        "typedroute.post('search",
        {
          _index: 1211,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        "typedroute.post('set",
        {
          _index: 662,
          title: {},
          body: { 'controllers/DashboardProfileController.html': {} },
        },
      ],
      [
        "typedroute.post('update",
        {
          _index: 617,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'controllers/RoleController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'typeof',
        {
          _index: 89,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'typescript',
        {
          _index: 47,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'interfaces/IAddToFavouriteRequest.html': {},
            'interfaces/IAggs.html': {},
            'interfaces/ICreateDashboardCategoryRequest.html': {},
            'interfaces/ICreateDashboardRequest.html': {},
            'interfaces/ICreateRoleRequest.html': {},
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/ICreateWidgetRequest.html': {},
            'interfaces/IGetDashboard.html': {},
            'interfaces/IGetDashboardCategory.html': {},
            'interfaces/IGetDashboardCategoryRequest.html': {},
            'interfaces/IGetDashboardProfile.html': {},
            'interfaces/IGetDashboardRequest.html': {},
            'interfaces/IGetQueryDataFilter.html': {},
            'interfaces/IGetQueryDataRequest.html': {},
            'interfaces/IGetRole.html': {},
            'interfaces/IGetRoleRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IGetWidget.html': {},
            'interfaces/IGetWidgetRequest.html': {},
            'interfaces/ISetDefaultDashbordRequest.html': {},
            'interfaces/IUpdateDashboardCategoryRequest.html': {},
            'interfaces/IUpdateDashboardRequest.html': {},
            'interfaces/IUpdateRoleRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'interfaces/IUpdateWidgetRequest.html': {},
            'injectables/WidgetService.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'typia',
        {
          _index: 852,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'typia.random',
        {
          _index: 1728,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['ui', { _index: 1526, title: {}, body: { 'dependencies.html': {} } }],
      [
        'unable',
        {
          _index: 1036,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'unauthorizedexception',
        {
          _index: 405,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'guards/RolesGuard.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        "unauthorizedexception('invalid",
        {
          _index: 1439,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        "unauthorizedexception('session",
        { _index: 422, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        "unauthorizedexception('user",
        { _index: 1344, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'undefined',
        {
          _index: 939,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'union',
        {
          _index: 1714,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['unit', { _index: 1564, title: {}, body: { 'index.html': {} } }],
      [
        'unknown',
        {
          _index: 552,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'unlicensed',
        { _index: 1639, title: {}, body: { 'properties.html': {} } },
      ],
      [
        'unmapped_type',
        {
          _index: 146,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'up',
        {
          _index: 1724,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'update',
        {
          _index: 578,
          title: {},
          body: {
            'controllers/DashboardController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        "update')@permissions(['dashboard.modify",
        {
          _index: 599,
          title: {},
          body: { 'controllers/DashboardController.html': {} },
        },
      ],
      [
        'update(inputs',
        {
          _index: 95,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/DashboardController.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'controllers/RoleController.html': {},
            'injectables/RoleService.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'updateclientfromuserid',
        {
          _index: 976,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'updated',
        {
          _index: 99,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'updatedaggregation',
        {
          _index: 249,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'updatedat',
        {
          _index: 461,
          title: {},
          body: {
            'guards/AuthGuard.html': {},
            'injectables/DashboardService.html': {},
          },
        },
      ],
      [
        'updatedatehistogram',
        {
          _index: 246,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'updatedatehistogram(aggregation',
        {
          _index: 1465,
          title: {},
          body: { 'injectables/WidgetService.html': {} },
        },
      ],
      ['updates', { _index: 1603, title: {}, body: { 'index.html': {} } }],
      [
        'updating',
        {
          _index: 97,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'url',
        {
          _index: 768,
          title: {},
          body: {
            'modules/GrpcModule.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'use',
        {
          _index: 1020,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/WidgetController.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'usefactory',
        {
          _index: 354,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'useguards',
        {
          _index: 379,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'useguards(authguard',
        {
          _index: 385,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'useguards(rolesguard',
        {
          _index: 533,
          title: {},
          body: {
            'controllers/DashboardCategoryController.html': {},
            'controllers/DashboardController.html': {},
            'controllers/UserVariableController.html': {},
            'controllers/WidgetController.html': {},
          },
        },
      ],
      [
        'user',
        {
          _index: 272,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'controllers/AuthController.html': {},
            'controllers/DashboardCategoryController.html': {},
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'user?.user_data.tenant.tenant_code',
        {
          _index: 1221,
          title: {},
          body: { 'controllers/OpenSearchController.html': {} },
        },
      ],
      [
        'user?.user_data?.id',
        {
          _index: 565,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'controllers/DashboardController.html': {},
            'controllers/DashboardProfileController.html': {},
            'controllers/OpenSearchController.html': {},
            'controllers/UserVariableController.html': {},
          },
        },
      ],
      [
        'user_data',
        { _index: 428, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'userid',
        {
          _index: 941,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'username',
        {
          _index: 1161,
          title: {},
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'modules/OpenSearchModule.html': {},
          },
        },
      ],
      [
        'userpermissions',
        { _index: 1335, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'userpermissions?.includes(permission',
        { _index: 1341, title: {}, body: { 'guards/RolesGuard.html': {} } },
      ],
      [
        'uservariable',
        {
          _index: 1404,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'uservariable.map((dashboard',
        {
          _index: 1411,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'uservariablecontroller',
        {
          _index: 1346,
          title: { 'controllers/UserVariableController.html': {} },
          body: {
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'uservariablemodule',
        {
          _index: 320,
          title: { 'modules/UserVariableModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'uservariableservice',
        {
          _index: 1363,
          title: { 'injectables/UserVariableService.html': {} },
          body: {
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'using',
        {
          _index: 991,
          title: {},
          body: {
            'interfaces/MappingInput.html': {},
            'modules/OpenSearchModule.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'utc',
        {
          _index: 30,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'controllers/OpenSearchController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'v',
        {
          _index: 856,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'validation',
        {
          _index: 1726,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'value',
        {
          _index: 481,
          title: {},
          body: {
            'injectables/CachingService.html': {},
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardProfileService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/OpenSearchService.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'value_count',
        {
          _index: 203,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'values',
        {
          _index: 1202,
          title: {},
          body: {
            'controllers/OpenSearchController.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'variable',
        {
          _index: 1348,
          title: {},
          body: {
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'variable.controller',
        {
          _index: 1387,
          title: {},
          body: { 'modules/UserVariableModule.html': {} },
        },
      ],
      [
        'variable.controller.ts',
        {
          _index: 1347,
          title: {},
          body: {
            'controllers/UserVariableController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'variable.controller.ts:115',
        {
          _index: 1359,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'variable.controller.ts:128',
        {
          _index: 1353,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'variable.controller.ts:26',
        {
          _index: 1350,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'variable.controller.ts:54',
        {
          _index: 1355,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'variable.controller.ts:61',
        {
          _index: 1357,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'variable.create',
        { _index: 456, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'variable.dto',
        {
          _index: 1362,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'variable.dto.ts',
        {
          _index: 900,
          title: {},
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'variable.modify',
        { _index: 455, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'variable.module',
        { _index: 348, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'variable.module.ts',
        {
          _index: 1386,
          title: {},
          body: { 'modules/UserVariableModule.html': {} },
        },
      ],
      [
        'variable.service',
        {
          _index: 1364,
          title: {},
          body: {
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
          },
        },
      ],
      [
        'variable.service.ts',
        {
          _index: 1388,
          title: {},
          body: {
            'injectables/UserVariableService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'variable.service.ts:10',
        {
          _index: 1393,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'variable.service.ts:19',
        {
          _index: 1400,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'variable.service.ts:34',
        {
          _index: 1395,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'variable.service.ts:45',
        {
          _index: 1397,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'variable.service.ts:56',
        {
          _index: 1399,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'variable.service.ts:7',
        {
          _index: 1391,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'variable.service.ts:71',
        {
          _index: 1402,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'variable.service.ts:86',
        {
          _index: 1394,
          title: {},
          body: { 'injectables/UserVariableService.html': {} },
        },
      ],
      [
        'variable.view',
        { _index: 446, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'variable/dto/user',
        {
          _index: 899,
          title: {},
          body: {
            'interfaces/ICreateUserVariableRequest.html': {},
            'interfaces/IGetUserVariable.html': {},
            'interfaces/IGetUserVariableRequest.html': {},
            'interfaces/IUpdateUserVariableRequest.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'variable/user',
        {
          _index: 347,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'controllers/UserVariableController.html': {},
            'modules/UserVariableModule.html': {},
            'injectables/UserVariableService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'variabledetails',
        {
          _index: 1380,
          title: {},
          body: { 'controllers/UserVariableController.html': {} },
        },
      ],
      [
        'variables',
        {
          _index: 1156,
          title: { 'miscellaneous/variables.html': {} },
          body: {
            'injectables/OpenSearchClientProvider.html': {},
            'controllers/UserVariableController.html': {},
            'injectables/UserVariableService.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'verification',
        {
          _index: 1258,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      ['version', { _index: 1637, title: {}, body: { 'properties.html': {} } }],
      [
        'versioningtype.uri',
        {
          _index: 1668,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['video', { _index: 1587, title: {}, body: { 'index.html': {} } }],
      [
        'view',
        {
          _index: 739,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      ['visit', { _index: 1575, title: {}, body: { 'index.html': {} } }],
      ['visualize', { _index: 1589, title: {}, body: { 'index.html': {} } }],
      [
        'void',
        {
          _index: 791,
          title: {},
          body: {
            'injectables/GrpcService.html': {},
            'interfaces/MappingInput.html': {},
            'injectables/OpenSearchService.html': {},
            'interfaces/Output.html': {},
            'interfaces/ProcessNode.html': {},
          },
        },
      ],
      [
        'w.id',
        {
          _index: 752,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'want',
        {
          _index: 1434,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      ['watch', { _index: 1559, title: {}, body: { 'index.html': {} } }],
      [
        'ways',
        {
          _index: 1652,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['website', { _index: 1625, title: {}, body: { 'index.html': {} } }],
      [
        'whether',
        {
          _index: 1700,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'widget',
        {
          _index: 83,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardService.html': {},
            'injectables/UserVariableService.html': {},
            'controllers/WidgetController.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'widget.controller',
        { _index: 1456, title: {}, body: { 'modules/WidgetModule.html': {} } },
      ],
      [
        'widget.modify',
        { _index: 454, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'widget.service',
        {
          _index: 1430,
          title: {},
          body: {
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
          },
        },
      ],
      [
        'widget.view',
        { _index: 445, title: {}, body: { 'guards/AuthGuard.html': {} } },
      ],
      [
        'widget/widget.module',
        { _index: 349, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'widgetcategory',
        {
          _index: 90,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'widgetcategoryid',
        {
          _index: 79,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'widgetcontroller',
        {
          _index: 1418,
          title: { 'controllers/WidgetController.html': {} },
          body: {
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'widgetdetails',
        {
          _index: 1436,
          title: {},
          body: { 'controllers/WidgetController.html': {} },
        },
      ],
      [
        'widgetmodule',
        {
          _index: 321,
          title: { 'modules/WidgetModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/WidgetModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'widgets',
        {
          _index: 105,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'widgets.items?.find((w',
        {
          _index: 751,
          title: {},
          body: { 'injectables/DashboardService.html': {} },
        },
      ],
      [
        'widgets.map((widget',
        {
          _index: 112,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'widgetservice',
        {
          _index: 67,
          title: { 'injectables/WidgetService.html': {} },
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/DashboardService.html': {},
            'controllers/WidgetController.html': {},
            'modules/WidgetModule.html': {},
            'injectables/WidgetService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'window',
        {
          _index: 227,
          title: {},
          body: {
            'interfaces/Aggregation.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      [
        'within',
        {
          _index: 1650,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'work',
        {
          _index: 1144,
          title: {},
          body: { 'injectables/OpenSearchClientProvider.html': {} },
        },
      ],
      ['working', { _index: 1574, title: {}, body: { 'index.html': {} } }],
      [
        'world',
        { _index: 368, title: {}, body: { 'injectables/AppService.html': {} } },
      ],
      [
        'x',
        {
          _index: 849,
          title: {},
          body: {
            'interfaces/IAuthHeaders.html': {},
            'interfaces/IListEntitiesRequest.html': {},
            'interfaces/IListEntitiesResponse.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'yes',
        {
          _index: 556,
          title: {},
          body: {
            'injectables/DashboardCategoryService.html': {},
            'injectables/DashboardService.html': {},
            'injectables/OpenSearchClientProvider.html': {},
            'injectables/RoleService.html': {},
            'injectables/UserVariableService.html': {},
            'injectables/WidgetService.html': {},
          },
        },
      ],
      ["you'd", { _index: 1618, title: {}, body: { 'index.html': {} } }],
      [
        "you're",
        {
          _index: 1259,
          title: {},
          body: { 'modules/OpenSearchModule.html': {} },
        },
      ],
      [
        "you've",
        {
          _index: 1674,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'zoom',
        {
          _index: 322,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/CachingModule.html': {},
            'modules/DashboardCategoryModule.html': {},
            'modules/DashboardModule.html': {},
            'modules/DashboardProfileModule.html': {},
            'modules/GrpcModule.html': {},
            'modules/OpenSearchModule.html': {},
            'modules/RoleModule.html': {},
            'modules/UserVariableModule.html': {},
            'modules/WidgetModule.html': {},
            'overview.html': {},
          },
        },
      ],
    ],
    pipeline: ['stemmer'],
  },
  store: {
    'interfaces/Aggregation.html': {
      url: 'interfaces/Aggregation.html',
      title: 'interface - Aggregation',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Aggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/widget.service.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/widget/widget.service.ts:18\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Prisma, PrismaService } from '@clean-start-dashboard/database';\nimport { IWidgetConfig } from '@clean-start-dashboard/shared';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport dayjs from 'dayjs';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport { nullToUndefined } from 'src/common/utils';\nimport { OpenSearchService } from 'src/open-search/open-search.service';\nimport { IAggs, IGetQueryDataRequest } from './dto/widget.dto';\n\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\n\ninterface Aggregation {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      time_zone: string;\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: { min: number; max: number };\n      format: string;\n    };\n    aggs?: Aggregation;\n  };\n}\n\n@Injectable()\nexport class WidgetService {\n  private readonly logger = new Logger(WidgetService.name);\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly searchService: OpenSearchService,\n    private readonly configService: ConfigService,\n  ) { }\n\n  public async create(inputs: Prisma.WidgetUncheckedCreateInput) {\n    const { widgetCategoryId, ...rest } = inputs;\n    this.logger.verbose(`--> widget creation started`);\n    const widget = await this.prismaService.widget.create({\n      data: {\n        ...rest,\n        ...(typeof widgetCategoryId === 'string'\n          ? {\n            widgetCategory: {\n              connect: { id: widgetCategoryId },\n            },\n          }\n          : {}),\n      },\n    });\n    this.logger.verbose(`--> widget created`);\n    return widget;\n  }\n\n  public async update(inputs: Prisma.WidgetUncheckedUpdateInput, id: string) {\n    this.logger.verbose(`--> widget updating started`);\n    const { widgetCategoryId, ...rest } = inputs;\n    const widget = await this.prismaService.widget.update({\n      data: {\n        ...rest,\n        ...(typeof widgetCategoryId === 'string'\n          ? {\n            widgetCategory: {\n              connect: { id: widgetCategoryId },\n            },\n          }\n          : {}),\n      },\n      where: { id },\n    });\n    this.logger.verbose(`--> widget updated`);\n    return widget;\n  }\n\n  public async list(query?: any) {\n    this.logger.verbose(`--> widget list started`);\n    const total = await this.prismaService.widget.count({\n      where: query.where,\n    });\n    const widgets = await this.prismaService.widget.findMany({\n      ...query,\n      where: {\n        ...query.where,\n      },\n      include: {\n        widgetCategory: true,\n      },\n    });\n    this.logger.verbose(`--> widget fetched`);\n    // return widgets;\n    return {\n      total: total,\n      items: widgets.map((widget) => nullToUndefined(widget)),\n    };\n  }\n\n  public async getById(id: string) {\n    this.logger.verbose(`--> widget by id started`);\n    const widget = await this.prismaService.widget.findUnique({\n      where: {\n        id,\n      },\n      include: {\n        widgetCategory: true,\n      },\n    });\n    this.logger.verbose(`--> widget fetched`);\n    return widget;\n  }\n\n  public async aggregate(query: IGetQueryDataRequest) {\n    this.logger.verbose(`--> widget get query data started`);\n    // console.log(query);\n\n    const timeBounds = {\n      min: new Date(query.filters.timeBounds.min).getTime(),\n      max: new Date(query.filters.timeBounds.max).getTime(),\n      timezone: dayjs(query.filters.timeBounds.min).tz(query.filters.timeBounds.timezone ?? \"Asia/Calcutta\").format('Z'),\n    };\n\n    console.log(\"timezone\", timeBounds.timezone, \"min\", timeBounds.min, \"max\", timeBounds.max);\n\n\n    const aggregations = await Promise.all(\n      query.config.map((config) =>\n        this.convertToNestedAggs(config, timeBounds, query?.filters?.sort),\n      ),\n    );\n\n    const params: any = [];\n    (await aggregations).map((aggregation) => {\n      params.push({\n        index: this.configService.get('OPENSEARCH_LOG_INDEX') ?? 'esdl-archives*',\n      });\n      params.push({ ...aggregation });\n    });\n\n    const data = this.searchService.aggregateQuery(params);\n    this.logger.verbose(`--> widget fetched`);\n    // return params;\n    return data;\n  }\n\n  //Private functions\n\n  private convertToNestedAggs(\n    input: IWidgetConfig,\n    timeBounds: {\n      timezone?: string; min: number; max: number\n    },\n    sort: { '@timestamp': { order: 'asc'; unmapped_type: 'boolean' } },\n  ): any {\n    let aggs: IAggs = {};\n\n    if (input.aggregation) {\n      aggs = this.updateDateHistogram(\n        input.aggregation,\n        timeBounds.min,\n        timeBounds.max,\n        timeBounds.timezone ?? \"+05:30\",\n      );\n    } else {\n      input.bucketAggs.reduce((acc, item) => {\n        const { field, settings, type } = item;\n        const {\n          min_doc_count,\n          order,\n          orderBy,\n          size,\n          interval,\n          filters,\n          precision,\n        } = settings;\n\n        const createTermsAgg = () => ({\n          terms: {\n            field: field!,\n            size: parseInt(size || '1', 10),\n            order: { [orderBy === '_count' ? '_count' : '_key']: order! },\n            min_doc_count: parseInt(min_doc_count || '0', 10),\n          },\n          aggs: {},\n        });\n\n        const createDateHistogramAgg = () => ({\n          date_histogram: {\n            interval: interval || '1d',\n            field: field!,\n            min_doc_count: parseInt(min_doc_count || '0', 10),\n            timezone: timeBounds.timezone,\n            extended_bounds: {\n              min: timeBounds.min,\n              max: timeBounds.max,\n            },\n            format: 'epoch_millis',\n          },\n          aggs: {},\n        });\n\n        const createFiltersAgg = () => ({\n          filters: {\n            filters: filters!.reduce(\n              (acc, filter) => {\n                acc[filter.label] = {\n                  query_string: { query: filter.query, analyze_wildcard: true },\n                };\n                return acc;\n              },\n              {} as {\n                [key: string]: {\n                  query_string: { query: string; analyze_wildcard: boolean };\n                };\n              },\n            ),\n          },\n          aggs: {},\n        });\n\n        const createGeohashGridAgg = () => ({\n          geohash_grid: {\n            field: field!,\n            precision: parseInt(precision || '0', 10),\n          },\n          aggs: {},\n        });\n\n        const createHistogramAgg = () => ({\n          histogram: {\n            field: field!,\n            interval: parseInt(interval || '0', 10),\n            min_doc_count: parseInt(min_doc_count || '0', 10),\n          },\n          aggs: {},\n        });\n\n        const createAgg = () => {\n          switch (type) {\n            case 'terms':\n              return createTermsAgg();\n            case 'date_histogram':\n              return createDateHistogramAgg();\n            case 'filters':\n              return createFiltersAgg();\n            case 'geohash_grid':\n              return createGeohashGridAgg();\n            case 'histogram':\n              return createHistogramAgg();\n            default:\n              return { aggs: {} };\n          }\n        };\n\n        const agg = createAgg();\n        acc[item.id] = agg;\n\n        return agg.aggs;\n      }, aggs);\n    }\n\n    // input.bucketAggs.forEach((agg, index) => {\n    //   const { id, field, settings, type } = agg;\n    //   const {\n    //     min_doc_count,\n    //     order,\n    //     orderBy,\n    //     size,\n    //     interval,\n    //     filters,\n    //     precision,\n    //   } = settings;\n\n    //   const createTermsAgg = () => ({\n    //     terms: {\n    //       field: field!,\n    //       size: parseInt(size || '1', 10),\n    //       order: { [orderBy === '_count' ? '_count' : '_key']: order! },\n    //       min_doc_count: parseInt(min_doc_count || '0', 10),\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createDateHistogramAgg = () => ({\n    //     date_histogram: {\n    //       interval: interval || '1d',\n    //       field: field!,\n    //       min_doc_count: parseInt(min_doc_count || '0', 10),\n    //       extended_bounds: {\n    //         min: timeBounds.min,\n    //         max: timeBounds.max,\n    //       },\n    //       format: 'epoch_millis',\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createFiltersAgg = () => ({\n    //     filters: {\n    //       filters: filters!.reduce(\n    //         (acc, filter) => {\n    //           acc[filter.label] = {\n    //             query_string: { query: filter.query, analyze_wildcard: true },\n    //           };\n    //           return acc;\n    //         },\n    //         {} as {\n    //           [key: string]: {\n    //             query_string: { query: string; analyze_wildcard: boolean };\n    //           };\n    //         },\n    //       ),\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createGeohashGridAgg = () => ({\n    //     geohash_grid: {\n    //       field: field!,\n    //       precision: parseInt(precision || '0', 10),\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createHistogramAgg = () => ({\n    //     histogram: {\n    //       field: field!,\n    //       interval: parseInt(interval || '0', 10),\n    //       min_doc_count: parseInt(min_doc_count || '0', 10),\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createAgg = () => {\n    //     switch (type) {\n    //       case 'terms':\n    //         return createTermsAgg();\n    //       case 'date_histogram':\n    //         return createDateHistogramAgg();\n    //       case 'filters':\n    //         return createFiltersAgg();\n    //       case 'geohash_grid':\n    //         return createGeohashGridAgg();\n    //       case 'histogram':\n    //         return createHistogramAgg();\n    //       default:\n    //         return { aggs: {} };\n    //     }\n    //   };\n\n    //   const ids = id.split('.');\n    //   let currentAgg = aggs;\n\n    //   const level = index + 1;\n    //   let path;\n\n    //   ids.forEach((currentId, index) => {\n    //     if (!currentAgg[currentId]) {\n    //       currentAgg[currentId] = createAgg();\n    //     }\n    //     if (index  {\n    //   Object.keys(aggs).forEach((key) => {\n    //     if (Object.keys(aggs[key].aggs).length === 0) {\n    //       metrics.forEach((metric) => {\n    //         if (metric.type === 'count') {\n    //           aggs[key].aggs[metric.id] = { value_count: { field: '_index' } };\n    //         } else {\n    //           aggs[key].aggs[metric.id] = {\n    //             [metric.type]: { field: metric.field },\n    //           };\n    //         }\n    //       });\n    //     } else {\n    //       addMetrics(aggs[key].aggs, metrics);\n    //     }\n    //   });\n    // };\n\n    // // addMetrics(aggs, input.metrics);\n\n    // metrics.reduce((acc, metric) => {\n    //   const metricAgg: any = {};\n    //   switch (metric.type) {\n    //     case \"avg\":\n    //     case \"max\":\n    //     case \"min\":\n    //     case \"sum\":\n    //     case \"count\":\n    //       metricAgg[metric.id] = { [metric.type]: { field: metric.field } };\n    //       break;\n\n    //     case \"extended_stats\":\n    //       metricAgg[metric.id] = { extended_stats: { field: metric.field } };\n    //       break;\n\n    //     case \"percentiles\":\n    //       metricAgg[metric.id] = {\n    //         percentiles: { field: metric.field, percents: metric.settings?.percents },\n    //       };\n    //       break;\n\n    //     case \"cardinality\":\n    //       metricAgg[metric.id] = { cardinality: { field: metric.field } };\n    //       break;\n\n    //     case \"moving_avg\":\n    //       metricAgg[metric.id] = {\n    //         moving_avg: {\n    //           buckets_path: metric.field,\n    //           model: metric.settings?.model || \"simple\",\n    //           window: metric.settings?.window || 5,\n    //         },\n    //       };\n    //       break;\n\n    //     case \"moving_fn\":\n    //     case \"derivative\":\n    //     case \"cumulative_sum\":\n    //       metricAgg[metric.id] = { [metric.type]: { buckets_path: metric.field } };\n    //       break;\n    //   }\n\n    //   // Apply metrics to the lowest level aggs\n    //   Object.keys(aggs).forEach((key) => {\n    //     if (!aggs[key].aggs) aggs[key].aggs = {};\n    //     aggs[key].aggs = { ...aggs[key].aggs, ...metricAgg };\n    //   });\n\n    //   return acc;\n    // }, aggs);\n\n    return {\n      size: input.aggregation ? 0 : 1000,\n      query: {\n        bool: {\n          filter: [\n            {\n              range: {\n                [input.timeField]: {\n                  gte: timeBounds.min,\n                  lte: timeBounds.max,\n                  // gte: dayjs(timeBounds.min).tz(timeBounds.timezone ?? \"Asia/Calcutta\").toISOString(),\n                  // lte: dayjs(timeBounds.max).tz(timeBounds.timezone ?? \"Asia/Calcutta\").toISOString(),\n                  format: 'epoch_millis',\n                },\n              },\n            },\n            {\n              query_string: {\n                analyze_wildcard: true,\n                query: input.query,\n              },\n            },\n          ],\n        },\n      },\n      aggs,\n      sort: sort,\n    };\n  }\n\n  updateDateHistogram(\n    aggregation: Aggregation,\n    newMin: number,\n    newMax: number,\n    timezone: string,\n  ): any {\n    const updatedAggregation = { ...aggregation };\n    const traverseAndUpdate = (agg: Aggregation) => {\n      for (const key in agg) {\n        if (agg[key].date_histogram) {\n          agg[key].date_histogram.extended_bounds.min = newMin;\n          agg[key].date_histogram.extended_bounds.max = newMax;\n          agg[key].date_histogram.time_zone = timezone;\n        }\n        if (agg[key].aggs) {\n          traverseAndUpdate(agg[key].aggs);\n        }\n      }\n    };\n    traverseAndUpdate(updatedAggregation);\n    return updatedAggregation;\n  }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/AppController.html': {
      url: 'controllers/AppController.html',
      title: 'controller - AppController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                getUserDetails\n                            \n                            \n                                    \n                                querySearchData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getUserDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserDetails(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('get-user-details')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        querySearchData\n                        \n                    \n                \n            \n            \n                \n                        \n                    querySearchData(data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('query-search-data')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { TypedBody, TypedRoute } from '@nestia/core';\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { GrpcService } from './grpc/grpc.service';\nimport { OpenSearchService } from './open-search/open-search.service';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private searchService: OpenSearchService,\n    private grpcService: GrpcService,\n  ) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @TypedRoute.Post('get-user-details')\n  getUserDetails(@TypedBody() data: { session_id: string }): any {\n    return this.grpcService.getUserDetails(data.session_id);\n  }\n\n  // @TypedRoute.Post('add-search-data')\n  // addSearchData(@TypedBody() data: any): any {\n  //   return this.searchService.singleDataIngestion(data);\n  // }\n\n  @TypedRoute.Post('query-search-data')\n  querySearchData(@TypedBody() data: any): any {\n    return this.searchService.searchByQuery(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/AppModule.html': {
      url: 'modules/AppModule.html',
      title: 'module - AppModule',
      body: "\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCachingModule\n\nCachingModule\n\nAppModule -->\n\nCachingModule->AppModule\n\n\n\n\n\nDashboardCategoryModule\n\nDashboardCategoryModule\n\nAppModule -->\n\nDashboardCategoryModule->AppModule\n\n\n\n\n\nDashboardModule\n\nDashboardModule\n\nAppModule -->\n\nDashboardModule->AppModule\n\n\n\n\n\nDashboardProfileModule\n\nDashboardProfileModule\n\nAppModule -->\n\nDashboardProfileModule->AppModule\n\n\n\n\n\nGrpcModule\n\nGrpcModule\n\nAppModule -->\n\nGrpcModule->AppModule\n\n\n\n\n\nOpenSearchModule\n\nOpenSearchModule\n\nAppModule -->\n\nOpenSearchModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nUserVariableModule\n\nUserVariableModule\n\nAppModule -->\n\nUserVariableModule->AppModule\n\n\n\n\n\nWidgetModule\n\nWidgetModule\n\nAppModule -->\n\nWidgetModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CachingModule\n                        \n                        \n                            DashboardCategoryModule\n                        \n                        \n                            DashboardModule\n                        \n                        \n                            DashboardProfileModule\n                        \n                        \n                            GrpcModule\n                        \n                        \n                            OpenSearchModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserVariableModule\n                        \n                        \n                            WidgetModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { PrismaModule } from '@clean-start-dashboard/database';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { redisStore } from 'cache-manager-redis-yet';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { CachingModule } from './caching/caching.module';\nimport { DashboardCategoryModule } from './dashboard-category/dashboard-category.module';\nimport { DashboardProfileModule } from './dashboard-profile/dashboard-profile.module';\nimport { DashboardModule } from './dashboard/dashboard.module';\nimport { GrpcModule } from './grpc/grpc.module';\nimport { OpenSearchModule } from './open-search/open-search.module';\nimport { RoleModule } from './role/role.module';\nimport { UserVariableModule } from './user-variable/user-variable.module';\nimport { WidgetModule } from './widget/widget.module';\n\n@Module({\n  imports: [\n    OpenSearchModule,\n    RoleModule,\n    AuthModule,\n    ConfigModule.forRoot({ isGlobal: true }),\n    CacheModule.registerAsync({\n      isGlobal: true,\n      inject: [ConfigService],\n\n      useFactory: async (configService) => ({\n        store: await redisStore({\n          socket: {\n            host: configService.get('REDIS_HOST'),\n            port: configService.get('REDIS_PORT'),\n          },\n\n          ttl: 86400000, // milliseconds\n        }),\n      }),\n    }),\n    CachingModule,\n    DashboardCategoryModule,\n    DashboardProfileModule,\n    PrismaModule,\n    DashboardModule,\n    WidgetModule,\n    GrpcModule,\n    UserVariableModule,\n\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/AppService.html': {
      url: 'injectables/AppService.html',
      title: 'injectable - AppService',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return \'Hello World!\';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/AuthController.html': {
      url: 'controllers/AuthController.html',
      title: 'controller - AuthController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                getUserDetails\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUserDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserDetails(user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('get-user-details')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { TypedRoute } from '@nestia/core';\nimport { Controller, UseGuards } from '@nestjs/common';\nimport { User } from 'src/decorators/user.decorator';\nimport { GrpcService } from 'src/grpc/grpc.service';\nimport { AuthGuard } from 'src/guards/auth.guard';\n\n@Controller('auth')\n@UseGuards(AuthGuard)\nexport class AuthController {\n  constructor(private grpcService: GrpcService) { }\n  @TypedRoute.Get('get-user-details')\n  public getUserDetails(@User() user: any): Promise {\n    return user;\n  }\n\n  @TypedRoute.Post('logout')\n  public async logout(@User() user: any): Promise {\n    return this.grpcService.logout(JSON.parse(user.session_id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'guards/AuthGuard.html': {
      url: 'guards/AuthGuard.html',
      title: 'guard - AuthGuard',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(grpcService: GrpcService, roleService: RoleService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        grpcService\n                                                  \n                                                        \n                                                                        GrpcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/auth.guard.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from \'@nestjs/common\';\nimport { from, map, Observable, switchMap } from \'rxjs\';\nimport { GrpcService } from \'src/grpc/grpc.service\';\nimport { RoleService } from \'src/role/role.service\';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private readonly logger = new Logger(AuthGuard.name);\n  constructor(private grpcService: GrpcService, private roleService: RoleService) { }\n\n  canActivate(context: ExecutionContext): Observable {\n    const request = context.switchToHttp().getRequest();\n    const session$ = this.grpcService.getUserDetails(request.headers.session_id);\n\n    return session$.pipe(\n      switchMap((res) => {\n        if (!res.status) {\n          this.logger.error(\'Unauthorized\' + JSON.stringify(res));\n          throw new UnauthorizedException(\'Session expired\');\n        }\n\n        const responseData = JSON.parse(res.response_data)?.data;\n\n        // if (responseData?.user_data?.idp_data) {\n        //   request[\'user\'] = {\n        //     ...responseData,\n        //     user_data: {\n        //       idp_data: responseData?.user_data?.idp_data,\n        //       ...responseData?.user_data?.session_response,\n        //     },\n        //   };\n        //   this.logger.log(\'User Authenticated\');\n        //   return from([true]); // Observable boolean\n        // }\n\n        console.log(responseData?.user_data?.roles);\n\n\n        return from(this.roleService.getByName(responseData?.user_data?.roles?.role_id)).pipe(\n          map((role) => {\n            request[\'user\'] = {\n              ...responseData, role: role ?? {\n                "id": "67ed072c6eb8ca8d73680464",\n                "name": "moderator",\n                "description": null,\n                "permissions": [\n                  "dashboard.view",\n                  "category.view",\n                  "widget.view",\n                  "variable.view",\n                  "search.view",\n                  "alert.view",\n                  "dashboard.modify",\n                  "dashboard.delete",\n                  "dashboard.create",\n                  "category.modify",\n                  "category.create",\n                  "widget.modify",\n                  "variable.modify",\n                  "variable.create"\n                ],\n                "createdAt": "2025-04-02T09:45:16.933Z",\n                "updatedAt": "2025-04-15T11:36:02.965Z"\n              }\n            };\n            this.logger.log(\'User Authenticated\');\n            return true;\n          })\n        );\n      })\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/AuthModule.html': {
      url: 'modules/AuthModule.html',
      title: 'module - AuthModule',
      body: '\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { AuthController } from \'./auth.controller\';\n\n@Module({\n  controllers: [AuthController],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/CachingModule.html': {
      url: 'modules/CachingModule.html',
      title: 'module - CachingModule',
      body: '\n                   \n\n\n\n\n    Modules\n    CachingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CachingModule\n\n\n\ncluster_CachingModule_exports\n\n\n\ncluster_CachingModule_providers\n\n\n\n\nCachingService \n\nCachingService \n\n\n\nCachingModule\n\nCachingModule\n\nCachingService  -->\n\nCachingModule->CachingService \n\n\n\n\n\nCachingService\n\nCachingService\n\nCachingModule -->\n\nCachingService->CachingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/caching/caching.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CachingService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CachingService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { CachingService } from \'./caching.service\';\n\n@Module({\n  providers: [CachingService],\n  exports: [CachingService],\n})\nexport class CachingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/CachingService.html': {
      url: 'injectables/CachingService.html',
      title: 'injectable - CachingService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CachingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/caching/caching.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCacheByQuery\n                            \n                            \n                                    Async\n                                setCacheByQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/caching/caching.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCacheByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCacheByQuery(query: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/caching/caching.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setCacheByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCacheByQuery(query: any, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/caching/caching.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CachingService.name)\n                    \n                \n                    \n                        \n                                Defined in src/caching/caching.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport class CachingService {\n  private readonly logger = new Logger(CachingService.name);\n  public constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n\n  async getCacheByQuery(query: any): Promise {\n    const { default: bencode } = await import('bencode');\n    this.logger.log(`Getting data from redis cache`);\n    const encodedKey = bencode.encode(query).toString().replace(' ', '');\n    this.logger.log(`Getting data from redis cache for ${encodedKey}`);\n    const value = await this.cacheManager.get(encodedKey);\n    if (value) {\n      this.logger.log(`Returning data from redis cache`);\n\n      return JSON.parse(value as string);\n    } else {\n      this.logger.log(`Data not available in cache`);\n      return null;\n    }\n  }\n\n  async setCacheByQuery(query: any, data: any): Promise {\n    const { default: bencode } = await import('bencode');\n    this.logger.log(`Saving data to redis cache`);\n    const encodedKey = bencode.encode(query).toString().replace(' ', '');\n    this.logger.log(`Stringifying data`);\n    const stringifiedData = JSON.stringify(data);\n    this.logger.log(`Data stringified`);\n    this.logger.log(`Data Saving to redis cache`);\n    return this.cacheManager.set(encodedKey, stringifiedData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/DashboardCategoryController.html': {
      url: 'controllers/DashboardCategoryController.html',
      title: 'controller - DashboardCategoryController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  DashboardCategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-category/dashboard-category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                dashboard-category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                list\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: ICreateDashboardCategoryRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['category.create'])@('create')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard-category/dashboard-category.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            ICreateDashboardCategoryRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(user: any, query: IGetDashboardCategoryRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['category.view'])@('get')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard-category/dashboard-category.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                            IGetDashboardCategoryRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(inputs: IListEntitiesRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['category.view'])@('list')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard-category/dashboard-category.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IListEntitiesRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PrismaClient } from '.prisma/client';\nimport { IDashboardCategory } from '@clean-start-dashboard/shared';\nimport { TypedBody, TypedQuery, TypedRoute } from '@nestia/core';\nimport { Controller, UseGuards } from '@nestjs/common';\nimport { IListEntitiesRequest, IListEntitiesResponse } from 'src/common/dtos';\nimport { listRequestToFindManyArgs } from 'src/common/utils';\nimport { Permissions } from 'src/decorators/permission.decorator';\nimport { User } from 'src/decorators/user.decorator';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { RolesGuard } from 'src/guards/permissions.guard';\nimport { DashboardCategoryService } from './dashboard-category.service';\nimport {\n  ICreateDashboardCategoryRequest,\n  IGetDashboardCategoryRequest,\n} from './dto/dashboard-category.dto';\n\n@Controller('dashboard-category')\n@UseGuards(RolesGuard)\n@UseGuards(AuthGuard)\nexport class DashboardCategoryController {\n  constructor(\n    private readonly dashboardCategoryService: DashboardCategoryService,\n  ) { }\n\n  @Permissions(['category.create'])\n  @TypedRoute.Post('create')\n  public async create(\n    @TypedBody() inputs: ICreateDashboardCategoryRequest,\n  ): Promise {\n    return await this.dashboardCategoryService.create({\n      ...inputs,\n    });\n  }\n\n  @Permissions(['category.view'])\n  @TypedRoute.Post('list')\n  public async list(\n    @TypedBody() inputs: IListEntitiesRequest,\n    @User() user: any,\n  ): Promise> {\n    const params = listRequestToFindManyArgs(inputs, ['name']);\n    return await this.dashboardCategoryService.list(user, params ?? {});\n  }\n\n  @Permissions(['category.view'])\n  @TypedRoute.Get('get')\n  public async get(\n    @User() user: any,\n    @TypedQuery() query: IGetDashboardCategoryRequest,\n  ): Promise {\n    return await this.dashboardCategoryService.getById(query.id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/DashboardCategoryModule.html': {
      url: 'modules/DashboardCategoryModule.html',
      title: 'module - DashboardCategoryModule',
      body: "\n                   \n\n\n\n\n    Modules\n    DashboardCategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DashboardCategoryModule\n\n\n\ncluster_DashboardCategoryModule_providers\n\n\n\n\nDashboardCategoryService\n\nDashboardCategoryService\n\n\n\nDashboardCategoryModule\n\nDashboardCategoryModule\n\nDashboardCategoryModule -->\n\nDashboardCategoryService->DashboardCategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dashboard-category/dashboard-category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DashboardCategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DashboardCategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DashboardCategoryController } from './dashboard-category.controller';\nimport { DashboardCategoryService } from './dashboard-category.service';\n\n@Module({\n\n  providers: [DashboardCategoryService],\n  controllers: [DashboardCategoryController],\n})\nexport class DashboardCategoryModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/DashboardCategoryService.html': {
      url: 'injectables/DashboardCategoryService.html',
      title: 'injectable - DashboardCategoryService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardCategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-category/dashboard-category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                list\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/dashboard-category/dashboard-category.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: Prisma.DashboardCategoryCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard-category/dashboard-category.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.DashboardCategoryCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string, user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard-category/dashboard-category.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(user: any, query?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard-category/dashboard-category.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DashboardCategoryService.name)\n                    \n                \n                    \n                        \n                                Defined in src/dashboard-category/dashboard-category.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Prisma, PrismaService } from '@clean-start-dashboard/database';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { nullToUndefined } from 'src/common/utils';\n\n@Injectable()\nexport class DashboardCategoryService {\n  private readonly logger = new Logger(DashboardCategoryService.name);\n  constructor(private readonly prismaService: PrismaService) { }\n\n  public async create(inputs: Prisma.DashboardCategoryCreateInput) {\n    this.logger.verbose(`--> dashboard category creation started`);\n    const dashboardCategory = await this.prismaService.dashboardCategory.create(\n      {\n        data: inputs,\n      },\n    );\n    this.logger.verbose(`--> dashboard category created`);\n    return dashboardCategory;\n  }\n\n  public async list(user: any, query?: any) {\n    this.logger.verbose(`--> dashboard categories list started`);\n\n    const total = await this.prismaService.dashboardCategory.count({\n      where: query.where,\n    });\n    const dashboardCategory =\n      await this.prismaService.dashboardCategory.findMany({\n        ...query,\n        where: {\n          ...query.where,\n        },\n        include: {\n          dashboards: {\n            where: {\n              OR: [\n                {\n                  ownerId: user?.user_data?.id,\n                },\n                {\n                  isPublic: true,\n                },\n                {\n                  parentId: {\n                    isSet: false\n                  }\n                }\n              ],\n            },\n          },\n        },\n      });\n    this.logger.verbose(`--> dashboard categories fetched`);\n    return {\n      total: total,\n      items: dashboardCategory.map((dashboard) => nullToUndefined(dashboard)),\n    };\n  }\n\n  public async getById(id: string, user: any) {\n    this.logger.verbose(`--> dashboard category by id started`);\n    const dashboardCategory =\n      await this.prismaService.dashboardCategory.findUnique({\n        where: {\n          id,\n        },\n        include: {\n          dashboards: {\n            where: {\n              OR: [\n                {\n                  ownerId: user?.user_data?.id,\n                },\n                {\n                  isPublic: true,\n                },\n                {\n                  parentId: {\n                    isSet: false\n                  }\n                }\n              ],\n            },\n          },\n        },\n      });\n    this.logger.verbose(`--> dashboard category fetched`);\n    return dashboardCategory;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/DashboardController.html': {
      url: 'controllers/DashboardController.html',
      title: 'controller - DashboardController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  DashboardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dashboard.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                dashboard\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                clone\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                list\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                listThreatIntel\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        clone\n                        \n                    \n                \n            \n            \n                \n                        \n                    clone(inputs: IUpdateDashboardRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('clone')@Permissions(['dashboard.create'])\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IUpdateDashboardRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: ICreateDashboardRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('create')@Permissions(['dashboard.create'])\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            ICreateDashboardRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(query: IGetDashboardRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('delete')@Permissions(['dashboard.delete'])\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetDashboardRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(query: IGetDashboardRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('get')@Permissions(['dashboard.view'])\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetDashboardRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(inputs: IListEntitiesRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('list')@Permissions(['dashboard.view'])\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IListEntitiesRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        listThreatIntel\n                        \n                    \n                \n            \n            \n                \n                        \n                    listThreatIntel(inputs: IListEntitiesRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('list/threat-intel')@Permissions(['dashboard.view'])\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IListEntitiesRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: IUpdateDashboardRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('update')@Permissions(['dashboard.modify'])\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IUpdateDashboardRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PrismaClient } from '.prisma/client';\nimport { IDashboard } from '@clean-start-dashboard/shared';\nimport { TypedBody, TypedQuery, TypedRoute } from '@nestia/core';\nimport { Controller, UseGuards } from '@nestjs/common';\nimport { IListEntitiesRequest, IListEntitiesResponse } from 'src/common/dtos';\nimport { listRequestToFindManyArgs } from 'src/common/utils';\nimport { Permissions } from 'src/decorators/permission.decorator';\nimport { User } from 'src/decorators/user.decorator';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { RolesGuard } from 'src/guards/permissions.guard';\nimport { DashboardService } from './dashboard.service';\nimport {\n  ICreateDashboardRequest,\n  IGetDashboardRequest,\n  IUpdateDashboardRequest,\n} from './dto/dashboard.dto';\n\n@Controller('dashboard')\n@UseGuards(RolesGuard)\n@UseGuards(AuthGuard)\nexport class DashboardController {\n  constructor(private readonly dashboardService: DashboardService) { }\n\n  @TypedRoute.Post('create')\n  @Permissions(['dashboard.create'])\n  public async create(\n    @TypedBody() inputs: ICreateDashboardRequest,\n    @User() user: any,\n  ): Promise {\n    return await this.dashboardService.create({\n      ...inputs,\n      ownerId: user?.user_data?.id,\n      isPublic: false,\n    });\n  }\n\n  @TypedRoute.Post('list')\n  @Permissions(['dashboard.view'])\n  public async list(\n    @TypedBody() inputs: IListEntitiesRequest,\n    @User() user: any,\n  ): Promise> {\n    const params = listRequestToFindManyArgs(inputs, ['name']);\n\n    return await this.dashboardService.list(\n      params\n        ? {\n          ...params,\n          where: {\n            ...params.where,\n            AND: [\n              ...((params.where?.AND as any[]) ?? []),\n              {\n                OR: [\n                  {\n                    ownerId: user?.user_data?.id,\n                  },\n                  {\n                    isPublic: true,\n                  },\n                ],\n              },\n            ],\n          },\n        }\n        : {\n          where: {\n            OR: [\n              {\n                ownerId: user?.user_data?.id,\n              },\n              {\n                isPublic: true,\n              },\n            ],\n          },\n        },\n    );\n  }\n\n  @TypedRoute.Post('list/threat-intel')\n  @Permissions(['dashboard.view'])\n  public async listThreatIntel(\n    @TypedBody() inputs: IListEntitiesRequest,\n    @User() user: any,\n  ): Promise> {\n    const params = listRequestToFindManyArgs(inputs, ['name']);\n\n    return await this.dashboardService.list(\n      params\n        ? {\n          ...params,\n          where: {\n            ...params.where,\n            dashboardCategory: {\n              is: {\n                name: \"Threat Intelligence\"\n              }\n            },\n            AND: [\n              ...((params.where?.AND as any[]) ?? []),\n\n              {\n                OR: [\n                  {\n                    ownerId: user?.user_data?.id,\n                  },\n                  {\n                    isPublic: true,\n                  },\n                ],\n              },\n            ],\n          },\n        }\n        : {\n          where: {\n            OR: [\n              {\n                ownerId: user?.user_data?.id,\n              },\n              {\n                isPublic: true,\n              },\n            ],\n          },\n        },\n    );\n  }\n\n  @TypedRoute.Get('get')\n  @Permissions(['dashboard.view'])\n  public async get(@TypedQuery() query: IGetDashboardRequest): Promise {\n    return await this.dashboardService.getById(query.id);\n  }\n\n  @TypedRoute.Post('update')\n  @Permissions(['dashboard.modify'])\n  public async update(\n    @TypedBody() inputs: IUpdateDashboardRequest,\n  ): Promise {\n    const { id, ...dashboardDetails } = inputs;\n    return await this.dashboardService.update({ ...dashboardDetails }, id);\n  }\n\n  @TypedRoute.Post('clone')\n  @Permissions(['dashboard.create'])\n  public async clone(\n    @TypedBody() inputs: IUpdateDashboardRequest,\n  ): Promise {\n    const { id, ...dashboardDetails } = inputs;\n    return await this.dashboardService.clone(\n      { ...dashboardDetails, isPublic: false },\n      id,\n    );\n  }\n\n  @TypedRoute.Delete('delete')\n  @Permissions(['dashboard.delete'])\n  public async delete(@TypedQuery() query: IGetDashboardRequest): Promise {\n    return await this.dashboardService.delete(query.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/DashboardModule.html': {
      url: 'modules/DashboardModule.html',
      title: 'module - DashboardModule',
      body: "\n                   \n\n\n\n\n    Modules\n    DashboardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DashboardModule\n\n\n\ncluster_DashboardModule_imports\n\n\n\ncluster_DashboardModule_providers\n\n\n\n\nWidgetModule\n\nWidgetModule\n\n\n\nDashboardModule\n\nDashboardModule\n\nDashboardModule -->\n\nWidgetModule->DashboardModule\n\n\n\n\n\nDashboardService\n\nDashboardService\n\nDashboardModule -->\n\nDashboardService->DashboardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dashboard/dashboard.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DashboardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DashboardController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            WidgetModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { WidgetModule } from 'src/widget/widget.module';\nimport { DashboardController } from './dashboard.controller';\nimport { DashboardService } from './dashboard.service';\n\n@Module({\n  imports: [WidgetModule],\n  providers: [DashboardService],\n  controllers: [DashboardController],\n})\nexport class DashboardModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/DashboardProfileController.html': {
      url: 'controllers/DashboardProfileController.html',
      title: 'controller - DashboardProfileController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  DashboardProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-profile/dashboard-profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                dashboard-profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                addToFavourite\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                removeFromFavourite\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                setDefaultDashboard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        addToFavourite\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToFavourite(inputs: IAddToFavouriteRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('favourite/add')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard-profile/dashboard-profile.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IAddToFavouriteRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('get')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard-profile/dashboard-profile.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        removeFromFavourite\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromFavourite(inputs: IAddToFavouriteRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('favourite/remove')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard-profile/dashboard-profile.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IAddToFavouriteRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        setDefaultDashboard\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDefaultDashboard(inputs: ISetDefaultDashbordRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('set-default-dashboard')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard-profile/dashboard-profile.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            ISetDefaultDashbordRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { IDashboardProfile } from '@clean-start-dashboard/shared';\nimport { TypedBody, TypedRoute } from '@nestia/core';\nimport { Controller, UseGuards } from '@nestjs/common';\nimport { User } from 'src/decorators/user.decorator';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { DashboardProfileService } from './dashboard-profile.service';\nimport {\n  IAddToFavouriteRequest,\n  ISetDefaultDashbordRequest,\n} from './dto/dashboard-profile.dto';\n\n@Controller('dashboard-profile')\n@UseGuards(AuthGuard)\nexport class DashboardProfileController {\n  constructor(\n    private readonly dashboardProfileService: DashboardProfileService,\n  ) { }\n\n  @TypedRoute.Get('get')\n  public async get(@User() user: any): Promise {\n    const profile = await this.dashboardProfileService.getById(\n      user?.user_data?.id,\n    );\n\n    if (profile?.id) {\n      return { ...profile, user };\n    } else {\n      const created = await this.dashboardProfileService.create({\n        id: user?.user_data?.id,\n        favouriteDashboardIds: [], // Initialize with empty array\n      });\n\n      return { ...created, user };\n    }\n  }\n\n  @TypedRoute.Post('set-default-dashboard')\n  public async setDefaultDashboard(\n    @TypedBody() inputs: ISetDefaultDashbordRequest,\n    @User() user: any,\n  ): Promise {\n    return await this.dashboardProfileService.update(\n      { defaultDashboardId: inputs.dashboardId },\n      user?.user_data?.id,\n    );\n  }\n\n  @TypedRoute.Post('favourite/add')\n  public async addToFavourite(\n    @TypedBody() inputs: IAddToFavouriteRequest,\n    @User() user: any,\n  ): Promise {\n    const profile = await this.dashboardProfileService.getById(\n      user?.user_data?.id,\n    );\n\n    // Initialize with empty array if not exists\n    const currentFavorites = profile?.favouriteDashboardIds || [];\n\n    // Only add if not already in favorites\n    if (!currentFavorites.includes(inputs.dashboardId)) {\n      return await this.dashboardProfileService.update(\n        { favouriteDashboardIds: [...currentFavorites, inputs.dashboardId] },\n        user?.user_data?.id,\n      );\n    }\n\n    return profile;\n  }\n\n  @TypedRoute.Post('favourite/remove')\n  public async removeFromFavourite(\n    @TypedBody() inputs: IAddToFavouriteRequest,\n    @User() user: any,\n  ): Promise {\n    const profile = await this.dashboardProfileService.getById(\n      user?.user_data?.id,\n    );\n\n    // Initialize with empty array if not exists\n    const currentFavorites = profile?.favouriteDashboardIds || [];\n\n    // Remove the dashboard ID from favorites\n    const newFavorites = currentFavorites.filter(id => id !== inputs.dashboardId);\n\n    return await this.dashboardProfileService.update(\n      { favouriteDashboardIds: newFavorites },\n      user?.user_data?.id,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/DashboardProfileModule.html': {
      url: 'modules/DashboardProfileModule.html',
      title: 'module - DashboardProfileModule',
      body: "\n                   \n\n\n\n\n    Modules\n    DashboardProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DashboardProfileModule\n\n\n\ncluster_DashboardProfileModule_providers\n\n\n\n\nDashboardProfileService\n\nDashboardProfileService\n\n\n\nDashboardProfileModule\n\nDashboardProfileModule\n\nDashboardProfileModule -->\n\nDashboardProfileService->DashboardProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dashboard-profile/dashboard-profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DashboardProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DashboardProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DashboardProfileController } from './dashboard-profile.controller';\nimport { DashboardProfileService } from './dashboard-profile.service';\n\n@Module({\n  providers: [DashboardProfileService],\n  controllers: [DashboardProfileController],\n})\nexport class DashboardProfileModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/DashboardProfileService.html': {
      url: 'injectables/DashboardProfileService.html',
      title: 'injectable - DashboardProfileService',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-profile/dashboard-profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Private\n                                    Async\n                                populateFavourites\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/dashboard-profile/dashboard-profile.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: Prisma.DashboardProfileUncheckedCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard-profile/dashboard-profile.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.DashboardProfileUncheckedCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard-profile/dashboard-profile.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        populateFavourites\n                        \n                    \n                \n            \n            \n                \n                        \n                    populateFavourites(ids: string[], profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard-profile/dashboard-profile.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: Prisma.DashboardProfileUncheckedUpdateInput, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard-profile/dashboard-profile.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.DashboardProfileUncheckedUpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DashboardProfileService.name)\n                    \n                \n                    \n                        \n                                Defined in src/dashboard-profile/dashboard-profile.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Prisma, PrismaService } from \'@clean-start-dashboard/database\';\nimport { Injectable, Logger } from \'@nestjs/common\';\n\n@Injectable()\nexport class DashboardProfileService {\n  private readonly logger = new Logger(DashboardProfileService.name);\n  constructor(private readonly prismaService: PrismaService) { }\n\n\n  public async create(inputs: Prisma.DashboardProfileUncheckedCreateInput) {\n    this.logger.verbose(`--> Profile creation started`);\n    const profile = await this.prismaService.dashboardProfile.create({\n      data: {\n        ...inputs,\n      },\n    });\n    this.logger.verbose(`--> Profile created`);\n    return profile;\n  }\n\n  public async getById(id: string) {\n    this.logger.verbose(`--> profile by id started`);\n    const profile = await this.prismaService.dashboardProfile.findUnique({\n      where: {\n        id,\n      },\n    });\n    this.logger.verbose(`--> profile fetched`);\n    return this.populateFavourites(profile?.favouriteDashboardIds || [], profile);\n  }\n\n  public async update(\n    inputs: Prisma.DashboardProfileUncheckedUpdateInput,\n    id: string,\n  ) {\n    this.logger.verbose(`--> Dashboard profile updating started`);\n    const dashboardProfile = await this.prismaService.dashboardProfile.update({\n      data: inputs,\n      where: { id },\n    });\n    this.logger.verbose(`--> Dashboard profile updated`);\n    return dashboardProfile;\n  }\n\n  private async populateFavourites(ids: string[], profile) {\n    this.logger.verbose(`--> Populating favourites started`);\n    const dashboards = await this.prismaService.dashboard.findMany({\n      where: {\n        id: {\n          in: ids,\n        },\n      },\n    });\n    this.logger.verbose(`--> Populating favourites completed`);\n    return { ...profile, favouriteDashboards: dashboards };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/DashboardService.html': {
      url: 'injectables/DashboardService.html',
      title: 'injectable - DashboardService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dashboard.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                clone\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                list\n                            \n                            \n                                    Private\n                                    Async\n                                populateWidget\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, widgetService: WidgetService)\n                    \n                \n                        \n                            \n                                Defined in src/dashboard/dashboard.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        widgetService\n                                                  \n                                                        \n                                                                        WidgetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        clone\n                        \n                    \n                \n            \n            \n                \n                        \n                    clone(inputs: Prisma.DashboardUncheckedUpdateInput, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.DashboardUncheckedUpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: Prisma.DashboardUncheckedCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.DashboardUncheckedCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(query?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        populateWidget\n                        \n                    \n                \n            \n            \n                \n                        \n                    populateWidget(elements: IDashboardElement[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elements\n                                            \n                                                        IDashboardElement[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: Prisma.DashboardUncheckedUpdateInput, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.DashboardUncheckedUpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DashboardService.name)\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dashboard.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Prisma, PrismaService } from '@clean-start-dashboard/database';\nimport { IDashboardElement } from '@clean-start-dashboard/shared';\nimport { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { nullToUndefined } from 'src/common/utils';\nimport { WidgetService } from 'src/widget/widget.service';\n\n@Injectable()\nexport class DashboardService {\n  private readonly logger = new Logger(DashboardService.name);\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly widgetService: WidgetService,\n  ) { }\n\n  public async create(inputs: Prisma.DashboardUncheckedCreateInput) {\n    const { dashboardCategoryId, parentId, ...rest } = inputs;\n    this.logger.verbose(`--> dashboard creation started`);\n    const dashboard = await this.prismaService.dashboard.create({\n      data: {\n        ...rest,\n        ...(dashboardCategoryId\n          ? {\n            dashboardCategory: {\n              connect: { id: dashboardCategoryId },\n            },\n\n          }\n          : {}),\n        ...(parentId\n          ? {\n            parent: {\n              connect: { id: parentId },\n            },\n          }\n          : {}),\n      },\n    });\n    this.logger.verbose(`--> dashboard created`);\n    return dashboard;\n  }\n\n  public async clone(inputs: Prisma.DashboardUncheckedUpdateInput, id: string) {\n    this.logger.verbose(`--> dashboard updating started`);\n    const dashboard = await this.prismaService.dashboard.findUnique({\n      where: { id },\n    });\n    if (dashboard?.id) {\n      const { id: dashboardId, ...rest } = dashboard;\n      this.logger.verbose(`--> dashboard ${dashboardId} details fetched`);\n      const clonedDashboard = await this.prismaService.dashboard.create({\n        data: {\n          ...rest,\n          name: inputs.name as string,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        },\n      });\n      this.logger.verbose(`--> dashboard cloned`);\n      return clonedDashboard;\n    } else {\n      throw new NotFoundException('Dashboard not found');\n    }\n  }\n\n  public async update(\n    inputs: Prisma.DashboardUncheckedUpdateInput,\n    id: string,\n  ) {\n    this.logger.verbose(`--> dashboard updating started`);\n    const dashboard = await this.prismaService.dashboard.update({\n      data: inputs,\n      where: { id },\n    });\n    this.logger.verbose(`--> dashboard updated`);\n    return dashboard;\n  }\n\n  public async list(query?: any) {\n    this.logger.verbose(`--> dashboard list started`);\n    const total = await this.prismaService.dashboard.count({\n      where: query.where,\n    });\n    const dashboards = await this.prismaService.dashboard.findMany({\n      ...query,\n      where: {\n        ...query.where,\n        parentId: {\n          isSet: false,  // Keep this to only show parent dashboards in manage view\n        },\n      },\n      include: {\n        dashboardCategory: true,\n        children: true,\n      },\n    });\n    this.logger.verbose(`--> dashboard fetched`);\n    return {\n      total: total,\n      items: dashboards.map((dashboard) => nullToUndefined(dashboard)),\n    };\n  }\n  \n\n  public async getById(id: string) {\n    this.logger.verbose(`--> dashboard by id started`);\n    const dashboard = await this.prismaService.dashboard.findUnique({\n      where: {\n        id,\n      },\n      include: {\n        children: true,\n      },\n    });\n    this.logger.verbose(`--> dashboard fetched`);\n    this.logger.verbose(`--> Populating widgets`);\n    const elements = await this.populateWidget(dashboard?.elements ?? []);\n\n    return { ...dashboard, elements };\n  }\n\n  public async delete(id: string) {\n    this.logger.verbose(`--> dashboard deletion started`);\n    const dashboard = await this.prismaService.dashboard.delete({\n      where: {\n        id,\n      },\n    });\n    this.logger.verbose(`--> dashboard deleted`);\n\n    return dashboard;\n  }\n\n  //Private Functions\n\n  private async populateWidget(elements: IDashboardElement[]) {\n    if (elements.length) {\n      const widgets = await this.widgetService.list({});\n      const populatedElements = await Promise.all(\n        elements.map((el) => ({\n          ...el,\n          widget: widgets.items?.find((w) => w.id === el.widgetId),\n        })),\n      );\n\n      return populatedElements;\n    } else {\n      return elements;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/GrpcModule.html': {
      url: 'modules/GrpcModule.html',
      title: 'module - GrpcModule',
      body: "\n                   \n\n\n\n\n    Modules\n    GrpcModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GrpcModule\n\n\n\ncluster_GrpcModule_exports\n\n\n\ncluster_GrpcModule_providers\n\n\n\n\nGrpcService \n\nGrpcService \n\n\n\nGrpcModule\n\nGrpcModule\n\nGrpcService  -->\n\nGrpcModule->GrpcService \n\n\n\n\n\nGrpcService\n\nGrpcService\n\nGrpcModule -->\n\nGrpcService->GrpcModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/grpc/grpc.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GrpcService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GrpcService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { join } from 'path';\nimport { GrpcService } from './grpc.service';\n\n@Global()\n@Module({\n  imports: [\n    ConfigModule,\n    ClientsModule.registerAsync([\n      {\n        imports: [ConfigModule],\n        name: 'IAM',\n        useFactory: async (configService: ConfigService) => ({\n          transport: Transport.GRPC,\n          options: {\n            url: configService.get('GRPC_URL'),\n            package: 'interface',\n            protoPath: join(__dirname, 'proto', 'iam/interface.proto'),\n            loader: {\n              keepCase: true,\n            },\n          },\n        }),\n        inject: [ConfigService],\n      },\n    ]),\n\n    // ClientsModule.register([\n    //   {\n    //     name: 'IAM',\n    //     transport: Transport.GRPC,\n    //     options: {\n    //       url: '155.248.243.157:50052',\n    //       package: 'interface',\n    //       protoPath: join(__dirname, 'proto', 'iam/interface.proto'),\n    //       loader: {\n    //         keepCase: true,\n    //       },\n    //     },\n    //   },\n    // ]),\n  ],\n  providers: [GrpcService],\n  exports: [GrpcService],\n})\nexport class GrpcModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/GrpcService.html': {
      url: 'injectables/GrpcService.html',
      title: 'injectable - GrpcService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GrpcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc/grpc.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                interfaceService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getUserDetails\n                            \n                            \n                                logout\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientGrpc, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/grpc/grpc.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientGrpc\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getUserDetails\n                        \n                    \n                \n            \n            \n                \ngetUserDetails(session_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/grpc/grpc.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(session_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/grpc/grpc.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/grpc/grpc.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        interfaceService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InterfaceService\n\n                    \n                \n                    \n                        \n                                Defined in src/grpc/grpc.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Metadata } from '@grpc/grpc-js';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ClientGrpc } from '@nestjs/microservices';\nimport { Observable } from 'rxjs';\n\ninterface InterfaceService {\n  SendRequest(data: {\n    app_id: string;\n    resource_path: string;\n    request_data: any;\n  }, metadata: any): Observable;\n}\n\ninterface InterfaceResponse {\n  status: boolean; // Indicates if the request was successful or not (true for success, false for failure).\n  message: string; // Optional message giving more context about the response (e.g., error details, success message).\n  response_data: string;\n}\n\n@Injectable()\nexport class GrpcService {\n  private interfaceService: InterfaceService;\n\n  constructor(@Inject('IAM') private client: ClientGrpc, private configService: ConfigService) { }\n\n  onModuleInit() {\n    this.interfaceService =\n      this.client.getService('InterfaceService');\n  }\n\n  getUserDetails(session_id: string): Observable {\n\n    // Configure metadata with app_id and auth_key\n    const metadata = new Metadata();\n    metadata.add('app_id', this.configService.get('GRPC_APP_ID') ?? \"\");\n    metadata.add('auth_key', this.configService.get('GRPC_AUTH_KEY') ?? \"\");\n\n    // Added metadata to the request\n    return this.interfaceService.SendRequest({\n      app_id: this.configService.get('GRPC_APP_ID') ?? \"\",\n      resource_path: 'get_user_detail',\n      request_data: JSON.stringify({\n        session_id: session_id,\n      }),\n    }, metadata);\n\n    // \"{\\\"session_id\\\": \\\"50a42b6f-353c-46ef-b191-362206ac00a4\\\",}\"\n  }\n\n  logout(session_id: string): Observable {\n\n    // Configure metadata with app_id and auth_key\n    const metadata = new Metadata();\n    metadata.add('app_id', this.configService.get('GRPC_APP_ID') ?? \"\");\n    metadata.add('auth_key', this.configService.get('GRPC_AUTH_KEY') ?? \"\");\n\n    // Added metadata to the request\n    return this.interfaceService.SendRequest({\n      app_id: this.configService.get('GRPC_APP_ID') ?? \"\",\n      resource_path: 'logout',\n      request_data: JSON.stringify({\n        session_id: session_id,\n      }),\n    }, metadata);\n\n    // \"{\\\"session_id\\\": \\\"50a42b6f-353c-46ef-b191-362206ac00a4\\\",}\"\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/IAddToFavouriteRequest.html': {
      url: 'interfaces/IAddToFavouriteRequest.html',
      title: 'interface - IAddToFavouriteRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAddToFavouriteRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-profile/dto/dashboard-profile.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dashboardId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dashboardId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dashboardId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDashboardProfile } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboardProfile extends IDashboardProfile {}\n\nexport interface ISetDefaultDashbordRequest {\n  dashboardId: string;\n}\n\nexport interface IAddToFavouriteRequest {\n  dashboardId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IAggs.html': {
      url: 'interfaces/IAggs.html',
      title: 'interface - IAggs',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAggs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/dto/widget.dto.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/widget/dto/widget.dto.ts:39\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { IWidget, IWidgetConfig } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetWidget extends IWidget { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetWidgetRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetQueryDataRequest {\n  filters: IGetQueryDataFilter;\n  config: IWidgetConfig[];\n}\n\nexport interface IGetQueryDataFilter {\n  timeBounds: {\n    min: string;\n    max: string;\n    timezone?: string;\n  };\n  query: string;\n  queryJson?: any;\n  aggs?: any;\n  size?: number;\n  sort?: any;\n}\n\nexport interface IAggs {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: {\n        min: number;\n        max: number;\n      };\n      format: string;\n    };\n    filters?: {\n      filters: {\n        [key: string]: {\n          query_string: { query: string; analyze_wildcard: boolean };\n        };\n      };\n    };\n    geohash_grid?: {\n      field: string;\n      precision: number;\n    };\n    histogram?: {\n      field: string;\n      interval: number;\n      min_doc_count: number;\n    };\n    aggs: IAggs;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IAuthHeaders.html': {
      url: 'interfaces/IAuthHeaders.html',
      title: 'interface - IAuthHeaders',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthHeaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos.ts\n        \n\n\n            \n                Description\n            \n            \n                Headers of an authenticated request\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            x-organization-id\n                                        \n                                \n                                \n                                        \n                                            x-user-id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x-organization-id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x-organization-id:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x-user-id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x-user-id:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { tags } from 'typia';\n\n/**\n * Headers of an authenticated request\n */\nexport interface IAuthHeaders {\n  'x-user-id': string & tags.Pattern;\n  'x-organization-id'?: string & tags.Pattern;\n}\n\n// type EntityFilterCommon = { equals?: V } | { not?: V } | { in?: V[] } | { notIn?: V[] };\n// type EntityFilterNumeric = EntityFilterCommon | { lt?: V, lte?: V, gt?: V, gte?: V };\n// type EntityFilterWithMode = T & { mode?: 'insensitive'|'default' };\n// type EntityFilterString = EntityFilterCommon | EntityFilterWithMode;\n\ntype EntityFilterRecord = {\n  equals?: string | number | Date | boolean;\n  not?: string | number | Date | boolean;\n  in?: (string | number | Date | boolean)[];\n  notIn?: (string | number | Date | boolean)[];\n  lt?: number | Date | string;\n  lte?: number | Date | string;\n  gt?: number | Date | string;\n  gte?: number | Date | string;\n  contains?: string;\n  startsWith?: string;\n  endsWith?: string;\n  mode?: 'insensitive' | 'default';\n};\ntype ComparableAttributes = {\n  [K in keyof T]: T[K] extends number | Date | string | boolean ? K : never;\n}[keyof T];\nexport type EntityFilterInput = ComparableAttributes,\n> = Record;\n\nexport type EntitySortInput = {\n  field: keyof E | string;\n  direction: 'asc' | 'desc';\n};\n\nexport interface IListEntitiesRequest {\n  filters?: EntityFilterInput>;\n  sort?: EntitySortInput;\n  search?: string;\n  skip?: number;\n  take?: number;\n}\n\nexport interface IListEntitiesResponse {\n  total: number;\n  items: E[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/ICreateDashboardCategoryRequest.html': {
      url: 'interfaces/ICreateDashboardCategoryRequest.html',
      title: 'interface - ICreateDashboardCategoryRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateDashboardCategoryRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-category/dto/dashboard-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n\n\n\n    \n\n\n    \n        import { IDashboardCategory } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboardCategory extends IDashboardCategory {}\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateDashboardCategoryRequest\n  extends Omit {}\n\nexport interface IUpdateDashboardCategoryRequest\n  extends ICreateDashboardCategoryRequest {\n  id: string;\n}\n\nexport interface IGetDashboardCategoryRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/ICreateDashboardRequest.html': {
      url: 'interfaces/ICreateDashboardRequest.html',
      title: 'interface - ICreateDashboardRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateDashboardRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dto/dashboard.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n\n\n\n    \n\n\n    \n        import { IDashboard } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboard extends IDashboard { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateDashboardRequest\n  extends Omit { }\n\nexport interface IGetDashboardRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateDashboardRequest\n  extends Omit {\n  name?: string;\n  dashboardCategoryId?: string;\n  parentId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/ICreateRoleRequest.html': {
      url: 'interfaces/ICreateRoleRequest.html',
      title: 'interface - ICreateRoleRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateRoleRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/role.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n\n\n\n    \n\n\n    \n        import { IRole } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetRole extends IRole { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateRoleRequest\n  extends Omit { }\n\nexport interface IUpdateRoleRequest\n  extends ICreateRoleRequest {\n  id: string;\n}\n\nexport interface IGetRoleRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/ICreateUserVariableRequest.html': {
      url: 'interfaces/ICreateUserVariableRequest.html',
      title: 'interface - ICreateUserVariableRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateUserVariableRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-variable/dto/user-variable.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            scope\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        scope\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scope:     "ORGANIZATION" | "DASHBOARD"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     "ORGANIZATION" | "DASHBOARD"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     "TEXT" | "NUMERICAL" | "TIME_BASED"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     "TEXT" | "NUMERICAL" | "TIME_BASED"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IUserVariable } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetUserVariable extends IUserVariable {}\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateUserVariableRequest\n  extends Omit {\n  type: \'TEXT\' | \'NUMERICAL\' | \'TIME_BASED\';\n  scope: \'ORGANIZATION\' | \'DASHBOARD\';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateUserVariableRequest\n  extends Omit {\n  type: \'TEXT\' | \'NUMERICAL\' | \'TIME_BASED\';\n  scope: \'ORGANIZATION\' | \'DASHBOARD\';\n}\n\nexport interface IGetUserVariableRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/ICreateWidgetRequest.html': {
      url: 'interfaces/ICreateWidgetRequest.html',
      title: 'interface - ICreateWidgetRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateWidgetRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/dto/widget.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            access_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        access_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IWidget, IWidgetConfig } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetWidget extends IWidget { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetWidgetRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetQueryDataRequest {\n  filters: IGetQueryDataFilter;\n  config: IWidgetConfig[];\n}\n\nexport interface IGetQueryDataFilter {\n  timeBounds: {\n    min: string;\n    max: string;\n    timezone?: string;\n  };\n  query: string;\n  queryJson?: any;\n  aggs?: any;\n  size?: number;\n  sort?: any;\n}\n\nexport interface IAggs {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: {\n        min: number;\n        max: number;\n      };\n      format: string;\n    };\n    filters?: {\n      filters: {\n        [key: string]: {\n          query_string: { query: string; analyze_wildcard: boolean };\n        };\n      };\n    };\n    geohash_grid?: {\n      field: string;\n      precision: number;\n    };\n    histogram?: {\n      field: string;\n      interval: number;\n      min_doc_count: number;\n    };\n    aggs: IAggs;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetDashboard.html': {
      url: 'interfaces/IGetDashboard.html',
      title: 'interface - IGetDashboard',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetDashboard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dto/dashboard.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IDashboard\n            \n\n\n\n\n    \n\n\n    \n        import { IDashboard } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboard extends IDashboard { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateDashboardRequest\n  extends Omit { }\n\nexport interface IGetDashboardRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateDashboardRequest\n  extends Omit {\n  name?: string;\n  dashboardCategoryId?: string;\n  parentId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetDashboardCategory.html': {
      url: 'interfaces/IGetDashboardCategory.html',
      title: 'interface - IGetDashboardCategory',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetDashboardCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-category/dto/dashboard-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IDashboardCategory\n            \n\n\n\n\n    \n\n\n    \n        import { IDashboardCategory } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboardCategory extends IDashboardCategory {}\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateDashboardCategoryRequest\n  extends Omit {}\n\nexport interface IUpdateDashboardCategoryRequest\n  extends ICreateDashboardCategoryRequest {\n  id: string;\n}\n\nexport interface IGetDashboardCategoryRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetDashboardCategoryRequest.html': {
      url: 'interfaces/IGetDashboardCategoryRequest.html',
      title: 'interface - IGetDashboardCategoryRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetDashboardCategoryRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-category/dto/dashboard-category.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDashboardCategory } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboardCategory extends IDashboardCategory {}\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateDashboardCategoryRequest\n  extends Omit {}\n\nexport interface IUpdateDashboardCategoryRequest\n  extends ICreateDashboardCategoryRequest {\n  id: string;\n}\n\nexport interface IGetDashboardCategoryRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetDashboardProfile.html': {
      url: 'interfaces/IGetDashboardProfile.html',
      title: 'interface - IGetDashboardProfile',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetDashboardProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-profile/dto/dashboard-profile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IDashboardProfile\n            \n\n\n\n\n    \n\n\n    \n        import { IDashboardProfile } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboardProfile extends IDashboardProfile {}\n\nexport interface ISetDefaultDashbordRequest {\n  dashboardId: string;\n}\n\nexport interface IAddToFavouriteRequest {\n  dashboardId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetDashboardRequest.html': {
      url: 'interfaces/IGetDashboardRequest.html',
      title: 'interface - IGetDashboardRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetDashboardRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dto/dashboard.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDashboard } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboard extends IDashboard { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateDashboardRequest\n  extends Omit { }\n\nexport interface IGetDashboardRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateDashboardRequest\n  extends Omit {\n  name?: string;\n  dashboardCategoryId?: string;\n  parentId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetQueryDataFilter.html': {
      url: 'interfaces/IGetQueryDataFilter.html',
      title: 'interface - IGetQueryDataFilter',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetQueryDataFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/dto/widget.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            aggs\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            queryJson\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sort\n                                        \n                                \n                                \n                                        \n                                            timeBounds\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggs:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryJson\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryJson:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sort\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sort:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeBounds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeBounds:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IWidget, IWidgetConfig } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetWidget extends IWidget { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetWidgetRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetQueryDataRequest {\n  filters: IGetQueryDataFilter;\n  config: IWidgetConfig[];\n}\n\nexport interface IGetQueryDataFilter {\n  timeBounds: {\n    min: string;\n    max: string;\n    timezone?: string;\n  };\n  query: string;\n  queryJson?: any;\n  aggs?: any;\n  size?: number;\n  sort?: any;\n}\n\nexport interface IAggs {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: {\n        min: number;\n        max: number;\n      };\n      format: string;\n    };\n    filters?: {\n      filters: {\n        [key: string]: {\n          query_string: { query: string; analyze_wildcard: boolean };\n        };\n      };\n    };\n    geohash_grid?: {\n      field: string;\n      precision: number;\n    };\n    histogram?: {\n      field: string;\n      interval: number;\n      min_doc_count: number;\n    };\n    aggs: IAggs;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetQueryDataRequest.html': {
      url: 'interfaces/IGetQueryDataRequest.html',
      title: 'interface - IGetQueryDataRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetQueryDataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/dto/widget.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            filters\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     IWidgetConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IWidgetConfig[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filters:         IGetQueryDataFilter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IGetQueryDataFilter\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IWidget, IWidgetConfig } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetWidget extends IWidget { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetWidgetRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetQueryDataRequest {\n  filters: IGetQueryDataFilter;\n  config: IWidgetConfig[];\n}\n\nexport interface IGetQueryDataFilter {\n  timeBounds: {\n    min: string;\n    max: string;\n    timezone?: string;\n  };\n  query: string;\n  queryJson?: any;\n  aggs?: any;\n  size?: number;\n  sort?: any;\n}\n\nexport interface IAggs {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: {\n        min: number;\n        max: number;\n      };\n      format: string;\n    };\n    filters?: {\n      filters: {\n        [key: string]: {\n          query_string: { query: string; analyze_wildcard: boolean };\n        };\n      };\n    };\n    geohash_grid?: {\n      field: string;\n      precision: number;\n    };\n    histogram?: {\n      field: string;\n      interval: number;\n      min_doc_count: number;\n    };\n    aggs: IAggs;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetRole.html': {
      url: 'interfaces/IGetRole.html',
      title: 'interface - IGetRole',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetRole\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/role.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IRole\n            \n\n\n\n\n    \n\n\n    \n        import { IRole } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetRole extends IRole { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateRoleRequest\n  extends Omit { }\n\nexport interface IUpdateRoleRequest\n  extends ICreateRoleRequest {\n  id: string;\n}\n\nexport interface IGetRoleRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetRoleRequest.html': {
      url: 'interfaces/IGetRoleRequest.html',
      title: 'interface - IGetRoleRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetRoleRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/role.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IRole } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetRole extends IRole { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateRoleRequest\n  extends Omit { }\n\nexport interface IUpdateRoleRequest\n  extends ICreateRoleRequest {\n  id: string;\n}\n\nexport interface IGetRoleRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetUserVariable.html': {
      url: 'interfaces/IGetUserVariable.html',
      title: 'interface - IGetUserVariable',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetUserVariable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-variable/dto/user-variable.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IUserVariable\n            \n\n\n\n\n    \n\n\n    \n        import { IUserVariable } from '@clean-start-dashboard/shared';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetUserVariable extends IUserVariable {}\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateUserVariableRequest\n  extends Omit {\n  type: 'TEXT' | 'NUMERICAL' | 'TIME_BASED';\n  scope: 'ORGANIZATION' | 'DASHBOARD';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateUserVariableRequest\n  extends Omit {\n  type: 'TEXT' | 'NUMERICAL' | 'TIME_BASED';\n  scope: 'ORGANIZATION' | 'DASHBOARD';\n}\n\nexport interface IGetUserVariableRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/IGetUserVariableRequest.html': {
      url: 'interfaces/IGetUserVariableRequest.html',
      title: 'interface - IGetUserVariableRequest',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetUserVariableRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-variable/dto/user-variable.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IUserVariable } from '@clean-start-dashboard/shared';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetUserVariable extends IUserVariable {}\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateUserVariableRequest\n  extends Omit {\n  type: 'TEXT' | 'NUMERICAL' | 'TIME_BASED';\n  scope: 'ORGANIZATION' | 'DASHBOARD';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateUserVariableRequest\n  extends Omit {\n  type: 'TEXT' | 'NUMERICAL' | 'TIME_BASED';\n  scope: 'ORGANIZATION' | 'DASHBOARD';\n}\n\nexport interface IGetUserVariableRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/IGetWidget.html': {
      url: 'interfaces/IGetWidget.html',
      title: 'interface - IGetWidget',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetWidget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/dto/widget.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IWidget\n            \n\n\n\n\n    \n\n\n    \n        import { IWidget, IWidgetConfig } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetWidget extends IWidget { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetWidgetRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetQueryDataRequest {\n  filters: IGetQueryDataFilter;\n  config: IWidgetConfig[];\n}\n\nexport interface IGetQueryDataFilter {\n  timeBounds: {\n    min: string;\n    max: string;\n    timezone?: string;\n  };\n  query: string;\n  queryJson?: any;\n  aggs?: any;\n  size?: number;\n  sort?: any;\n}\n\nexport interface IAggs {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: {\n        min: number;\n        max: number;\n      };\n      format: string;\n    };\n    filters?: {\n      filters: {\n        [key: string]: {\n          query_string: { query: string; analyze_wildcard: boolean };\n        };\n      };\n    };\n    geohash_grid?: {\n      field: string;\n      precision: number;\n    };\n    histogram?: {\n      field: string;\n      interval: number;\n      min_doc_count: number;\n    };\n    aggs: IAggs;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IGetWidgetRequest.html': {
      url: 'interfaces/IGetWidgetRequest.html',
      title: 'interface - IGetWidgetRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetWidgetRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/dto/widget.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IWidget, IWidgetConfig } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetWidget extends IWidget { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetWidgetRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetQueryDataRequest {\n  filters: IGetQueryDataFilter;\n  config: IWidgetConfig[];\n}\n\nexport interface IGetQueryDataFilter {\n  timeBounds: {\n    min: string;\n    max: string;\n    timezone?: string;\n  };\n  query: string;\n  queryJson?: any;\n  aggs?: any;\n  size?: number;\n  sort?: any;\n}\n\nexport interface IAggs {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: {\n        min: number;\n        max: number;\n      };\n      format: string;\n    };\n    filters?: {\n      filters: {\n        [key: string]: {\n          query_string: { query: string; analyze_wildcard: boolean };\n        };\n      };\n    };\n    geohash_grid?: {\n      field: string;\n      precision: number;\n    };\n    histogram?: {\n      field: string;\n      interval: number;\n      min_doc_count: number;\n    };\n    aggs: IAggs;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IListEntitiesRequest.html': {
      url: 'interfaces/IListEntitiesRequest.html',
      title: 'interface - IListEntitiesRequest',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IListEntitiesRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            filters\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            skip\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sort\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            take\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filters:         EntityFilterInput>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityFilterInput>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skip:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sort\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sort:         EntitySortInput\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntitySortInput\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        take\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        take:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { tags } from 'typia';\n\n/**\n * Headers of an authenticated request\n */\nexport interface IAuthHeaders {\n  'x-user-id': string & tags.Pattern;\n  'x-organization-id'?: string & tags.Pattern;\n}\n\n// type EntityFilterCommon = { equals?: V } | { not?: V } | { in?: V[] } | { notIn?: V[] };\n// type EntityFilterNumeric = EntityFilterCommon | { lt?: V, lte?: V, gt?: V, gte?: V };\n// type EntityFilterWithMode = T & { mode?: 'insensitive'|'default' };\n// type EntityFilterString = EntityFilterCommon | EntityFilterWithMode;\n\ntype EntityFilterRecord = {\n  equals?: string | number | Date | boolean;\n  not?: string | number | Date | boolean;\n  in?: (string | number | Date | boolean)[];\n  notIn?: (string | number | Date | boolean)[];\n  lt?: number | Date | string;\n  lte?: number | Date | string;\n  gt?: number | Date | string;\n  gte?: number | Date | string;\n  contains?: string;\n  startsWith?: string;\n  endsWith?: string;\n  mode?: 'insensitive' | 'default';\n};\ntype ComparableAttributes = {\n  [K in keyof T]: T[K] extends number | Date | string | boolean ? K : never;\n}[keyof T];\nexport type EntityFilterInput = ComparableAttributes,\n> = Record;\n\nexport type EntitySortInput = {\n  field: keyof E | string;\n  direction: 'asc' | 'desc';\n};\n\nexport interface IListEntitiesRequest {\n  filters?: EntityFilterInput>;\n  sort?: EntitySortInput;\n  search?: string;\n  skip?: number;\n  take?: number;\n}\n\nexport interface IListEntitiesResponse {\n  total: number;\n  items: E[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/IListEntitiesResponse.html': {
      url: 'interfaces/IListEntitiesResponse.html',
      title: 'interface - IListEntitiesResponse',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IListEntitiesResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     E[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     E[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { tags } from 'typia';\n\n/**\n * Headers of an authenticated request\n */\nexport interface IAuthHeaders {\n  'x-user-id': string & tags.Pattern;\n  'x-organization-id'?: string & tags.Pattern;\n}\n\n// type EntityFilterCommon = { equals?: V } | { not?: V } | { in?: V[] } | { notIn?: V[] };\n// type EntityFilterNumeric = EntityFilterCommon | { lt?: V, lte?: V, gt?: V, gte?: V };\n// type EntityFilterWithMode = T & { mode?: 'insensitive'|'default' };\n// type EntityFilterString = EntityFilterCommon | EntityFilterWithMode;\n\ntype EntityFilterRecord = {\n  equals?: string | number | Date | boolean;\n  not?: string | number | Date | boolean;\n  in?: (string | number | Date | boolean)[];\n  notIn?: (string | number | Date | boolean)[];\n  lt?: number | Date | string;\n  lte?: number | Date | string;\n  gt?: number | Date | string;\n  gte?: number | Date | string;\n  contains?: string;\n  startsWith?: string;\n  endsWith?: string;\n  mode?: 'insensitive' | 'default';\n};\ntype ComparableAttributes = {\n  [K in keyof T]: T[K] extends number | Date | string | boolean ? K : never;\n}[keyof T];\nexport type EntityFilterInput = ComparableAttributes,\n> = Record;\n\nexport type EntitySortInput = {\n  field: keyof E | string;\n  direction: 'asc' | 'desc';\n};\n\nexport interface IListEntitiesRequest {\n  filters?: EntityFilterInput>;\n  sort?: EntitySortInput;\n  search?: string;\n  skip?: number;\n  take?: number;\n}\n\nexport interface IListEntitiesResponse {\n  total: number;\n  items: E[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/ISearchQueryRequestPayload.html': {
      url: 'interfaces/ISearchQueryRequestPayload.html',
      title: 'interface - ISearchQueryRequestPayload',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISearchQueryRequestPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-search/dto/open-search-query.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggs\n                                        \n                                \n                                \n                                        \n                                            indexes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggs:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        indexes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        indexes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ISearchQueryRequestPayload {\n  indexes: string[];\n  query: any;\n  aggs: any;\n  options?: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/ISetDefaultDashbordRequest.html': {
      url: 'interfaces/ISetDefaultDashbordRequest.html',
      title: 'interface - ISetDefaultDashbordRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISetDefaultDashbordRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-profile/dto/dashboard-profile.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dashboardId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dashboardId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dashboardId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDashboardProfile } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboardProfile extends IDashboardProfile {}\n\nexport interface ISetDefaultDashbordRequest {\n  dashboardId: string;\n}\n\nexport interface IAddToFavouriteRequest {\n  dashboardId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IUpdateDashboardCategoryRequest.html': {
      url: 'interfaces/IUpdateDashboardCategoryRequest.html',
      title: 'interface - IUpdateDashboardCategoryRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateDashboardCategoryRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard-category/dto/dashboard-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ICreateDashboardCategoryRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDashboardCategory } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboardCategory extends IDashboardCategory {}\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateDashboardCategoryRequest\n  extends Omit {}\n\nexport interface IUpdateDashboardCategoryRequest\n  extends ICreateDashboardCategoryRequest {\n  id: string;\n}\n\nexport interface IGetDashboardCategoryRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IUpdateDashboardRequest.html': {
      url: 'interfaces/IUpdateDashboardRequest.html',
      title: 'interface - IUpdateDashboardRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateDashboardRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dto/dashboard.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dashboardCategoryId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parentId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dashboardCategoryId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dashboardCategoryId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parentId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parentId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDashboard } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetDashboard extends IDashboard { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateDashboardRequest\n  extends Omit { }\n\nexport interface IGetDashboardRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateDashboardRequest\n  extends Omit {\n  name?: string;\n  dashboardCategoryId?: string;\n  parentId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IUpdateRoleRequest.html': {
      url: 'interfaces/IUpdateRoleRequest.html',
      title: 'interface - IUpdateRoleRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateRoleRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/role.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ICreateRoleRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IRole } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetRole extends IRole { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateRoleRequest\n  extends Omit { }\n\nexport interface IUpdateRoleRequest\n  extends ICreateRoleRequest {\n  id: string;\n}\n\nexport interface IGetRoleRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IUpdateUserVariableRequest.html': {
      url: 'interfaces/IUpdateUserVariableRequest.html',
      title: 'interface - IUpdateUserVariableRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateUserVariableRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-variable/dto/user-variable.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            scope\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        scope\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scope:     "ORGANIZATION" | "DASHBOARD"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     "ORGANIZATION" | "DASHBOARD"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     "TEXT" | "NUMERICAL" | "TIME_BASED"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     "TEXT" | "NUMERICAL" | "TIME_BASED"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IUserVariable } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetUserVariable extends IUserVariable {}\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateUserVariableRequest\n  extends Omit {\n  type: \'TEXT\' | \'NUMERICAL\' | \'TIME_BASED\';\n  scope: \'ORGANIZATION\' | \'DASHBOARD\';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateUserVariableRequest\n  extends Omit {\n  type: \'TEXT\' | \'NUMERICAL\' | \'TIME_BASED\';\n  scope: \'ORGANIZATION\' | \'DASHBOARD\';\n}\n\nexport interface IGetUserVariableRequest {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/IUpdateWidgetRequest.html': {
      url: 'interfaces/IUpdateWidgetRequest.html',
      title: 'interface - IUpdateWidgetRequest',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateWidgetRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/dto/widget.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            access_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        access_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IWidget, IWidgetConfig } from \'@clean-start-dashboard/shared\';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IGetWidget extends IWidget { }\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ICreateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetWidgetRequest {\n  id: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface IUpdateWidgetRequest\n  extends Omit {\n  access_token?: string;\n}\n\nexport interface IGetQueryDataRequest {\n  filters: IGetQueryDataFilter;\n  config: IWidgetConfig[];\n}\n\nexport interface IGetQueryDataFilter {\n  timeBounds: {\n    min: string;\n    max: string;\n    timezone?: string;\n  };\n  query: string;\n  queryJson?: any;\n  aggs?: any;\n  size?: number;\n  sort?: any;\n}\n\nexport interface IAggs {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: {\n        min: number;\n        max: number;\n      };\n      format: string;\n    };\n    filters?: {\n      filters: {\n        [key: string]: {\n          query_string: { query: string; analyze_wildcard: boolean };\n        };\n      };\n    };\n    geohash_grid?: {\n      field: string;\n      precision: number;\n    };\n    histogram?: {\n      field: string;\n      interval: number;\n      min_doc_count: number;\n    };\n    aggs: IAggs;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/InterfaceResponse.html': {
      url: 'interfaces/InterfaceResponse.html',
      title: 'interface - InterfaceResponse',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InterfaceResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc/grpc.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            response_data\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response_data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response_data:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Metadata } from '@grpc/grpc-js';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ClientGrpc } from '@nestjs/microservices';\nimport { Observable } from 'rxjs';\n\ninterface InterfaceService {\n  SendRequest(data: {\n    app_id: string;\n    resource_path: string;\n    request_data: any;\n  }, metadata: any): Observable;\n}\n\ninterface InterfaceResponse {\n  status: boolean; // Indicates if the request was successful or not (true for success, false for failure).\n  message: string; // Optional message giving more context about the response (e.g., error details, success message).\n  response_data: string;\n}\n\n@Injectable()\nexport class GrpcService {\n  private interfaceService: InterfaceService;\n\n  constructor(@Inject('IAM') private client: ClientGrpc, private configService: ConfigService) { }\n\n  onModuleInit() {\n    this.interfaceService =\n      this.client.getService('InterfaceService');\n  }\n\n  getUserDetails(session_id: string): Observable {\n\n    // Configure metadata with app_id and auth_key\n    const metadata = new Metadata();\n    metadata.add('app_id', this.configService.get('GRPC_APP_ID') ?? \"\");\n    metadata.add('auth_key', this.configService.get('GRPC_AUTH_KEY') ?? \"\");\n\n    // Added metadata to the request\n    return this.interfaceService.SendRequest({\n      app_id: this.configService.get('GRPC_APP_ID') ?? \"\",\n      resource_path: 'get_user_detail',\n      request_data: JSON.stringify({\n        session_id: session_id,\n      }),\n    }, metadata);\n\n    // \"{\\\"session_id\\\": \\\"50a42b6f-353c-46ef-b191-362206ac00a4\\\",}\"\n  }\n\n  logout(session_id: string): Observable {\n\n    // Configure metadata with app_id and auth_key\n    const metadata = new Metadata();\n    metadata.add('app_id', this.configService.get('GRPC_APP_ID') ?? \"\");\n    metadata.add('auth_key', this.configService.get('GRPC_AUTH_KEY') ?? \"\");\n\n    // Added metadata to the request\n    return this.interfaceService.SendRequest({\n      app_id: this.configService.get('GRPC_APP_ID') ?? \"\",\n      resource_path: 'logout',\n      request_data: JSON.stringify({\n        session_id: session_id,\n      }),\n    }, metadata);\n\n    // \"{\\\"session_id\\\": \\\"50a42b6f-353c-46ef-b191-362206ac00a4\\\",}\"\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/InterfaceService.html': {
      url: 'interfaces/InterfaceService.html',
      title: 'interface - InterfaceService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InterfaceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc/grpc.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        SendRequest\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        SendRequest\n                        \n                    \n                \n            \n            \n                \nSendRequest(data: literal type, metadata: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/grpc/grpc.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Metadata } from '@grpc/grpc-js';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ClientGrpc } from '@nestjs/microservices';\nimport { Observable } from 'rxjs';\n\ninterface InterfaceService {\n  SendRequest(data: {\n    app_id: string;\n    resource_path: string;\n    request_data: any;\n  }, metadata: any): Observable;\n}\n\ninterface InterfaceResponse {\n  status: boolean; // Indicates if the request was successful or not (true for success, false for failure).\n  message: string; // Optional message giving more context about the response (e.g., error details, success message).\n  response_data: string;\n}\n\n@Injectable()\nexport class GrpcService {\n  private interfaceService: InterfaceService;\n\n  constructor(@Inject('IAM') private client: ClientGrpc, private configService: ConfigService) { }\n\n  onModuleInit() {\n    this.interfaceService =\n      this.client.getService('InterfaceService');\n  }\n\n  getUserDetails(session_id: string): Observable {\n\n    // Configure metadata with app_id and auth_key\n    const metadata = new Metadata();\n    metadata.add('app_id', this.configService.get('GRPC_APP_ID') ?? \"\");\n    metadata.add('auth_key', this.configService.get('GRPC_AUTH_KEY') ?? \"\");\n\n    // Added metadata to the request\n    return this.interfaceService.SendRequest({\n      app_id: this.configService.get('GRPC_APP_ID') ?? \"\",\n      resource_path: 'get_user_detail',\n      request_data: JSON.stringify({\n        session_id: session_id,\n      }),\n    }, metadata);\n\n    // \"{\\\"session_id\\\": \\\"50a42b6f-353c-46ef-b191-362206ac00a4\\\",}\"\n  }\n\n  logout(session_id: string): Observable {\n\n    // Configure metadata with app_id and auth_key\n    const metadata = new Metadata();\n    metadata.add('app_id', this.configService.get('GRPC_APP_ID') ?? \"\");\n    metadata.add('auth_key', this.configService.get('GRPC_AUTH_KEY') ?? \"\");\n\n    // Added metadata to the request\n    return this.interfaceService.SendRequest({\n      app_id: this.configService.get('GRPC_APP_ID') ?? \"\",\n      resource_path: 'logout',\n      request_data: JSON.stringify({\n        session_id: session_id,\n      }),\n    }, metadata);\n\n    // \"{\\\"session_id\\\": \\\"50a42b6f-353c-46ef-b191-362206ac00a4\\\",}\"\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/MappingInput.html': {
      url: 'interfaces/MappingInput.html',
      title: 'interface - MappingInput',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MappingInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-search/open-search.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mappings\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mappings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mappings:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\n// import bencode from 'bencode';\nimport { OpensearchClient } from 'nestjs-opensearch';\nimport { CachingService } from 'src/caching/caching.service';\nimport { ISearchQueryRequestPayload } from './dto/open-search-query.dto';\nimport { OpenSearchClientProvider } from './opensearch-client.provider';\n\ntype MappingProperties = {\n  [key: string]: {\n    type: string;\n    properties?: MappingProperties;\n  };\n};\n\ninterface MappingInput {\n  mappings: {\n    properties: MappingProperties;\n  };\n}\n\ninterface Output {\n  label: string;\n  name: string;\n  type: string;\n}\n\ninterface ProcessNode {\n  pid: number;\n  name: string;\n  cmd: string;\n  filePath: string;\n  fileHash: string;\n  user: string;\n  integrityLevel: number;\n  children: ProcessNode[];\n}\n@Injectable()\nexport class OpenSearchService {\n  private readonly logger = new Logger(OpenSearchService.name);\n  private searchClient: OpensearchClient | undefined;\n  private currentClusterUrl: string | undefined;\n\n  private userId: string | undefined;\n\n  public constructor(\n    private readonly opensearchClientProvider: OpenSearchClientProvider,\n    private cachingService: CachingService,\n  ) {}\n\n  /**\n   * Get the current user ID\n   * @returns The user ID or undefined if not available\n   */\n  public getCurrentUserId(): string | undefined {\n    return this.userId;\n  }\n  \n  /**\n   * Set the user ID - should be called from controllers with access to the request object\n   * @param userId The user ID to set\n   */\n  public setUserId(userId: string): void {\n    if (this.userId !== userId) {\n      this.userId = userId;\n      this.logger.log(`User ID set to: ${userId}`);\n      // Force client refresh when user ID changes\n      this.searchClient = undefined;\n    }\n  }\n\n  // async singleDataIngestion(input: any): Promise {\n  //   this.logger.log(\n  //     `Inside singleUpload() Method | Ingesting single data with index ${input.indexName} `,\n  //   );\n\n  //   const data = input.data[0];\n\n  //   try {\n  //     const res = await this.searchClient.index({\n  //       id: data.id,\n  //       index: input.indexName,\n  //       body: data,\n  //     });\n  //     return res.body;\n  //   } catch (err) {\n  //     this.logger.error(`Exception occurred : ${err})`);\n  //     return {\n  //       httpCode: 500,\n  //       error: err,\n  //     };\n  //   }\n  // }\n\n  /**\n   * Update the OpenSearch client based on the current user ID\n   */\n  private async updateClientFromUserId(): Promise {\n    // Get the cluster URL first\n    this.currentClusterUrl = await this.opensearchClientProvider.getNodeUrl(this.userId);\n    \n    // Then get the client\n    this.searchClient = await this.opensearchClientProvider.getClient(this.userId);\n    this.logger.log(`OpenSearch client updated for user: ${this.userId || 'default'} with cluster: ${this.currentClusterUrl}`);\n  }\n\n  /**\n   * Get the current OpenSearch client\n   * @returns The configured OpenSearch client\n   */\n  /**\n   * Ensures that both the client and cluster URL are initialized\n   * This is needed before checking cache to avoid using 'default' as cluster URL\n   */\n  private async ensureClientAndClusterUrl(): Promise {\n    if (!this.currentClusterUrl || !this.searchClient) {\n      await this.updateClientFromUserId();\n    }\n  }\n\n  private async getClient(): Promise {\n    if (!this.searchClient) {\n      // Initialize with client based on user ID if available\n      await this.updateClientFromUserId();\n    }\n    return this.searchClient as OpensearchClient;\n  }\n\n  async searchByQuery(input: ISearchQueryRequestPayload): Promise {\n    this.logger.log(`Inside searchByQuery() Method`);\n    let body: any;\n\n    this.logger.log(\n      `Searching for query: ${input.query} in the indexes : ${input?.indexes?.join(',')} `,\n    );\n    // eslint-disable-next-line prefer-const\n    body = {\n      ...(input.options ?? {}),\n      aggs: input.aggs ?? {},\n      query: input.query,\n    };\n\n    const msearchRequest: any = [];\n\n    input.indexes.map((index) => {\n      msearchRequest.push({ index: index });\n      msearchRequest.push({ ...body });\n    });\n\n    try {\n      // Ensure we have the client and cluster URL before checking cache\n      // This makes sure this.currentClusterUrl is populated\n      await this.ensureClientAndClusterUrl();\n      \n      // Create a cache key that includes the cluster URL to avoid conflicts\n      const cacheKey = {\n        query: msearchRequest,\n        clusterUrl: this.currentClusterUrl || 'default'\n      };\n      \n      this.logger.log(`Checking cache with cluster URL: ${this.currentClusterUrl}`);\n      const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n\n      if (cacheData !== null) {\n        this.logger.log(`Returning data from cache for cluster: ${this.currentClusterUrl}`);\n        return cacheData;\n      }\n      this.logger.log(`Reading data from opensearch`);\n      const client = await this.getClient(); // Will use the already initialized client\n      const res = await client.msearch({\n        body: msearchRequest,\n      });\n\n      // this.logger.log(`Res`, res);\n\n      if (res.statusCode == 200) {\n        this.logger.log(`Saving data to redis cache for cluster: ${this.currentClusterUrl}`);\n        // Use the same cache key structure for saving\n        const cacheKey = {\n          query: msearchRequest,\n          clusterUrl: this.currentClusterUrl || 'default'\n        };\n        await this.cachingService.setCacheByQuery(cacheKey, res);\n      }\n\n      return res;\n    } catch (error) {\n      this.logger.error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n\n      // return error\n\n      throw new Error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n    }\n  }\n\n  async aggregateQuery(input: any): Promise {\n    // console.log(JSON.stringify(input));\n\n    this.logger.log(`Inside aggregateQuery() Method`);\n    try {\n      // Ensure we have the client and cluster URL before checking cache\n      await this.ensureClientAndClusterUrl();\n      \n      // Create a cache key that includes the cluster URL\n      const cacheKey = {\n        query: input,\n        clusterUrl: this.currentClusterUrl || 'default'\n      };\n      \n      this.logger.log(`Checking aggregate cache with cluster URL: ${this.currentClusterUrl}`);\n      const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n      if (cacheData !== null) {\n        this.logger.log(`Returning data from cache for cluster: ${this.currentClusterUrl}`);\n        return cacheData;\n      } else {\n        this.logger.log(`Reading data from opensearch`);\n        const client = await this.getClient();\n        const res = await client.msearch({\n          body: input,\n        });\n\n        if (res.statusCode == 200) {\n          this.logger.log(`Saving data to redis cache for cluster: ${this.currentClusterUrl}`);\n          await this.cachingService.setCacheByQuery(cacheKey, res);\n          return res;\n        } else {\n          // return res;\n          new HttpException(\n            'Unable to process',\n            HttpStatus.INTERNAL_SERVER_ERROR,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n      return error\n      new HttpException('Timeout', HttpStatus.GATEWAY_TIMEOUT);\n    }\n  }\n\n  async getFields(): Promise {\n    // Ensure we have the client and cluster URL before checking cache\n    await this.ensureClientAndClusterUrl();\n    \n    // Create a cache key that includes the cluster URL\n    const baseCacheKey = {\n      index: 'esdl-alerts-*',\n      type: 'get-fileds',\n    };\n    \n    const cacheKey = {\n      query: baseCacheKey,\n      clusterUrl: this.currentClusterUrl || 'default'\n    };\n    \n    this.logger.log(`Checking fields cache with cluster URL: ${this.currentClusterUrl}`);\n    const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n    if (cacheData) {\n      this.logger.log(`Returning fields data from cache for cluster: ${this.currentClusterUrl}`);\n      return cacheData;\n    } else {\n      const client = await this.getClient();\n      const data = await client.indices.getMapping({\n        index: '',\n      });\n\n      // console.log('data', data?.body['esdl-alerts-4.x-2024.11.05']);\n      const keys = Object.keys(data?.body);\n\n      // return data?.body[keys[keys.length - 1]];\n\n      const options = await Promise.all(\n        this.convertMappingsToOutput(data?.body[keys[keys.length - 1]]),\n      );\n      if (options.length) {\n        this.logger.log(`Saving fields data to redis cache for cluster: ${this.currentClusterUrl}`);\n        await this.cachingService.setCacheByQuery(cacheKey,options);\n      }\n\n      return options;\n    }\n\n    // return this.searchClient.indices.getMapping({\n    //   index: 'esdl-archives-4.x-2024.07.01',\n    // });\n  }\n\n  // conversion functions\n\n  private convertMappingsToOutput(input: MappingInput): Output[] {\n    const result: Output[] = [];\n\n    function processProperties(\n      properties: MappingProperties,\n      parentKey: string = '',\n    ): void {\n      for (const key in properties) {\n        const currentProperty = properties[key];\n        const currentKey = parentKey ? `${parentKey}.${key}` : key;\n\n        if (currentProperty.properties) {\n          // If there are nested properties, recursively process them\n          processProperties(currentProperty.properties, currentKey);\n        } else {\n          // Add the current property to the result\n          result.push({\n            label: currentKey,\n            name: currentKey,\n            type: currentProperty.type,\n          });\n        }\n      }\n    }\n\n    // Start processing the top-level properties\n    processProperties(input.mappings.properties);\n\n    return result;\n  }\n\n\n\n  async createProcessTree(logs: any[]): Promise> {\n    const processMap: Record> = {};\n\n    // Step 1: Organize logs by tenant/endpoint\n    logs.forEach(log => {\n      const agentGuid = log.data.endpoint_agentGuid;\n      if (!processMap[agentGuid]) processMap[agentGuid] = {};\n\n      const parentPid = log.data.parentPid;\n      const processPid = log.data.processPid;\n\n      // Create parent node if missing\n      if (parentPid && !processMap[agentGuid][parentPid]) {\n        processMap[agentGuid][parentPid] = {\n          pid: parentPid,\n          name: log.data.parentName,\n          cmd: log.data.parentCmd,\n          filePath: log.data.parentFilePath,\n          fileHash: log.data.parentFileHash,\n          user: log.data.parentUser,\n          integrityLevel: log.data.parentIntegrityLevel || 0,\n          children: []\n        };\n      }\n\n      // Create process node\n      if (!processMap[agentGuid][processPid]) {\n        processMap[agentGuid][processPid] = {\n          pid: processPid,\n          name: log.data.processName,\n          cmd: log.data.processCmd,\n          filePath: log.data.processFilePath,\n          fileHash: log.data.processFileHash,\n          user: log.data.processUser,\n          integrityLevel: log.data.integrityLevel || 0,\n          children: []\n        };\n      }\n\n      // Link child to parent\n      if (parentPid) {\n        processMap[agentGuid][parentPid].children.push(processMap[agentGuid][processPid]);\n      }\n    });\n\n    // Step 2: Extract trees per endpoint\n    const processTrees: Record = {};\n    Object.keys(processMap).forEach(agentGuid => {\n      processTrees[agentGuid] = Object.values(processMap[agentGuid]).filter(node => !logs.some(log => log.data.processPid === node.pid));\n    });\n\n    return processTrees;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/OpenSearchClientProvider.html': {
      url: 'injectables/OpenSearchClientProvider.html',
      title: 'injectable - OpenSearchClientProvider',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenSearchClientProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-search/opensearch-client.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cachedClient\n                            \n                            \n                                    Private\n                                cachedProfileId\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getClient\n                            \n                            \n                                    Public\n                                    Async\n                                getNodeUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, dashboardProfileService?: DashboardProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/open-search/opensearch-client.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dashboardProfileService\n                                                  \n                                                        \n                                                                        DashboardProfileService\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClient(userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/opensearch-client.provider.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getNodeUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNodeUrl(userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/opensearch-client.provider.ts:27\n                        \n                    \n\n\n            \n                \n                        Get the OpenSearch node URL for a specific profile\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The user ID to get the URL for\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The node URL as a string\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cachedClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OpensearchClient | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/open-search/opensearch-client.provider.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cachedProfileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/open-search/opensearch-client.provider.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(OpenSearchClientProvider.name)\n                    \n                \n                    \n                        \n                                Defined in src/open-search/opensearch-client.provider.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Optional } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Client } from '@opensearch-project/opensearch';\nimport { OpensearchClient } from 'nestjs-opensearch';\nimport { DashboardProfileService } from '../dashboard-profile/dashboard-profile.service';\n\n@Injectable()\nexport class OpenSearchClientProvider {\n  private readonly logger = new Logger(OpenSearchClientProvider.name);\n  private cachedClient: OpensearchClient | null = null;\n  private cachedProfileId: string | null = null;\n\n  constructor(\n    private readonly configService: ConfigService,\n    @Optional() private readonly dashboardProfileService?: DashboardProfileService,\n  ) {\n    if (!this.dashboardProfileService) {\n      this.logger.warn('DashboardProfileService not available - dynamic configuration will not work');\n    }\n  }\n\n  /**\n   * Get the OpenSearch node URL for a specific profile\n   * @param userId The user ID to get the URL for\n   * @returns The node URL as a string\n   */\n  public async getNodeUrl(userId?: string): Promise {\n    let nodeUrl: string | undefined;\n\n    // Try to get configuration from dashboard profile\n    if (userId && this.dashboardProfileService) {\n      try {\n        const profile = await this.dashboardProfileService.getById(userId);\n        if (profile?.opensearchConfig) {\n          const config = profile.opensearchConfig as Record;\n          nodeUrl = config.node_url as string | undefined;\n        }\n      } catch (error) {\n        this.logger.error(`Error getting dashboard profile: ${error.message}`);\n      }\n    }\n\n    // Fall back to environment variables if needed\n    if (!nodeUrl) {\n      nodeUrl = this.configService.get('OPENSEARCH_NODE');\n    }\n\n    return nodeUrl;\n  }\n\n  public async getClient(userId?: string): Promise {\n    // If we have a cached client for the same profile, return it\n    if (this.cachedClient && userId === this.cachedProfileId) {\n      return this.cachedClient;\n    }\n\n    let nodeUrl: string | undefined;\n    let username: string | undefined;\n    let password: string | undefined;\n    let rejectUnauthorized = false; // Initialize with default value\n    let minPoolSize = 8;\n    let maxPoolSize = 25;\n    let maxRetries = 5;\n    let requestTimeout = 1000000000;\n\n    // Try to get configuration from dashboard profile\n    if (userId && this.dashboardProfileService) {\n      try {\n        const profile = await this.dashboardProfileService.getById(userId);\n        if (profile?.opensearchConfig) {\n          const config = profile.opensearchConfig as Record;\n          nodeUrl = config.node_url as string | undefined;\n          username = config.username as string | undefined;\n          password = config.password as string | undefined;\n          rejectUnauthorized = config.rejectUnauthorized !== undefined \n            ? Boolean(config.rejectUnauthorized) \n            : false;\n          \n          this.logger.log(`Using OpenSearch configuration from profile: ${userId}`);\n        }\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        this.logger.error(`Failed to get dashboard profile: ${errorMessage}`);\n      }\n    }\n\n    // Fall back to environment variables if needed\n    if (!nodeUrl) {\n      nodeUrl = this.configService.get('OPENSEARCH_NODE');\n      username = this.configService.get('OPENSEARCH_USERNAME');\n      password = this.configService.get('OPENSEARCH_PASSWORD');\n      rejectUnauthorized = this.configService.get('OPENSEARCH_REJECT_UNAUTHORIZED', false);\n      minPoolSize = this.configService.get('OPENSEARCH_POOL_MIN', 8);\n      maxPoolSize = this.configService.get('OPENSEARCH_POOL_MAX', 25);\n      maxRetries = this.configService.get('OPENSEARCH_POOL_MAX_RETRIES', 5);\n      requestTimeout = this.configService.get('OPENSEARCH_REQUEST_TIMEOUT', 1000000000);\n      \n      this.logger.log('Using OpenSearch configuration from environment variables');\n    }\n\n    if (!nodeUrl) {\n      throw new Error('OpenSearch node URL not found in profile or environment variables');\n    }\n\n    const clientOptions: { \n      node: string; \n      auth?: { username: string; password: string };\n      ssl?: { rejectUnauthorized: boolean };\n      pool?: { min: number; max: number; maxRetries: number; requestTimeout: number };\n    } = {\n      node: nodeUrl,\n      auth: username && password ? {\n        username,\n        password,\n      } : undefined,\n      ssl: {\n        rejectUnauthorized,\n     },\n     pool: {\n      min: minPoolSize,\n      max: maxPoolSize,\n      maxRetries: maxRetries,\n      requestTimeout: requestTimeout,\n    },\n    };\n    \n    const client = new Client(clientOptions) as OpensearchClient;\n\n    if (userId) {\n      this.cachedProfileId = userId;\n      this.cachedClient = client;\n    }\n    this.logger.log(`OpenSearch client created for profile: ${userId || 'default'}`);\n    this.logger.log(`OpenSearch client options: ${JSON.stringify(clientOptions)}`);\n    this.logger.log(`OpenSearch client node: ${nodeUrl}`);\n\n    return client;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/OpenSearchController.html': {
      url: 'controllers/OpenSearchController.html',
      title: 'controller - OpenSearchController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  OpenSearchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-search/open-search.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                open-search\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                alerts\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getFields\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getFieldValues\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                processTree\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        alerts\n                        \n                    \n                \n            \n            \n                \n                        \n                    alerts(query: IGetQueryDataFilter, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('alerts')\n                \n            \n\n                    \n                        \n                            Defined in src/open-search/open-search.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetQueryDataFilter\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFields()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('get-fields')\n                \n            \n\n                    \n                        \n                            Defined in src/open-search/open-search.controller.ts:224\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getFieldValues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFieldValues(query: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('get-field-values')\n                \n            \n\n                    \n                        \n                            Defined in src/open-search/open-search.controller.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        processTree\n                        \n                    \n                \n            \n            \n                \n                        \n                    processTree(query: IGetQueryDataFilter, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('process-tree')\n                \n            \n\n                    \n                        \n                            Defined in src/open-search/open-search.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetQueryDataFilter\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(query: IGetQueryDataFilter, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('search')\n                \n            \n\n                    \n                        \n                            Defined in src/open-search/open-search.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetQueryDataFilter\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { TypedBody, TypedRoute } from '@nestia/core';\nimport { Controller, UseGuards } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport dayjs from 'dayjs';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport { User } from 'src/decorators/user.decorator';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { IGetQueryDataFilter } from 'src/widget/dto/widget.dto';\nimport { OpenSearchService } from './open-search.service';\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\n\n@Controller('open-search')\n@UseGuards(AuthGuard)\nexport class OpenSearchController {\n  constructor(private searchService: OpenSearchService, private configService: ConfigService) { }\n\n  @TypedRoute.Post('search')\n  public async search(\n    @TypedBody() query: IGetQueryDataFilter,\n    @User() user: any,\n  ): Promise {\n    // Set the user ID in the service if available\n    if (user?.user_data?.id) {\n      this.searchService.setUserId(user.user_data.id);\n    }\n    const timeBounds = {\n      min: new Date(dayjs(query.timeBounds.min).tz(query.timeBounds.timezone ?? \"Asia/Calcutta\").toDate()).getTime(),\n      max: new Date(dayjs(query.timeBounds.max).tz(query.timeBounds.timezone ?? \"Asia/Calcutta\").toDate()).getTime(),\n    };\n\n    const params = [\n      {\n        index: this.configService.get('OPENSEARCH_LOG_INDEX') ?? '',\n      },\n      {\n        query: {\n          bool: {\n            filter: [\n              // ...(query.queryJson ? query.queryJson?.bool?.filter : []),\n              {\n                range: {\n                  '@timestamp': {\n                    gte: timeBounds.min,\n                    lte: timeBounds.max,\n                    format: 'epoch_millis',\n                  },\n                },\n              },\n              {\n                query_string: {\n                  analyze_wildcard: true,\n                  query: query.query,\n                },\n              },\n              {\n                query_string: {\n                  analyze_wildcard: true,\n                  query: 'data.tenant:' + user?.user_data.tenant.tenant_code,\n                },\n              },\n            ],\n            ...(query.queryJson ? query.queryJson.bool : {}),\n          },\n        },\n        aggs: query.aggs ?? {},\n        size: query.size ?? 100,\n      },\n    ];\n\n    // console.log(JSON.stringify(params));\n\n    return await this.searchService.aggregateQuery(params);\n  }\n\n  @TypedRoute.Post('alerts')\n  public async alerts(\n    @TypedBody() query: IGetQueryDataFilter,\n    @User() user: any,\n  ): Promise {\n    // Set the user ID in the service if available\n    if (user?.user_data?.id) {\n      this.searchService.setUserId(user.user_data.id);\n    }\n    const timeBounds = {\n      min: new Date(dayjs(query.timeBounds.min).tz(query.timeBounds.timezone ?? \"Asia/Calcutta\").toDate()).getTime(),\n      max: new Date(dayjs(query.timeBounds.max).tz(query.timeBounds.timezone ?? \"Asia/Calcutta\").toDate()).getTime(),\n    };\n\n    const params = [\n      {\n        index: this.configService.get('OPENSEARCH_ALERT_INDEX') ?? '',\n      },\n      {\n        query: {\n          bool: {\n            filter: [\n              // ...(query.queryJson ? query.queryJson?.bool?.filter : []),\n              {\n                range: {\n                  '@timestamp': {\n                    gte: timeBounds.min,\n                    lte: timeBounds.max,\n                    format: 'epoch_millis',\n                  },\n                },\n              },\n              {\n                query_string: {\n                  analyze_wildcard: true,\n                  query: query.query,\n                },\n              },\n              {\n                query_string: {\n                  analyze_wildcard: true,\n                  query: 'data.tenant:' + user?.user_data.tenant.tenant_code,\n                },\n              },\n            ],\n            ...(query.queryJson ? query.queryJson.bool : {}),\n          },\n        },\n        aggs: query.aggs ?? {},\n        size: query.size ?? 100,\n      },\n    ];\n\n    // console.log(JSON.stringify(params));\n\n    return await this.searchService.aggregateQuery(params);\n  }\n\n  @TypedRoute.Post('process-tree')\n  public async processTree(\n    @TypedBody() query: IGetQueryDataFilter,\n    @User() user: any,\n  ): Promise {\n    // Set the user ID in the service if available\n    if (user?.user_data?.id) {\n      this.searchService.setUserId(user.user_data.id);\n    }\n    const timeBounds = {\n      min: new Date(dayjs(query.timeBounds.min).tz(query.timeBounds.timezone ?? \"Asia/Calcutta\").toDate()).getTime(),\n      max: new Date(dayjs(query.timeBounds.max).tz(query.timeBounds.timezone ?? \"Asia/Calcutta\").toDate()).getTime(),\n    };\n    console.log('Time Bounds', user);\n\n    const params = [\n      {\n        index: '',\n      },\n      {\n        query: {\n          bool: {\n            filter: [\n              // ...(query.queryJson ? query.queryJson?.bool?.filter : []),\n              {\n                range: {\n                  '@timestamp': {\n                    gte: timeBounds.min,\n                    lte: timeBounds.max,\n                    format: 'epoch_millis',\n                  },\n                },\n              },\n              {\n                query_string: {\n                  analyze_wildcard: true,\n                  query: query.query,\n                },\n              },\n              // {\n              //   query_string: {\n              //     analyze_wildcard: true,\n              //     query: 'data.tenant:' + user?.user_data.tenant.tenant_code,\n              //   },\n              // },\n            ],\n            ...(query.queryJson ? query.queryJson.bool : {}),\n          },\n        },\n        aggs: query.aggs ?? {},\n        size: query.size ?? 100,\n      },\n    ];\n\n    // console.log(JSON.stringify(params));\n\n    return await this.searchService.aggregateQuery(params);\n  }\n\n  @TypedRoute.Post('get-field-values')\n  public async getFieldValues(\n    @TypedBody() query: { field: string },\n  ): Promise {\n    const params = [\n      {\n        index: 'esdl-alerts*',\n      },\n      {\n        aggs: {\n          values: {\n            terms: { field: query.field, size: 100 },\n          },\n        },\n\n        size: 0,\n      },\n    ];\n    const data = await this.searchService.aggregateQuery(params);\n    return data?.body?.responses[0]?.aggregations;\n    if (data.statusCode === 200) {\n      return data?.body?.responses[0]?.aggregations?.values?.buckets ?? [];\n    } else {\n      throw new Error(JSON.stringify(data));\n    }\n  }\n\n  @TypedRoute.Post('get-fields')\n  public async getFields(): Promise {\n    const data = await this.searchService.getFields();\n\n    // if (data.statusCode === 200) {\n    //   return data?.body?.responses[0]?.aggregations?.values?.buckets ?? [];\n    // } else {\n    //   throw new Error(JSON.stringify(data));\n    // }\n\n    // console.log(data);\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/OpenSearchModule.html': {
      url: 'modules/OpenSearchModule.html',
      title: 'module - OpenSearchModule',
      body: "\n                   \n\n\n\n\n    Modules\n    OpenSearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OpenSearchModule\n\n\n\ncluster_OpenSearchModule_providers\n\n\n\ncluster_OpenSearchModule_exports\n\n\n\ncluster_OpenSearchModule_imports\n\n\n\n\nCachingModule\n\nCachingModule\n\n\n\nOpenSearchModule\n\nOpenSearchModule\n\nOpenSearchModule -->\n\nCachingModule->OpenSearchModule\n\n\n\n\n\nDashboardProfileModule\n\nDashboardProfileModule\n\nOpenSearchModule -->\n\nDashboardProfileModule->OpenSearchModule\n\n\n\n\n\nOpenSearchService \n\nOpenSearchService \n\nOpenSearchService  -->\n\nOpenSearchModule->OpenSearchService \n\n\n\n\n\nOpenSearchClientProvider\n\nOpenSearchClientProvider\n\nOpenSearchModule -->\n\nOpenSearchClientProvider->OpenSearchModule\n\n\n\n\n\nOpenSearchService\n\nOpenSearchService\n\nOpenSearchModule -->\n\nOpenSearchService->OpenSearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/open-search/open-search.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenSearchClientProvider\n                        \n                        \n                            OpenSearchService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OpenSearchController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CachingModule\n                        \n                        \n                            DashboardProfileModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OpenSearchService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { OpensearchModule } from 'nestjs-opensearch';\nimport { CachingModule } from 'src/caching/caching.module';\nimport { DashboardProfileModule } from 'src/dashboard-profile/dashboard-profile.module';\nimport { OpenSearchController } from './open-search.controller';\nimport { OpenSearchService } from './open-search.service';\nimport { OpenSearchClientProvider } from './opensearch-client.provider';\n\n@Module({\n  imports: [\n    // original OpenSearch module for backward compatibility\n    OpensearchModule.forRootAsync({\n      clientName: 'eventus',\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService) => ({\n        node: configService.get('OPENSEARCH_NODE'),\n        auth: {\n          username: configService.get('OPENSEARCH_USERNAME'),\n          password: configService.get('OPENSEARCH_PASSWORD'),\n        },\n        ssl: {\n          // ca: readFileSync(configService.get('OPENSEARCH_CA_PATH')),\n          // You can turn off certificate verification (rejectUnauthorized: false) if you're using\n          // self-signed certificates with a hostname mismatch.\n          // cert: fs.readFileSync(client_cert_path),\n          // key: fs.readFileSync(client_key_path)\n          rejectUnauthorized: configService.get(\n            'OPENSEARCH_REJECT_UNAUTHORIZED',\n            false,\n          ),\n        },\n        pool: {\n          min: configService.get('OPENSEARCH_POOL_MIN', 8),\n          max: configService.get('OPENSEARCH_POOL_MAX', 25),\n          maxRetries: configService.get('OPENSEARCH_POOL_MAX_RETRIES', 5),\n          requestTimeout: configService.get(\n            'OPENSEARCH_REQUEST_TIMEOUT',\n            1000000000,\n          ),\n        },\n      }),\n    }),\n    ConfigModule,\n    CachingModule,\n    DashboardProfileModule,\n  ],\n  providers: [\n    OpenSearchClientProvider, \n    OpenSearchService\n  ],\n  exports: [OpenSearchService],\n  controllers: [OpenSearchController],\n})\nexport class OpenSearchModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/OpenSearchService.html': {
      url: 'injectables/OpenSearchService.html',
      title: 'injectable - OpenSearchService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-search/open-search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentClusterUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                searchClient\n                            \n                            \n                                    Private\n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                aggregateQuery\n                            \n                            \n                                    Private\n                                convertMappingsToOutput\n                            \n                            \n                                    Async\n                                createProcessTree\n                            \n                            \n                                    Private\n                                    Async\n                                ensureClientAndClusterUrl\n                            \n                            \n                                    Private\n                                    Async\n                                getClient\n                            \n                            \n                                    Public\n                                getCurrentUserId\n                            \n                            \n                                    Async\n                                getFields\n                            \n                            \n                                    Async\n                                searchByQuery\n                            \n                            \n                                    Public\n                                setUserId\n                            \n                            \n                                    Private\n                                    Async\n                                updateClientFromUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(opensearchClientProvider: OpenSearchClientProvider, cachingService: CachingService)\n                    \n                \n                        \n                            \n                                Defined in src/open-search/open-search.service.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        opensearchClientProvider\n                                                  \n                                                        \n                                                                        OpenSearchClientProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cachingService\n                                                  \n                                                        \n                                                                        CachingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        aggregateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    aggregateQuery(input: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        convertMappingsToOutput\n                        \n                    \n                \n            \n            \n                \n                        \n                    convertMappingsToOutput(input: MappingInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:295\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                            MappingInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Output[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProcessTree\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProcessTree(logs: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:328\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logs\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureClientAndClusterUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureClientAndClusterUrl()\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Ensures that both the client and cluster URL are initialized\nThis is needed before checking cache to avoid using 'default' as cluster URL\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The configured OpenSearch client\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClient()\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCurrentUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUserId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Get the current user ID\n\n\n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The user ID or undefined if not available\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFields()\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:246\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        searchByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    searchByQuery(input: ISearchQueryRequestPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                            ISearchQueryRequestPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Set the user ID - should be called from controllers with access to the request object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID to set\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateClientFromUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateClientFromUserId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/open-search/open-search.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Update the OpenSearch client based on the current user ID\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentClusterUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/open-search/open-search.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(OpenSearchService.name)\n                    \n                \n                    \n                        \n                                Defined in src/open-search/open-search.service.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        searchClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OpensearchClient | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/open-search/open-search.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/open-search/open-search.service.ts:43\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\n// import bencode from 'bencode';\nimport { OpensearchClient } from 'nestjs-opensearch';\nimport { CachingService } from 'src/caching/caching.service';\nimport { ISearchQueryRequestPayload } from './dto/open-search-query.dto';\nimport { OpenSearchClientProvider } from './opensearch-client.provider';\n\ntype MappingProperties = {\n  [key: string]: {\n    type: string;\n    properties?: MappingProperties;\n  };\n};\n\ninterface MappingInput {\n  mappings: {\n    properties: MappingProperties;\n  };\n}\n\ninterface Output {\n  label: string;\n  name: string;\n  type: string;\n}\n\ninterface ProcessNode {\n  pid: number;\n  name: string;\n  cmd: string;\n  filePath: string;\n  fileHash: string;\n  user: string;\n  integrityLevel: number;\n  children: ProcessNode[];\n}\n@Injectable()\nexport class OpenSearchService {\n  private readonly logger = new Logger(OpenSearchService.name);\n  private searchClient: OpensearchClient | undefined;\n  private currentClusterUrl: string | undefined;\n\n  private userId: string | undefined;\n\n  public constructor(\n    private readonly opensearchClientProvider: OpenSearchClientProvider,\n    private cachingService: CachingService,\n  ) {}\n\n  /**\n   * Get the current user ID\n   * @returns The user ID or undefined if not available\n   */\n  public getCurrentUserId(): string | undefined {\n    return this.userId;\n  }\n  \n  /**\n   * Set the user ID - should be called from controllers with access to the request object\n   * @param userId The user ID to set\n   */\n  public setUserId(userId: string): void {\n    if (this.userId !== userId) {\n      this.userId = userId;\n      this.logger.log(`User ID set to: ${userId}`);\n      // Force client refresh when user ID changes\n      this.searchClient = undefined;\n    }\n  }\n\n  // async singleDataIngestion(input: any): Promise {\n  //   this.logger.log(\n  //     `Inside singleUpload() Method | Ingesting single data with index ${input.indexName} `,\n  //   );\n\n  //   const data = input.data[0];\n\n  //   try {\n  //     const res = await this.searchClient.index({\n  //       id: data.id,\n  //       index: input.indexName,\n  //       body: data,\n  //     });\n  //     return res.body;\n  //   } catch (err) {\n  //     this.logger.error(`Exception occurred : ${err})`);\n  //     return {\n  //       httpCode: 500,\n  //       error: err,\n  //     };\n  //   }\n  // }\n\n  /**\n   * Update the OpenSearch client based on the current user ID\n   */\n  private async updateClientFromUserId(): Promise {\n    // Get the cluster URL first\n    this.currentClusterUrl = await this.opensearchClientProvider.getNodeUrl(this.userId);\n    \n    // Then get the client\n    this.searchClient = await this.opensearchClientProvider.getClient(this.userId);\n    this.logger.log(`OpenSearch client updated for user: ${this.userId || 'default'} with cluster: ${this.currentClusterUrl}`);\n  }\n\n  /**\n   * Get the current OpenSearch client\n   * @returns The configured OpenSearch client\n   */\n  /**\n   * Ensures that both the client and cluster URL are initialized\n   * This is needed before checking cache to avoid using 'default' as cluster URL\n   */\n  private async ensureClientAndClusterUrl(): Promise {\n    if (!this.currentClusterUrl || !this.searchClient) {\n      await this.updateClientFromUserId();\n    }\n  }\n\n  private async getClient(): Promise {\n    if (!this.searchClient) {\n      // Initialize with client based on user ID if available\n      await this.updateClientFromUserId();\n    }\n    return this.searchClient as OpensearchClient;\n  }\n\n  async searchByQuery(input: ISearchQueryRequestPayload): Promise {\n    this.logger.log(`Inside searchByQuery() Method`);\n    let body: any;\n\n    this.logger.log(\n      `Searching for query: ${input.query} in the indexes : ${input?.indexes?.join(',')} `,\n    );\n    // eslint-disable-next-line prefer-const\n    body = {\n      ...(input.options ?? {}),\n      aggs: input.aggs ?? {},\n      query: input.query,\n    };\n\n    const msearchRequest: any = [];\n\n    input.indexes.map((index) => {\n      msearchRequest.push({ index: index });\n      msearchRequest.push({ ...body });\n    });\n\n    try {\n      // Ensure we have the client and cluster URL before checking cache\n      // This makes sure this.currentClusterUrl is populated\n      await this.ensureClientAndClusterUrl();\n      \n      // Create a cache key that includes the cluster URL to avoid conflicts\n      const cacheKey = {\n        query: msearchRequest,\n        clusterUrl: this.currentClusterUrl || 'default'\n      };\n      \n      this.logger.log(`Checking cache with cluster URL: ${this.currentClusterUrl}`);\n      const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n\n      if (cacheData !== null) {\n        this.logger.log(`Returning data from cache for cluster: ${this.currentClusterUrl}`);\n        return cacheData;\n      }\n      this.logger.log(`Reading data from opensearch`);\n      const client = await this.getClient(); // Will use the already initialized client\n      const res = await client.msearch({\n        body: msearchRequest,\n      });\n\n      // this.logger.log(`Res`, res);\n\n      if (res.statusCode == 200) {\n        this.logger.log(`Saving data to redis cache for cluster: ${this.currentClusterUrl}`);\n        // Use the same cache key structure for saving\n        const cacheKey = {\n          query: msearchRequest,\n          clusterUrl: this.currentClusterUrl || 'default'\n        };\n        await this.cachingService.setCacheByQuery(cacheKey, res);\n      }\n\n      return res;\n    } catch (error) {\n      this.logger.error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n\n      // return error\n\n      throw new Error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n    }\n  }\n\n  async aggregateQuery(input: any): Promise {\n    // console.log(JSON.stringify(input));\n\n    this.logger.log(`Inside aggregateQuery() Method`);\n    try {\n      // Ensure we have the client and cluster URL before checking cache\n      await this.ensureClientAndClusterUrl();\n      \n      // Create a cache key that includes the cluster URL\n      const cacheKey = {\n        query: input,\n        clusterUrl: this.currentClusterUrl || 'default'\n      };\n      \n      this.logger.log(`Checking aggregate cache with cluster URL: ${this.currentClusterUrl}`);\n      const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n      if (cacheData !== null) {\n        this.logger.log(`Returning data from cache for cluster: ${this.currentClusterUrl}`);\n        return cacheData;\n      } else {\n        this.logger.log(`Reading data from opensearch`);\n        const client = await this.getClient();\n        const res = await client.msearch({\n          body: input,\n        });\n\n        if (res.statusCode == 200) {\n          this.logger.log(`Saving data to redis cache for cluster: ${this.currentClusterUrl}`);\n          await this.cachingService.setCacheByQuery(cacheKey, res);\n          return res;\n        } else {\n          // return res;\n          new HttpException(\n            'Unable to process',\n            HttpStatus.INTERNAL_SERVER_ERROR,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n      return error\n      new HttpException('Timeout', HttpStatus.GATEWAY_TIMEOUT);\n    }\n  }\n\n  async getFields(): Promise {\n    // Ensure we have the client and cluster URL before checking cache\n    await this.ensureClientAndClusterUrl();\n    \n    // Create a cache key that includes the cluster URL\n    const baseCacheKey = {\n      index: 'esdl-alerts-*',\n      type: 'get-fileds',\n    };\n    \n    const cacheKey = {\n      query: baseCacheKey,\n      clusterUrl: this.currentClusterUrl || 'default'\n    };\n    \n    this.logger.log(`Checking fields cache with cluster URL: ${this.currentClusterUrl}`);\n    const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n    if (cacheData) {\n      this.logger.log(`Returning fields data from cache for cluster: ${this.currentClusterUrl}`);\n      return cacheData;\n    } else {\n      const client = await this.getClient();\n      const data = await client.indices.getMapping({\n        index: '',\n      });\n\n      // console.log('data', data?.body['esdl-alerts-4.x-2024.11.05']);\n      const keys = Object.keys(data?.body);\n\n      // return data?.body[keys[keys.length - 1]];\n\n      const options = await Promise.all(\n        this.convertMappingsToOutput(data?.body[keys[keys.length - 1]]),\n      );\n      if (options.length) {\n        this.logger.log(`Saving fields data to redis cache for cluster: ${this.currentClusterUrl}`);\n        await this.cachingService.setCacheByQuery(cacheKey,options);\n      }\n\n      return options;\n    }\n\n    // return this.searchClient.indices.getMapping({\n    //   index: 'esdl-archives-4.x-2024.07.01',\n    // });\n  }\n\n  // conversion functions\n\n  private convertMappingsToOutput(input: MappingInput): Output[] {\n    const result: Output[] = [];\n\n    function processProperties(\n      properties: MappingProperties,\n      parentKey: string = '',\n    ): void {\n      for (const key in properties) {\n        const currentProperty = properties[key];\n        const currentKey = parentKey ? `${parentKey}.${key}` : key;\n\n        if (currentProperty.properties) {\n          // If there are nested properties, recursively process them\n          processProperties(currentProperty.properties, currentKey);\n        } else {\n          // Add the current property to the result\n          result.push({\n            label: currentKey,\n            name: currentKey,\n            type: currentProperty.type,\n          });\n        }\n      }\n    }\n\n    // Start processing the top-level properties\n    processProperties(input.mappings.properties);\n\n    return result;\n  }\n\n\n\n  async createProcessTree(logs: any[]): Promise> {\n    const processMap: Record> = {};\n\n    // Step 1: Organize logs by tenant/endpoint\n    logs.forEach(log => {\n      const agentGuid = log.data.endpoint_agentGuid;\n      if (!processMap[agentGuid]) processMap[agentGuid] = {};\n\n      const parentPid = log.data.parentPid;\n      const processPid = log.data.processPid;\n\n      // Create parent node if missing\n      if (parentPid && !processMap[agentGuid][parentPid]) {\n        processMap[agentGuid][parentPid] = {\n          pid: parentPid,\n          name: log.data.parentName,\n          cmd: log.data.parentCmd,\n          filePath: log.data.parentFilePath,\n          fileHash: log.data.parentFileHash,\n          user: log.data.parentUser,\n          integrityLevel: log.data.parentIntegrityLevel || 0,\n          children: []\n        };\n      }\n\n      // Create process node\n      if (!processMap[agentGuid][processPid]) {\n        processMap[agentGuid][processPid] = {\n          pid: processPid,\n          name: log.data.processName,\n          cmd: log.data.processCmd,\n          filePath: log.data.processFilePath,\n          fileHash: log.data.processFileHash,\n          user: log.data.processUser,\n          integrityLevel: log.data.integrityLevel || 0,\n          children: []\n        };\n      }\n\n      // Link child to parent\n      if (parentPid) {\n        processMap[agentGuid][parentPid].children.push(processMap[agentGuid][processPid]);\n      }\n    });\n\n    // Step 2: Extract trees per endpoint\n    const processTrees: Record = {};\n    Object.keys(processMap).forEach(agentGuid => {\n      processTrees[agentGuid] = Object.values(processMap[agentGuid]).filter(node => !logs.some(log => log.data.processPid === node.pid));\n    });\n\n    return processTrees;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/Output.html': {
      url: 'interfaces/Output.html',
      title: 'interface - Output',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Output\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-search/open-search.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\n// import bencode from 'bencode';\nimport { OpensearchClient } from 'nestjs-opensearch';\nimport { CachingService } from 'src/caching/caching.service';\nimport { ISearchQueryRequestPayload } from './dto/open-search-query.dto';\nimport { OpenSearchClientProvider } from './opensearch-client.provider';\n\ntype MappingProperties = {\n  [key: string]: {\n    type: string;\n    properties?: MappingProperties;\n  };\n};\n\ninterface MappingInput {\n  mappings: {\n    properties: MappingProperties;\n  };\n}\n\ninterface Output {\n  label: string;\n  name: string;\n  type: string;\n}\n\ninterface ProcessNode {\n  pid: number;\n  name: string;\n  cmd: string;\n  filePath: string;\n  fileHash: string;\n  user: string;\n  integrityLevel: number;\n  children: ProcessNode[];\n}\n@Injectable()\nexport class OpenSearchService {\n  private readonly logger = new Logger(OpenSearchService.name);\n  private searchClient: OpensearchClient | undefined;\n  private currentClusterUrl: string | undefined;\n\n  private userId: string | undefined;\n\n  public constructor(\n    private readonly opensearchClientProvider: OpenSearchClientProvider,\n    private cachingService: CachingService,\n  ) {}\n\n  /**\n   * Get the current user ID\n   * @returns The user ID or undefined if not available\n   */\n  public getCurrentUserId(): string | undefined {\n    return this.userId;\n  }\n  \n  /**\n   * Set the user ID - should be called from controllers with access to the request object\n   * @param userId The user ID to set\n   */\n  public setUserId(userId: string): void {\n    if (this.userId !== userId) {\n      this.userId = userId;\n      this.logger.log(`User ID set to: ${userId}`);\n      // Force client refresh when user ID changes\n      this.searchClient = undefined;\n    }\n  }\n\n  // async singleDataIngestion(input: any): Promise {\n  //   this.logger.log(\n  //     `Inside singleUpload() Method | Ingesting single data with index ${input.indexName} `,\n  //   );\n\n  //   const data = input.data[0];\n\n  //   try {\n  //     const res = await this.searchClient.index({\n  //       id: data.id,\n  //       index: input.indexName,\n  //       body: data,\n  //     });\n  //     return res.body;\n  //   } catch (err) {\n  //     this.logger.error(`Exception occurred : ${err})`);\n  //     return {\n  //       httpCode: 500,\n  //       error: err,\n  //     };\n  //   }\n  // }\n\n  /**\n   * Update the OpenSearch client based on the current user ID\n   */\n  private async updateClientFromUserId(): Promise {\n    // Get the cluster URL first\n    this.currentClusterUrl = await this.opensearchClientProvider.getNodeUrl(this.userId);\n    \n    // Then get the client\n    this.searchClient = await this.opensearchClientProvider.getClient(this.userId);\n    this.logger.log(`OpenSearch client updated for user: ${this.userId || 'default'} with cluster: ${this.currentClusterUrl}`);\n  }\n\n  /**\n   * Get the current OpenSearch client\n   * @returns The configured OpenSearch client\n   */\n  /**\n   * Ensures that both the client and cluster URL are initialized\n   * This is needed before checking cache to avoid using 'default' as cluster URL\n   */\n  private async ensureClientAndClusterUrl(): Promise {\n    if (!this.currentClusterUrl || !this.searchClient) {\n      await this.updateClientFromUserId();\n    }\n  }\n\n  private async getClient(): Promise {\n    if (!this.searchClient) {\n      // Initialize with client based on user ID if available\n      await this.updateClientFromUserId();\n    }\n    return this.searchClient as OpensearchClient;\n  }\n\n  async searchByQuery(input: ISearchQueryRequestPayload): Promise {\n    this.logger.log(`Inside searchByQuery() Method`);\n    let body: any;\n\n    this.logger.log(\n      `Searching for query: ${input.query} in the indexes : ${input?.indexes?.join(',')} `,\n    );\n    // eslint-disable-next-line prefer-const\n    body = {\n      ...(input.options ?? {}),\n      aggs: input.aggs ?? {},\n      query: input.query,\n    };\n\n    const msearchRequest: any = [];\n\n    input.indexes.map((index) => {\n      msearchRequest.push({ index: index });\n      msearchRequest.push({ ...body });\n    });\n\n    try {\n      // Ensure we have the client and cluster URL before checking cache\n      // This makes sure this.currentClusterUrl is populated\n      await this.ensureClientAndClusterUrl();\n      \n      // Create a cache key that includes the cluster URL to avoid conflicts\n      const cacheKey = {\n        query: msearchRequest,\n        clusterUrl: this.currentClusterUrl || 'default'\n      };\n      \n      this.logger.log(`Checking cache with cluster URL: ${this.currentClusterUrl}`);\n      const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n\n      if (cacheData !== null) {\n        this.logger.log(`Returning data from cache for cluster: ${this.currentClusterUrl}`);\n        return cacheData;\n      }\n      this.logger.log(`Reading data from opensearch`);\n      const client = await this.getClient(); // Will use the already initialized client\n      const res = await client.msearch({\n        body: msearchRequest,\n      });\n\n      // this.logger.log(`Res`, res);\n\n      if (res.statusCode == 200) {\n        this.logger.log(`Saving data to redis cache for cluster: ${this.currentClusterUrl}`);\n        // Use the same cache key structure for saving\n        const cacheKey = {\n          query: msearchRequest,\n          clusterUrl: this.currentClusterUrl || 'default'\n        };\n        await this.cachingService.setCacheByQuery(cacheKey, res);\n      }\n\n      return res;\n    } catch (error) {\n      this.logger.error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n\n      // return error\n\n      throw new Error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n    }\n  }\n\n  async aggregateQuery(input: any): Promise {\n    // console.log(JSON.stringify(input));\n\n    this.logger.log(`Inside aggregateQuery() Method`);\n    try {\n      // Ensure we have the client and cluster URL before checking cache\n      await this.ensureClientAndClusterUrl();\n      \n      // Create a cache key that includes the cluster URL\n      const cacheKey = {\n        query: input,\n        clusterUrl: this.currentClusterUrl || 'default'\n      };\n      \n      this.logger.log(`Checking aggregate cache with cluster URL: ${this.currentClusterUrl}`);\n      const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n      if (cacheData !== null) {\n        this.logger.log(`Returning data from cache for cluster: ${this.currentClusterUrl}`);\n        return cacheData;\n      } else {\n        this.logger.log(`Reading data from opensearch`);\n        const client = await this.getClient();\n        const res = await client.msearch({\n          body: input,\n        });\n\n        if (res.statusCode == 200) {\n          this.logger.log(`Saving data to redis cache for cluster: ${this.currentClusterUrl}`);\n          await this.cachingService.setCacheByQuery(cacheKey, res);\n          return res;\n        } else {\n          // return res;\n          new HttpException(\n            'Unable to process',\n            HttpStatus.INTERNAL_SERVER_ERROR,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n      return error\n      new HttpException('Timeout', HttpStatus.GATEWAY_TIMEOUT);\n    }\n  }\n\n  async getFields(): Promise {\n    // Ensure we have the client and cluster URL before checking cache\n    await this.ensureClientAndClusterUrl();\n    \n    // Create a cache key that includes the cluster URL\n    const baseCacheKey = {\n      index: 'esdl-alerts-*',\n      type: 'get-fileds',\n    };\n    \n    const cacheKey = {\n      query: baseCacheKey,\n      clusterUrl: this.currentClusterUrl || 'default'\n    };\n    \n    this.logger.log(`Checking fields cache with cluster URL: ${this.currentClusterUrl}`);\n    const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n    if (cacheData) {\n      this.logger.log(`Returning fields data from cache for cluster: ${this.currentClusterUrl}`);\n      return cacheData;\n    } else {\n      const client = await this.getClient();\n      const data = await client.indices.getMapping({\n        index: '',\n      });\n\n      // console.log('data', data?.body['esdl-alerts-4.x-2024.11.05']);\n      const keys = Object.keys(data?.body);\n\n      // return data?.body[keys[keys.length - 1]];\n\n      const options = await Promise.all(\n        this.convertMappingsToOutput(data?.body[keys[keys.length - 1]]),\n      );\n      if (options.length) {\n        this.logger.log(`Saving fields data to redis cache for cluster: ${this.currentClusterUrl}`);\n        await this.cachingService.setCacheByQuery(cacheKey,options);\n      }\n\n      return options;\n    }\n\n    // return this.searchClient.indices.getMapping({\n    //   index: 'esdl-archives-4.x-2024.07.01',\n    // });\n  }\n\n  // conversion functions\n\n  private convertMappingsToOutput(input: MappingInput): Output[] {\n    const result: Output[] = [];\n\n    function processProperties(\n      properties: MappingProperties,\n      parentKey: string = '',\n    ): void {\n      for (const key in properties) {\n        const currentProperty = properties[key];\n        const currentKey = parentKey ? `${parentKey}.${key}` : key;\n\n        if (currentProperty.properties) {\n          // If there are nested properties, recursively process them\n          processProperties(currentProperty.properties, currentKey);\n        } else {\n          // Add the current property to the result\n          result.push({\n            label: currentKey,\n            name: currentKey,\n            type: currentProperty.type,\n          });\n        }\n      }\n    }\n\n    // Start processing the top-level properties\n    processProperties(input.mappings.properties);\n\n    return result;\n  }\n\n\n\n  async createProcessTree(logs: any[]): Promise> {\n    const processMap: Record> = {};\n\n    // Step 1: Organize logs by tenant/endpoint\n    logs.forEach(log => {\n      const agentGuid = log.data.endpoint_agentGuid;\n      if (!processMap[agentGuid]) processMap[agentGuid] = {};\n\n      const parentPid = log.data.parentPid;\n      const processPid = log.data.processPid;\n\n      // Create parent node if missing\n      if (parentPid && !processMap[agentGuid][parentPid]) {\n        processMap[agentGuid][parentPid] = {\n          pid: parentPid,\n          name: log.data.parentName,\n          cmd: log.data.parentCmd,\n          filePath: log.data.parentFilePath,\n          fileHash: log.data.parentFileHash,\n          user: log.data.parentUser,\n          integrityLevel: log.data.parentIntegrityLevel || 0,\n          children: []\n        };\n      }\n\n      // Create process node\n      if (!processMap[agentGuid][processPid]) {\n        processMap[agentGuid][processPid] = {\n          pid: processPid,\n          name: log.data.processName,\n          cmd: log.data.processCmd,\n          filePath: log.data.processFilePath,\n          fileHash: log.data.processFileHash,\n          user: log.data.processUser,\n          integrityLevel: log.data.integrityLevel || 0,\n          children: []\n        };\n      }\n\n      // Link child to parent\n      if (parentPid) {\n        processMap[agentGuid][parentPid].children.push(processMap[agentGuid][processPid]);\n      }\n    });\n\n    // Step 2: Extract trees per endpoint\n    const processTrees: Record = {};\n    Object.keys(processMap).forEach(agentGuid => {\n      processTrees[agentGuid] = Object.values(processMap[agentGuid]).filter(node => !logs.some(log => log.data.processPid === node.pid));\n    });\n\n    return processTrees;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/ProcessNode.html': {
      url: 'interfaces/ProcessNode.html',
      title: 'interface - ProcessNode',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-search/open-search.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                        \n                                            cmd\n                                        \n                                \n                                \n                                        \n                                            fileHash\n                                        \n                                \n                                \n                                        \n                                            filePath\n                                        \n                                \n                                \n                                        \n                                            integrityLevel\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            pid\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:         ProcessNode[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ProcessNode[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cmd\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cmd:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileHash\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileHash:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        integrityLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        integrityLevel:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\n// import bencode from 'bencode';\nimport { OpensearchClient } from 'nestjs-opensearch';\nimport { CachingService } from 'src/caching/caching.service';\nimport { ISearchQueryRequestPayload } from './dto/open-search-query.dto';\nimport { OpenSearchClientProvider } from './opensearch-client.provider';\n\ntype MappingProperties = {\n  [key: string]: {\n    type: string;\n    properties?: MappingProperties;\n  };\n};\n\ninterface MappingInput {\n  mappings: {\n    properties: MappingProperties;\n  };\n}\n\ninterface Output {\n  label: string;\n  name: string;\n  type: string;\n}\n\ninterface ProcessNode {\n  pid: number;\n  name: string;\n  cmd: string;\n  filePath: string;\n  fileHash: string;\n  user: string;\n  integrityLevel: number;\n  children: ProcessNode[];\n}\n@Injectable()\nexport class OpenSearchService {\n  private readonly logger = new Logger(OpenSearchService.name);\n  private searchClient: OpensearchClient | undefined;\n  private currentClusterUrl: string | undefined;\n\n  private userId: string | undefined;\n\n  public constructor(\n    private readonly opensearchClientProvider: OpenSearchClientProvider,\n    private cachingService: CachingService,\n  ) {}\n\n  /**\n   * Get the current user ID\n   * @returns The user ID or undefined if not available\n   */\n  public getCurrentUserId(): string | undefined {\n    return this.userId;\n  }\n  \n  /**\n   * Set the user ID - should be called from controllers with access to the request object\n   * @param userId The user ID to set\n   */\n  public setUserId(userId: string): void {\n    if (this.userId !== userId) {\n      this.userId = userId;\n      this.logger.log(`User ID set to: ${userId}`);\n      // Force client refresh when user ID changes\n      this.searchClient = undefined;\n    }\n  }\n\n  // async singleDataIngestion(input: any): Promise {\n  //   this.logger.log(\n  //     `Inside singleUpload() Method | Ingesting single data with index ${input.indexName} `,\n  //   );\n\n  //   const data = input.data[0];\n\n  //   try {\n  //     const res = await this.searchClient.index({\n  //       id: data.id,\n  //       index: input.indexName,\n  //       body: data,\n  //     });\n  //     return res.body;\n  //   } catch (err) {\n  //     this.logger.error(`Exception occurred : ${err})`);\n  //     return {\n  //       httpCode: 500,\n  //       error: err,\n  //     };\n  //   }\n  // }\n\n  /**\n   * Update the OpenSearch client based on the current user ID\n   */\n  private async updateClientFromUserId(): Promise {\n    // Get the cluster URL first\n    this.currentClusterUrl = await this.opensearchClientProvider.getNodeUrl(this.userId);\n    \n    // Then get the client\n    this.searchClient = await this.opensearchClientProvider.getClient(this.userId);\n    this.logger.log(`OpenSearch client updated for user: ${this.userId || 'default'} with cluster: ${this.currentClusterUrl}`);\n  }\n\n  /**\n   * Get the current OpenSearch client\n   * @returns The configured OpenSearch client\n   */\n  /**\n   * Ensures that both the client and cluster URL are initialized\n   * This is needed before checking cache to avoid using 'default' as cluster URL\n   */\n  private async ensureClientAndClusterUrl(): Promise {\n    if (!this.currentClusterUrl || !this.searchClient) {\n      await this.updateClientFromUserId();\n    }\n  }\n\n  private async getClient(): Promise {\n    if (!this.searchClient) {\n      // Initialize with client based on user ID if available\n      await this.updateClientFromUserId();\n    }\n    return this.searchClient as OpensearchClient;\n  }\n\n  async searchByQuery(input: ISearchQueryRequestPayload): Promise {\n    this.logger.log(`Inside searchByQuery() Method`);\n    let body: any;\n\n    this.logger.log(\n      `Searching for query: ${input.query} in the indexes : ${input?.indexes?.join(',')} `,\n    );\n    // eslint-disable-next-line prefer-const\n    body = {\n      ...(input.options ?? {}),\n      aggs: input.aggs ?? {},\n      query: input.query,\n    };\n\n    const msearchRequest: any = [];\n\n    input.indexes.map((index) => {\n      msearchRequest.push({ index: index });\n      msearchRequest.push({ ...body });\n    });\n\n    try {\n      // Ensure we have the client and cluster URL before checking cache\n      // This makes sure this.currentClusterUrl is populated\n      await this.ensureClientAndClusterUrl();\n      \n      // Create a cache key that includes the cluster URL to avoid conflicts\n      const cacheKey = {\n        query: msearchRequest,\n        clusterUrl: this.currentClusterUrl || 'default'\n      };\n      \n      this.logger.log(`Checking cache with cluster URL: ${this.currentClusterUrl}`);\n      const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n\n      if (cacheData !== null) {\n        this.logger.log(`Returning data from cache for cluster: ${this.currentClusterUrl}`);\n        return cacheData;\n      }\n      this.logger.log(`Reading data from opensearch`);\n      const client = await this.getClient(); // Will use the already initialized client\n      const res = await client.msearch({\n        body: msearchRequest,\n      });\n\n      // this.logger.log(`Res`, res);\n\n      if (res.statusCode == 200) {\n        this.logger.log(`Saving data to redis cache for cluster: ${this.currentClusterUrl}`);\n        // Use the same cache key structure for saving\n        const cacheKey = {\n          query: msearchRequest,\n          clusterUrl: this.currentClusterUrl || 'default'\n        };\n        await this.cachingService.setCacheByQuery(cacheKey, res);\n      }\n\n      return res;\n    } catch (error) {\n      this.logger.error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n\n      // return error\n\n      throw new Error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n    }\n  }\n\n  async aggregateQuery(input: any): Promise {\n    // console.log(JSON.stringify(input));\n\n    this.logger.log(`Inside aggregateQuery() Method`);\n    try {\n      // Ensure we have the client and cluster URL before checking cache\n      await this.ensureClientAndClusterUrl();\n      \n      // Create a cache key that includes the cluster URL\n      const cacheKey = {\n        query: input,\n        clusterUrl: this.currentClusterUrl || 'default'\n      };\n      \n      this.logger.log(`Checking aggregate cache with cluster URL: ${this.currentClusterUrl}`);\n      const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n      if (cacheData !== null) {\n        this.logger.log(`Returning data from cache for cluster: ${this.currentClusterUrl}`);\n        return cacheData;\n      } else {\n        this.logger.log(`Reading data from opensearch`);\n        const client = await this.getClient();\n        const res = await client.msearch({\n          body: input,\n        });\n\n        if (res.statusCode == 200) {\n          this.logger.log(`Saving data to redis cache for cluster: ${this.currentClusterUrl}`);\n          await this.cachingService.setCacheByQuery(cacheKey, res);\n          return res;\n        } else {\n          // return res;\n          new HttpException(\n            'Unable to process',\n            HttpStatus.INTERNAL_SERVER_ERROR,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Exception occurred while doing : ${JSON.stringify(error?.name)})`,\n      );\n      return error\n      new HttpException('Timeout', HttpStatus.GATEWAY_TIMEOUT);\n    }\n  }\n\n  async getFields(): Promise {\n    // Ensure we have the client and cluster URL before checking cache\n    await this.ensureClientAndClusterUrl();\n    \n    // Create a cache key that includes the cluster URL\n    const baseCacheKey = {\n      index: 'esdl-alerts-*',\n      type: 'get-fileds',\n    };\n    \n    const cacheKey = {\n      query: baseCacheKey,\n      clusterUrl: this.currentClusterUrl || 'default'\n    };\n    \n    this.logger.log(`Checking fields cache with cluster URL: ${this.currentClusterUrl}`);\n    const cacheData = await this.cachingService.getCacheByQuery(cacheKey);\n    if (cacheData) {\n      this.logger.log(`Returning fields data from cache for cluster: ${this.currentClusterUrl}`);\n      return cacheData;\n    } else {\n      const client = await this.getClient();\n      const data = await client.indices.getMapping({\n        index: '',\n      });\n\n      // console.log('data', data?.body['esdl-alerts-4.x-2024.11.05']);\n      const keys = Object.keys(data?.body);\n\n      // return data?.body[keys[keys.length - 1]];\n\n      const options = await Promise.all(\n        this.convertMappingsToOutput(data?.body[keys[keys.length - 1]]),\n      );\n      if (options.length) {\n        this.logger.log(`Saving fields data to redis cache for cluster: ${this.currentClusterUrl}`);\n        await this.cachingService.setCacheByQuery(cacheKey,options);\n      }\n\n      return options;\n    }\n\n    // return this.searchClient.indices.getMapping({\n    //   index: 'esdl-archives-4.x-2024.07.01',\n    // });\n  }\n\n  // conversion functions\n\n  private convertMappingsToOutput(input: MappingInput): Output[] {\n    const result: Output[] = [];\n\n    function processProperties(\n      properties: MappingProperties,\n      parentKey: string = '',\n    ): void {\n      for (const key in properties) {\n        const currentProperty = properties[key];\n        const currentKey = parentKey ? `${parentKey}.${key}` : key;\n\n        if (currentProperty.properties) {\n          // If there are nested properties, recursively process them\n          processProperties(currentProperty.properties, currentKey);\n        } else {\n          // Add the current property to the result\n          result.push({\n            label: currentKey,\n            name: currentKey,\n            type: currentProperty.type,\n          });\n        }\n      }\n    }\n\n    // Start processing the top-level properties\n    processProperties(input.mappings.properties);\n\n    return result;\n  }\n\n\n\n  async createProcessTree(logs: any[]): Promise> {\n    const processMap: Record> = {};\n\n    // Step 1: Organize logs by tenant/endpoint\n    logs.forEach(log => {\n      const agentGuid = log.data.endpoint_agentGuid;\n      if (!processMap[agentGuid]) processMap[agentGuid] = {};\n\n      const parentPid = log.data.parentPid;\n      const processPid = log.data.processPid;\n\n      // Create parent node if missing\n      if (parentPid && !processMap[agentGuid][parentPid]) {\n        processMap[agentGuid][parentPid] = {\n          pid: parentPid,\n          name: log.data.parentName,\n          cmd: log.data.parentCmd,\n          filePath: log.data.parentFilePath,\n          fileHash: log.data.parentFileHash,\n          user: log.data.parentUser,\n          integrityLevel: log.data.parentIntegrityLevel || 0,\n          children: []\n        };\n      }\n\n      // Create process node\n      if (!processMap[agentGuid][processPid]) {\n        processMap[agentGuid][processPid] = {\n          pid: processPid,\n          name: log.data.processName,\n          cmd: log.data.processCmd,\n          filePath: log.data.processFilePath,\n          fileHash: log.data.processFileHash,\n          user: log.data.processUser,\n          integrityLevel: log.data.integrityLevel || 0,\n          children: []\n        };\n      }\n\n      // Link child to parent\n      if (parentPid) {\n        processMap[agentGuid][parentPid].children.push(processMap[agentGuid][processPid]);\n      }\n    });\n\n    // Step 2: Extract trees per endpoint\n    const processTrees: Record = {};\n    Object.keys(processMap).forEach(agentGuid => {\n      processTrees[agentGuid] = Object.values(processMap[agentGuid]).filter(node => !logs.some(log => log.data.processPid === node.pid));\n    });\n\n    return processTrees;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/RoleController.html': {
      url: 'controllers/RoleController.html',
      title: 'controller - RoleController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                role\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                list\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: ICreateRoleRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('create')\n                \n            \n\n                    \n                        \n                            Defined in src/role/role.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            ICreateRoleRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(inputs: IListEntitiesRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('list')\n                \n            \n\n                    \n                        \n                            Defined in src/role/role.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IListEntitiesRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: IUpdateRoleRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('update')\n                \n            \n\n                    \n                        \n                            Defined in src/role/role.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IUpdateRoleRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PrismaClient } from '@clean-start-dashboard/database';\nimport { IRole } from '@clean-start-dashboard/shared';\nimport { TypedBody, TypedRoute } from '@nestia/core';\nimport { Controller } from '@nestjs/common';\nimport { IListEntitiesRequest, IListEntitiesResponse } from 'src/common/dtos';\nimport { listRequestToFindManyArgs } from 'src/common/utils';\nimport { ICreateRoleRequest, IUpdateRoleRequest } from './dto/role.dto';\nimport { RoleService } from './role.service';\n\n@Controller('role')\nexport class RoleController {\n    constructor(\n        private readonly roleService: RoleService,\n    ) { }\n\n    // Create\n    @TypedRoute.Post('create')\n    public async create(\n        @TypedBody() inputs: ICreateRoleRequest,\n    ): Promise {\n        return await this.roleService.create({\n            ...inputs,\n        });\n    }\n\n    // Update\n    @TypedRoute.Post('update')\n    public async update(\n        @TypedBody() inputs: IUpdateRoleRequest,\n    ): Promise {\n        const { id, ...roleDetails } = inputs;\n        return await this.roleService.update({ ...roleDetails }, id);\n    }\n\n    // List\n    @TypedRoute.Post('list')\n    public async list(\n        @TypedBody() inputs: IListEntitiesRequest,\n    ): Promise | any> {\n        const params = listRequestToFindManyArgs(inputs, ['name']);\n        return await this.roleService.list(params ?? {});\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/RoleModule.html': {
      url: 'modules/RoleModule.html',
      title: 'module - RoleModule',
      body: "\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_RoleModule_exports\n\n\n\n\nRoleService \n\nRoleService \n\n\n\nRoleModule\n\nRoleModule\n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoleService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { RoleController } from './role.controller';\nimport { RoleService } from './role.service';\n\n@Global()\n@Module({\n\n  providers: [RoleService],\n  controllers: [RoleController],\n  exports: [RoleService],\n})\nexport class RoleModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/RoleService.html': {
      url: 'injectables/RoleService.html',
      title: 'injectable - RoleService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                getByName\n                            \n                            \n                                    Public\n                                    Async\n                                list\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/role/role.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: Prisma.RoleCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/role/role.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.RoleCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/role/role.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(query?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/role/role.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: Prisma.RoleUncheckedUpdateInput, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/role/role.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.RoleUncheckedUpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(RoleService.name)\n                    \n                \n                    \n                        \n                                Defined in src/role/role.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Prisma, PrismaService } from '@clean-start-dashboard/database';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { nullToUndefined } from 'src/common/utils';\n\n@Injectable()\nexport class RoleService {\n    private readonly logger = new Logger(RoleService.name);\n    constructor(private readonly prismaService: PrismaService) { }\n\n    // Create\n    public async create(inputs: Prisma.RoleCreateInput) {\n        this.logger.verbose(`--> Role creation started`);\n        const role = await this.prismaService.role.create(\n            {\n                data: inputs,\n            },\n        );\n        this.logger.verbose(`--> Role created`);\n        return role;\n    }\n\n    // Update\n    public async update(\n        inputs: Prisma.RoleUncheckedUpdateInput,\n        id: string,\n    ) {\n        this.logger.verbose(`--> role updating started`);\n        const role = await this.prismaService.role.update({\n            data: inputs,\n            where: { id },\n        });\n        this.logger.verbose(`--> role updated`);\n        return role;\n    }\n\n    // Get by name\n    public async getByName(name: string) {\n        this.logger.verbose(`--> Role by name started`);\n        const role = await this.prismaService.role.findUnique({\n            where: {\n                name: name,\n            },\n        });\n        this.logger.verbose(`--> dashboard fetched`);\n\n\n        return { ...role };\n    }\n\n    // list\n    public async list(query?: any) {\n        this.logger.verbose(`--> roles list started`);\n\n        const total = await this.prismaService.role.count({\n            where: query.where,\n        });\n        const roles =\n            await this.prismaService.role.findMany({\n                ...query,\n                where: {\n                    ...query.where,\n                },\n            });\n        this.logger.verbose(`--> roles fetched`);\n        return {\n            total: total,\n            items: roles.map((role) => nullToUndefined(role)),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'guards/RolesGuard.html': {
      url: 'guards/RolesGuard.html',
      title: 'guard - RolesGuard',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/permissions.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(roleService: RoleService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/guards/permissions.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/permissions.guard.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    Logger,\n    UnauthorizedException\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { Permissions } from 'src/decorators/permission.decorator';\nimport { RoleService } from 'src/role/role.service';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    private readonly logger = new Logger(RolesGuard.name);\n    constructor(private roleService: RoleService, private reflector: Reflector) { }\n\n    canActivate(context: ExecutionContext): boolean | Promise | Observable {\n        const request = context.switchToHttp().getRequest();\n\n        const userPermissions = request?.user?.role?.permissions ?? []\n\n        const permissions = this.reflector.get(Permissions, context.getHandler());\n\n        if (!permissions) {\n            return true;\n        }\n\n        const allowed = permissions.some((permission) =>\n            userPermissions?.includes(permission)\n        );\n\n        if (allowed) {\n            return true;\n\n        } else {\n\n            this.logger.error(`User does not have the required permissions: ${permissions}`);\n            throw new UnauthorizedException('User does not have the required permissions' + JSON.stringify(permissions));\n        }\n\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/UserVariableController.html': {
      url: 'controllers/UserVariableController.html',
      title: 'controller - UserVariableController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  UserVariableController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-variable/user-variable.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user-variable\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                list\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: ICreateUserVariableRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['variable.create'])@('create')\n                \n            \n\n                    \n                        \n                            Defined in src/user-variable/user-variable.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            ICreateUserVariableRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(inputs: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['variable.delete'])@('delete')\n                \n            \n\n                    \n                        \n                            Defined in src/user-variable/user-variable.controller.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(query: IGetUserVariableRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['variable.view'])@('get')\n                \n            \n\n                    \n                        \n                            Defined in src/user-variable/user-variable.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetUserVariableRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(inputs: IListEntitiesRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['variable.view'])@('list')\n                \n            \n\n                    \n                        \n                            Defined in src/user-variable/user-variable.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IListEntitiesRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: IUpdateUserVariableRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['variable.modify'])@('update')\n                \n            \n\n                    \n                        \n                            Defined in src/user-variable/user-variable.controller.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IUpdateUserVariableRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PrismaClient } from '@clean-start-dashboard/database';\nimport { IUserVariable } from '@clean-start-dashboard/shared';\nimport { TypedBody, TypedQuery, TypedRoute } from '@nestia/core';\nimport { Controller, NotAcceptableException, UseGuards } from '@nestjs/common';\nimport { IListEntitiesRequest, IListEntitiesResponse } from 'src/common/dtos';\nimport { listRequestToFindManyArgs } from 'src/common/utils';\nimport { Permissions } from 'src/decorators/permission.decorator';\nimport { User } from 'src/decorators/user.decorator';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { RolesGuard } from 'src/guards/permissions.guard';\nimport {\n  ICreateUserVariableRequest,\n  IGetUserVariableRequest,\n  IUpdateUserVariableRequest,\n} from './dto/user-variable.dto';\nimport { UserVariableService } from './user-variable.service';\n\n@Controller('user-variable')\n@UseGuards(RolesGuard)\n@UseGuards(AuthGuard)\nexport class UserVariableController {\n  constructor(private readonly userVariableService: UserVariableService) { }\n\n  @Permissions(['variable.create'])\n  @TypedRoute.Post('create')\n  public async create(\n    @TypedBody() inputs: ICreateUserVariableRequest,\n    @User() user: any,\n  ): Promise {\n    const isAvailable = await this.userVariableService.getByUserIdAndQuery(\n      user?.user_data?.id,\n      {\n        key: inputs.key,\n        type: inputs.type,\n        ...(inputs.dashboardId ? { dashboardId: inputs.dashboardId } : {}),\n      },\n    );\n    if (isAvailable) {\n      throw new NotAcceptableException('Key already exists');\n    }\n\n    return await this.userVariableService.create({\n      ...inputs,\n\n      isPublic: false,\n      ownerId: user?.user_data?.id,\n      organizationId: user?.user_data?.id,\n    });\n  }\n\n  // Get the user variable by id\n  @Permissions(['variable.view'])\n  @TypedRoute.Get('get')\n  public async get(@TypedQuery() query: IGetUserVariableRequest): Promise {\n    return await this.userVariableService.getById(query.id);\n  }\n\n  // List all the variables available to the user\n  @Permissions(['variable.view'])\n  @TypedRoute.Post('list')\n  public async list(\n    @TypedBody() inputs: IListEntitiesRequest,\n    @User() user: any,\n  ): Promise> {\n    const params = listRequestToFindManyArgs(inputs, ['key']);\n\n\n\n    return await this.userVariableService.list(\n      params\n        ? {\n          ...params,\n          where: {\n            ...(params?.where ?? {}),\n            AND: [\n              ...((params?.where?.AND as any[]) ?? []),\n              {\n                OR: [\n                  {\n                    ownerId: user?.user_data?.id,\n                  },\n                  {\n                    isPublic: true,\n                  },\n                ],\n              },\n            ],\n          },\n        }\n        : {\n          where: {\n            AND: [\n              {\n                OR: [\n                  {\n                    ownerId: user?.user_data?.id,\n                  },\n                  {\n                    isPublic: true,\n                  },\n                ],\n              },\n            ],\n          },\n        },\n    );\n  }\n\n  // Update the user variable\n  @Permissions(['variable.modify'])\n  @TypedRoute.Post('update')\n  public async update(\n    @TypedBody() inputs: IUpdateUserVariableRequest,\n  ): Promise {\n    const { id, ...variableDetails } = inputs;\n    return await this.userVariableService.update(\n      { ...(variableDetails as any) },\n      id,\n    );\n  }\n\n  // Delete the user variable\n  @Permissions(['variable.delete'])\n  @TypedRoute.Delete('delete')\n  public async delete(\n    @TypedBody() inputs: { id: string },\n  ): Promise {\n    return await this.userVariableService.delete(inputs.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/UserVariableModule.html': {
      url: 'modules/UserVariableModule.html',
      title: 'module - UserVariableModule',
      body: "\n                   \n\n\n\n\n    Modules\n    UserVariableModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserVariableModule\n\n\n\ncluster_UserVariableModule_providers\n\n\n\n\nUserVariableService\n\nUserVariableService\n\n\n\nUserVariableModule\n\nUserVariableModule\n\nUserVariableModule -->\n\nUserVariableService->UserVariableModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-variable/user-variable.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserVariableService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserVariableController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserVariableController } from './user-variable.controller';\nimport { UserVariableService } from './user-variable.service';\n\n@Module({\n  providers: [UserVariableService],\n  controllers: [UserVariableController],\n})\nexport class UserVariableModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/UserVariableService.html': {
      url: 'injectables/UserVariableService.html',
      title: 'injectable - UserVariableService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserVariableService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-variable/user-variable.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByUserId\n                            \n                            \n                                    Public\n                                    Async\n                                getByUserIdAndQuery\n                            \n                            \n                                    Public\n                                    Async\n                                list\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user-variable/user-variable.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: Prisma.UserVariableCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user-variable/user-variable.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            Prisma.UserVariableCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user-variable/user-variable.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user-variable/user-variable.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByUserId(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user-variable/user-variable.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getByUserIdAndQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByUserIdAndQuery(id: string, query: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user-variable/user-variable.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(query?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user-variable/user-variable.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: Prisma.UserVariableUncheckedUpdateInput, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user-variable/user-variable.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            Prisma.UserVariableUncheckedUpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UserVariableService.name)\n                    \n                \n                    \n                        \n                                Defined in src/user-variable/user-variable.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Prisma, PrismaService } from '@clean-start-dashboard/database';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { nullToUndefined } from 'src/common/utils';\n\n@Injectable()\nexport class UserVariableService {\n  private readonly logger = new Logger(UserVariableService.name);\n  constructor(private readonly prismaService: PrismaService) { }\n\n  public async create(inputs: Prisma.UserVariableCreateInput) {\n    this.logger.verbose(`--> user variable creation started`);\n    const userVariable = await this.prismaService.userVariable.create({\n      data: inputs,\n    });\n    this.logger.verbose(`--> user variable created`);\n    return userVariable;\n  }\n\n  public async list(query?: any) {\n    this.logger.verbose(`--> user variables list started`);\n\n    this.logger.debug(`--> user variables list query: ${JSON.stringify(query)}`);\n    const total = await this.prismaService.userVariable.count({\n      where: query?.where,\n    });\n    const userVariable = await this.prismaService.userVariable.findMany(query);\n    this.logger.verbose(`--> user variables fetched`);\n    return {\n      total: total,\n      items: userVariable.map((dashboard) => nullToUndefined(dashboard)),\n    };\n  }\n\n  public async getById(id: string) {\n    this.logger.verbose(`--> user variable by id started`);\n    const userVariable = await this.prismaService.userVariable.findUnique({\n      where: {\n        id,\n      },\n    });\n    this.logger.verbose(`--> user variable fetched`);\n    return userVariable;\n  }\n\n  public async getByUserId(id: string) {\n    this.logger.verbose(`--> user variable by ownerId started`);\n    const userVariable = await this.prismaService.userVariable.findMany({\n      where: {\n        ownerId: id,\n      },\n    });\n    this.logger.verbose(`--> user variable fetched`);\n    return userVariable;\n  }\n\n  public async getByUserIdAndQuery(\n    id: string,\n    query: { [key: string]: string | number },\n  ) {\n    this.logger.verbose(`--> user variable by ownerId and key started`);\n    const userVariable = await this.prismaService.userVariable.findFirst({\n      where: {\n        ownerId: id,\n        ...query,\n      },\n    });\n    this.logger.verbose(`--> user variable fetched`);\n    return userVariable;\n  }\n\n  public async update(\n    inputs: Prisma.UserVariableUncheckedUpdateInput,\n    id: string,\n  ) {\n    this.logger.verbose(`--> user variable updating started`);\n\n    const widget = await this.prismaService.userVariable.update({\n      data: { ...inputs, isPublic: inputs.isPublic ? true : false },\n      where: { id },\n    });\n    this.logger.verbose(`--> user variable updated`);\n    return widget;\n  }\n\n  // Delete the user variable\n  public async delete(id: string) {\n    this.logger.verbose(`--> user variable deletion started`);\n    const userVariable = await this.prismaService.userVariable.delete({\n      where: { id },\n    });\n    this.logger.verbose(`--> user variable deleted`);\n    return userVariable;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/WidgetController.html': {
      url: 'controllers/WidgetController.html',
      title: 'controller - WidgetController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  WidgetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/widget.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                widget\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                list\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                        \n                    aggregate(query: IGetQueryDataRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @('aggregate')\n                \n            \n\n                    \n                        \n                            Defined in src/widget/widget.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetQueryDataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: ICreateWidgetRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['widget.create'])@('create')\n                \n            \n\n                    \n                        \n                            Defined in src/widget/widget.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            ICreateWidgetRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(query: IGetWidgetRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['widget.view'])@('get')\n                \n            \n\n                    \n                        \n                            Defined in src/widget/widget.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetWidgetRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(inputs: IListEntitiesRequest, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['widget.view'])@('list')\n                \n            \n\n                    \n                        \n                            Defined in src/widget/widget.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IListEntitiesRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: IUpdateWidgetRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions(['widget.modify'])@('update')\n                \n            \n\n                    \n                        \n                            Defined in src/widget/widget.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                            IUpdateWidgetRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PrismaClient } from '.prisma/client';\nimport { IWidget } from '@clean-start-dashboard/shared';\nimport { TypedBody, TypedQuery, TypedRoute } from '@nestia/core';\nimport { Controller, UnauthorizedException, UseGuards } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IListEntitiesRequest, IListEntitiesResponse } from 'src/common/dtos';\nimport { listRequestToFindManyArgs } from 'src/common/utils';\nimport { Permissions } from 'src/decorators/permission.decorator';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { RolesGuard } from 'src/guards/permissions.guard';\nimport { User } from '../decorators/user.decorator';\nimport {\n  ICreateWidgetRequest,\n  IGetQueryDataRequest,\n  IGetWidgetRequest,\n  IUpdateWidgetRequest,\n} from './dto/widget.dto';\nimport { WidgetService } from './widget.service';\n\n@Controller('widget')\n@UseGuards(RolesGuard) // comment if you dont want to use roles guard\n@UseGuards(AuthGuard)\nexport class WidgetController {\n  constructor(private readonly widgetService: WidgetService, private configService: ConfigService) { }\n\n  @Permissions(['widget.create'])\n  @TypedRoute.Post('create')\n  public async create(\n    @TypedBody() inputs: ICreateWidgetRequest,\n  ): Promise {\n    const { access_token, ...widgetDetails } = inputs;\n\n    if (access_token === this.configService.get('WIDGET_ACCESS_TOKEN')) {\n      return await this.widgetService.create({\n        ...(widgetDetails as any),\n      });\n\n    } else {\n      throw new UnauthorizedException('Invalid access token');\n    }\n\n  }\n\n  @Permissions(['widget.view'])\n  @TypedRoute.Post('list')\n  public async list(\n    @TypedBody() inputs: IListEntitiesRequest,\n    @User() user: any,\n  ): Promise> {\n    const params = listRequestToFindManyArgs(\n      inputs,\n      ['title', 'tags'],\n    );\n\n    console.log(user);\n\n    return await this.widgetService.list(params ?? {});\n  }\n\n  @Permissions(['widget.view'])\n  @TypedRoute.Get('get')\n  public async get(\n    @TypedQuery() query: IGetWidgetRequest,\n  ): Promise {\n    return await this.widgetService.getById(query.id);\n  }\n\n  @Permissions(['widget.modify'])\n  @TypedRoute.Post('update')\n  public async update(\n    @TypedBody() inputs: IUpdateWidgetRequest,\n  ): Promise {\n    const { id, access_token, ...widgetDetails } = inputs;\n\n    console.log(access_token);\n\n\n    // if (access_token === this.configService.get('WIDGET_ACCESS_TOKEN')) {\n    //   return await this.widgetService.update({ ...(widgetDetails as any) }, id);\n\n    // } else {\n    //   throw new UnauthorizedException('Invalid access token');\n    // }\n\n    return await this.widgetService.update({ ...(widgetDetails as any) }, id);\n\n  }\n\n  @TypedRoute.Post('aggregate')\n  public async aggregate(\n    @TypedBody() query: IGetQueryDataRequest,\n  ): Promise {\n    return await this.widgetService.aggregate(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/WidgetModule.html': {
      url: 'modules/WidgetModule.html',
      title: 'module - WidgetModule',
      body: "\n                   \n\n\n\n\n    Modules\n    WidgetModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WidgetModule\n\n\n\ncluster_WidgetModule_imports\n\n\n\ncluster_WidgetModule_providers\n\n\n\ncluster_WidgetModule_exports\n\n\n\n\nOpenSearchModule\n\nOpenSearchModule\n\n\n\nWidgetModule\n\nWidgetModule\n\nWidgetModule -->\n\nOpenSearchModule->WidgetModule\n\n\n\n\n\nWidgetService \n\nWidgetService \n\nWidgetService  -->\n\nWidgetModule->WidgetService \n\n\n\n\n\nWidgetService\n\nWidgetService\n\nWidgetModule -->\n\nWidgetService->WidgetModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/widget/widget.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WidgetService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WidgetController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenSearchModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WidgetService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OpenSearchModule } from 'src/open-search/open-search.module';\nimport { WidgetController } from './widget.controller';\nimport { WidgetService } from './widget.service';\n\n@Module({\n  imports: [OpenSearchModule],\n  controllers: [WidgetController],\n  providers: [WidgetService],\n  exports: [WidgetService],\n})\nexport class WidgetModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/WidgetService.html': {
      url: 'injectables/WidgetService.html',
      title: 'injectable - WidgetService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WidgetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/widget/widget.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    Private\n                                convertToNestedAggs\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                list\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                updateDateHistogram\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, searchService: OpenSearchService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/widget/widget.service.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                        OpenSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                        \n                    aggregate(query: IGetQueryDataRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/widget/widget.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            IGetQueryDataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        convertToNestedAggs\n                        \n                    \n                \n            \n            \n                \n                        \n                    convertToNestedAggs(input: IWidgetConfig, timeBounds: literal type, sort: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/widget/widget.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                        IWidgetConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                timeBounds\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sort\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(inputs: Prisma.WidgetUncheckedCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/widget/widget.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.WidgetUncheckedCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/widget/widget.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(query?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/widget/widget.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(inputs: Prisma.WidgetUncheckedUpdateInput, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/widget/widget.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        Prisma.WidgetUncheckedUpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDateHistogram\n                        \n                    \n                \n            \n            \n                \nupdateDateHistogram(aggregation: Aggregation, newMin: number, newMax: number, timezone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/widget/widget.service.ts:478\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                aggregation\n                                            \n                                                            Aggregation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newMin\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newMax\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                timezone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(WidgetService.name)\n                    \n                \n                    \n                        \n                                Defined in src/widget/widget.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Prisma, PrismaService } from '@clean-start-dashboard/database';\nimport { IWidgetConfig } from '@clean-start-dashboard/shared';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport dayjs from 'dayjs';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport { nullToUndefined } from 'src/common/utils';\nimport { OpenSearchService } from 'src/open-search/open-search.service';\nimport { IAggs, IGetQueryDataRequest } from './dto/widget.dto';\n\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\n\ninterface Aggregation {\n  [key: string]: {\n    terms?: {\n      field: string;\n      size: number;\n      order: { [key: string]: string };\n      min_doc_count: number;\n    };\n    date_histogram?: {\n      time_zone: string;\n      interval: string;\n      field: string;\n      min_doc_count: number;\n      extended_bounds: { min: number; max: number };\n      format: string;\n    };\n    aggs?: Aggregation;\n  };\n}\n\n@Injectable()\nexport class WidgetService {\n  private readonly logger = new Logger(WidgetService.name);\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly searchService: OpenSearchService,\n    private readonly configService: ConfigService,\n  ) { }\n\n  public async create(inputs: Prisma.WidgetUncheckedCreateInput) {\n    const { widgetCategoryId, ...rest } = inputs;\n    this.logger.verbose(`--> widget creation started`);\n    const widget = await this.prismaService.widget.create({\n      data: {\n        ...rest,\n        ...(typeof widgetCategoryId === 'string'\n          ? {\n            widgetCategory: {\n              connect: { id: widgetCategoryId },\n            },\n          }\n          : {}),\n      },\n    });\n    this.logger.verbose(`--> widget created`);\n    return widget;\n  }\n\n  public async update(inputs: Prisma.WidgetUncheckedUpdateInput, id: string) {\n    this.logger.verbose(`--> widget updating started`);\n    const { widgetCategoryId, ...rest } = inputs;\n    const widget = await this.prismaService.widget.update({\n      data: {\n        ...rest,\n        ...(typeof widgetCategoryId === 'string'\n          ? {\n            widgetCategory: {\n              connect: { id: widgetCategoryId },\n            },\n          }\n          : {}),\n      },\n      where: { id },\n    });\n    this.logger.verbose(`--> widget updated`);\n    return widget;\n  }\n\n  public async list(query?: any) {\n    this.logger.verbose(`--> widget list started`);\n    const total = await this.prismaService.widget.count({\n      where: query.where,\n    });\n    const widgets = await this.prismaService.widget.findMany({\n      ...query,\n      where: {\n        ...query.where,\n      },\n      include: {\n        widgetCategory: true,\n      },\n    });\n    this.logger.verbose(`--> widget fetched`);\n    // return widgets;\n    return {\n      total: total,\n      items: widgets.map((widget) => nullToUndefined(widget)),\n    };\n  }\n\n  public async getById(id: string) {\n    this.logger.verbose(`--> widget by id started`);\n    const widget = await this.prismaService.widget.findUnique({\n      where: {\n        id,\n      },\n      include: {\n        widgetCategory: true,\n      },\n    });\n    this.logger.verbose(`--> widget fetched`);\n    return widget;\n  }\n\n  public async aggregate(query: IGetQueryDataRequest) {\n    this.logger.verbose(`--> widget get query data started`);\n    // console.log(query);\n\n    const timeBounds = {\n      min: new Date(query.filters.timeBounds.min).getTime(),\n      max: new Date(query.filters.timeBounds.max).getTime(),\n      timezone: dayjs(query.filters.timeBounds.min).tz(query.filters.timeBounds.timezone ?? \"Asia/Calcutta\").format('Z'),\n    };\n\n    console.log(\"timezone\", timeBounds.timezone, \"min\", timeBounds.min, \"max\", timeBounds.max);\n\n\n    const aggregations = await Promise.all(\n      query.config.map((config) =>\n        this.convertToNestedAggs(config, timeBounds, query?.filters?.sort),\n      ),\n    );\n\n    const params: any = [];\n    (await aggregations).map((aggregation) => {\n      params.push({\n        index: this.configService.get('OPENSEARCH_LOG_INDEX') ?? 'esdl-archives*',\n      });\n      params.push({ ...aggregation });\n    });\n\n    const data = this.searchService.aggregateQuery(params);\n    this.logger.verbose(`--> widget fetched`);\n    // return params;\n    return data;\n  }\n\n  //Private functions\n\n  private convertToNestedAggs(\n    input: IWidgetConfig,\n    timeBounds: {\n      timezone?: string; min: number; max: number\n    },\n    sort: { '@timestamp': { order: 'asc'; unmapped_type: 'boolean' } },\n  ): any {\n    let aggs: IAggs = {};\n\n    if (input.aggregation) {\n      aggs = this.updateDateHistogram(\n        input.aggregation,\n        timeBounds.min,\n        timeBounds.max,\n        timeBounds.timezone ?? \"+05:30\",\n      );\n    } else {\n      input.bucketAggs.reduce((acc, item) => {\n        const { field, settings, type } = item;\n        const {\n          min_doc_count,\n          order,\n          orderBy,\n          size,\n          interval,\n          filters,\n          precision,\n        } = settings;\n\n        const createTermsAgg = () => ({\n          terms: {\n            field: field!,\n            size: parseInt(size || '1', 10),\n            order: { [orderBy === '_count' ? '_count' : '_key']: order! },\n            min_doc_count: parseInt(min_doc_count || '0', 10),\n          },\n          aggs: {},\n        });\n\n        const createDateHistogramAgg = () => ({\n          date_histogram: {\n            interval: interval || '1d',\n            field: field!,\n            min_doc_count: parseInt(min_doc_count || '0', 10),\n            timezone: timeBounds.timezone,\n            extended_bounds: {\n              min: timeBounds.min,\n              max: timeBounds.max,\n            },\n            format: 'epoch_millis',\n          },\n          aggs: {},\n        });\n\n        const createFiltersAgg = () => ({\n          filters: {\n            filters: filters!.reduce(\n              (acc, filter) => {\n                acc[filter.label] = {\n                  query_string: { query: filter.query, analyze_wildcard: true },\n                };\n                return acc;\n              },\n              {} as {\n                [key: string]: {\n                  query_string: { query: string; analyze_wildcard: boolean };\n                };\n              },\n            ),\n          },\n          aggs: {},\n        });\n\n        const createGeohashGridAgg = () => ({\n          geohash_grid: {\n            field: field!,\n            precision: parseInt(precision || '0', 10),\n          },\n          aggs: {},\n        });\n\n        const createHistogramAgg = () => ({\n          histogram: {\n            field: field!,\n            interval: parseInt(interval || '0', 10),\n            min_doc_count: parseInt(min_doc_count || '0', 10),\n          },\n          aggs: {},\n        });\n\n        const createAgg = () => {\n          switch (type) {\n            case 'terms':\n              return createTermsAgg();\n            case 'date_histogram':\n              return createDateHistogramAgg();\n            case 'filters':\n              return createFiltersAgg();\n            case 'geohash_grid':\n              return createGeohashGridAgg();\n            case 'histogram':\n              return createHistogramAgg();\n            default:\n              return { aggs: {} };\n          }\n        };\n\n        const agg = createAgg();\n        acc[item.id] = agg;\n\n        return agg.aggs;\n      }, aggs);\n    }\n\n    // input.bucketAggs.forEach((agg, index) => {\n    //   const { id, field, settings, type } = agg;\n    //   const {\n    //     min_doc_count,\n    //     order,\n    //     orderBy,\n    //     size,\n    //     interval,\n    //     filters,\n    //     precision,\n    //   } = settings;\n\n    //   const createTermsAgg = () => ({\n    //     terms: {\n    //       field: field!,\n    //       size: parseInt(size || '1', 10),\n    //       order: { [orderBy === '_count' ? '_count' : '_key']: order! },\n    //       min_doc_count: parseInt(min_doc_count || '0', 10),\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createDateHistogramAgg = () => ({\n    //     date_histogram: {\n    //       interval: interval || '1d',\n    //       field: field!,\n    //       min_doc_count: parseInt(min_doc_count || '0', 10),\n    //       extended_bounds: {\n    //         min: timeBounds.min,\n    //         max: timeBounds.max,\n    //       },\n    //       format: 'epoch_millis',\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createFiltersAgg = () => ({\n    //     filters: {\n    //       filters: filters!.reduce(\n    //         (acc, filter) => {\n    //           acc[filter.label] = {\n    //             query_string: { query: filter.query, analyze_wildcard: true },\n    //           };\n    //           return acc;\n    //         },\n    //         {} as {\n    //           [key: string]: {\n    //             query_string: { query: string; analyze_wildcard: boolean };\n    //           };\n    //         },\n    //       ),\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createGeohashGridAgg = () => ({\n    //     geohash_grid: {\n    //       field: field!,\n    //       precision: parseInt(precision || '0', 10),\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createHistogramAgg = () => ({\n    //     histogram: {\n    //       field: field!,\n    //       interval: parseInt(interval || '0', 10),\n    //       min_doc_count: parseInt(min_doc_count || '0', 10),\n    //     },\n    //     aggs: {},\n    //   });\n\n    //   const createAgg = () => {\n    //     switch (type) {\n    //       case 'terms':\n    //         return createTermsAgg();\n    //       case 'date_histogram':\n    //         return createDateHistogramAgg();\n    //       case 'filters':\n    //         return createFiltersAgg();\n    //       case 'geohash_grid':\n    //         return createGeohashGridAgg();\n    //       case 'histogram':\n    //         return createHistogramAgg();\n    //       default:\n    //         return { aggs: {} };\n    //     }\n    //   };\n\n    //   const ids = id.split('.');\n    //   let currentAgg = aggs;\n\n    //   const level = index + 1;\n    //   let path;\n\n    //   ids.forEach((currentId, index) => {\n    //     if (!currentAgg[currentId]) {\n    //       currentAgg[currentId] = createAgg();\n    //     }\n    //     if (index  {\n    //   Object.keys(aggs).forEach((key) => {\n    //     if (Object.keys(aggs[key].aggs).length === 0) {\n    //       metrics.forEach((metric) => {\n    //         if (metric.type === 'count') {\n    //           aggs[key].aggs[metric.id] = { value_count: { field: '_index' } };\n    //         } else {\n    //           aggs[key].aggs[metric.id] = {\n    //             [metric.type]: { field: metric.field },\n    //           };\n    //         }\n    //       });\n    //     } else {\n    //       addMetrics(aggs[key].aggs, metrics);\n    //     }\n    //   });\n    // };\n\n    // // addMetrics(aggs, input.metrics);\n\n    // metrics.reduce((acc, metric) => {\n    //   const metricAgg: any = {};\n    //   switch (metric.type) {\n    //     case \"avg\":\n    //     case \"max\":\n    //     case \"min\":\n    //     case \"sum\":\n    //     case \"count\":\n    //       metricAgg[metric.id] = { [metric.type]: { field: metric.field } };\n    //       break;\n\n    //     case \"extended_stats\":\n    //       metricAgg[metric.id] = { extended_stats: { field: metric.field } };\n    //       break;\n\n    //     case \"percentiles\":\n    //       metricAgg[metric.id] = {\n    //         percentiles: { field: metric.field, percents: metric.settings?.percents },\n    //       };\n    //       break;\n\n    //     case \"cardinality\":\n    //       metricAgg[metric.id] = { cardinality: { field: metric.field } };\n    //       break;\n\n    //     case \"moving_avg\":\n    //       metricAgg[metric.id] = {\n    //         moving_avg: {\n    //           buckets_path: metric.field,\n    //           model: metric.settings?.model || \"simple\",\n    //           window: metric.settings?.window || 5,\n    //         },\n    //       };\n    //       break;\n\n    //     case \"moving_fn\":\n    //     case \"derivative\":\n    //     case \"cumulative_sum\":\n    //       metricAgg[metric.id] = { [metric.type]: { buckets_path: metric.field } };\n    //       break;\n    //   }\n\n    //   // Apply metrics to the lowest level aggs\n    //   Object.keys(aggs).forEach((key) => {\n    //     if (!aggs[key].aggs) aggs[key].aggs = {};\n    //     aggs[key].aggs = { ...aggs[key].aggs, ...metricAgg };\n    //   });\n\n    //   return acc;\n    // }, aggs);\n\n    return {\n      size: input.aggregation ? 0 : 1000,\n      query: {\n        bool: {\n          filter: [\n            {\n              range: {\n                [input.timeField]: {\n                  gte: timeBounds.min,\n                  lte: timeBounds.max,\n                  // gte: dayjs(timeBounds.min).tz(timeBounds.timezone ?? \"Asia/Calcutta\").toISOString(),\n                  // lte: dayjs(timeBounds.max).tz(timeBounds.timezone ?? \"Asia/Calcutta\").toISOString(),\n                  format: 'epoch_millis',\n                },\n              },\n            },\n            {\n              query_string: {\n                analyze_wildcard: true,\n                query: input.query,\n              },\n            },\n          ],\n        },\n      },\n      aggs,\n      sort: sort,\n    };\n  }\n\n  updateDateHistogram(\n    aggregation: Aggregation,\n    newMin: number,\n    newMax: number,\n    timezone: string,\n  ): any {\n    const updatedAggregation = { ...aggregation };\n    const traverseAndUpdate = (agg: Aggregation) => {\n      for (const key in agg) {\n        if (agg[key].date_histogram) {\n          agg[key].date_histogram.extended_bounds.min = newMin;\n          agg[key].date_histogram.extended_bounds.max = newMax;\n          agg[key].date_histogram.time_zone = timezone;\n        }\n        if (agg[key].aggs) {\n          traverseAndUpdate(agg[key].aggs);\n        }\n      }\n    };\n    traverseAndUpdate(updatedAggregation);\n    return updatedAggregation;\n  }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'coverage.html': {
      url: 'coverage.html',
      title: 'coverage - coverage',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        nestia.config.ts\n            \n            variable\n            NESTIA_CONFIG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/caching/caching.service.ts\n            \n            injectable\n            CachingService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos.ts\n            \n            interface\n            IAuthHeaders\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/dtos.ts\n            \n            interface\n            IListEntitiesRequest\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/dtos.ts\n            \n            interface\n            IListEntitiesResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/dtos.ts\n            \n            type alias\n            ComparableAttributes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/dtos.ts\n            \n            type alias\n            EntityFilterInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/dtos.ts\n            \n            type alias\n            EntityFilterRecord\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/dtos.ts\n            \n            type alias\n            EntitySortInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils.ts\n            \n            function\n            listRequestToFindManyArgs\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/common/utils.ts\n            \n            function\n            nullToUndefined\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils.ts\n            \n            type alias\n            NullToUndefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/dashboard-category/dashboard-category.controller.ts\n            \n            controller\n            DashboardCategoryController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dashboard-category/dashboard-category.service.ts\n            \n            injectable\n            DashboardCategoryService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dashboard-category/dto/dashboard-category.dto.ts\n            \n            interface\n            ICreateDashboardCategoryRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dashboard-category/dto/dashboard-category.dto.ts\n            \n            interface\n            IGetDashboardCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dashboard-category/dto/dashboard-category.dto.ts\n            \n            interface\n            IGetDashboardCategoryRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dashboard-category/dto/dashboard-category.dto.ts\n            \n            interface\n            IUpdateDashboardCategoryRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dashboard-profile/dashboard-profile.controller.ts\n            \n            controller\n            DashboardProfileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/dashboard-profile/dashboard-profile.service.ts\n            \n            injectable\n            DashboardProfileService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/dashboard-profile/dto/dashboard-profile.dto.ts\n            \n            interface\n            IAddToFavouriteRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dashboard-profile/dto/dashboard-profile.dto.ts\n            \n            interface\n            IGetDashboardProfile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dashboard-profile/dto/dashboard-profile.dto.ts\n            \n            interface\n            ISetDefaultDashbordRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dashboard/dashboard.controller.ts\n            \n            controller\n            DashboardController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/dashboard/dashboard.service.ts\n            \n            injectable\n            DashboardService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/dashboard/dto/dashboard.dto.ts\n            \n            interface\n            ICreateDashboardRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dashboard/dto/dashboard.dto.ts\n            \n            interface\n            IGetDashboard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dashboard/dto/dashboard.dto.ts\n            \n            interface\n            IGetDashboardRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dashboard/dto/dashboard.dto.ts\n            \n            interface\n            IUpdateDashboardRequest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/decorators/permission.decorator.ts\n            \n            variable\n            Permissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/grpc/grpc.service.ts\n            \n            injectable\n            GrpcService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/grpc/grpc.service.ts\n            \n            interface\n            InterfaceResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/grpc/grpc.service.ts\n            \n            interface\n            InterfaceService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guards/permissions.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/open-search/dto/open-search-query.dto.ts\n            \n            interface\n            ISearchQueryRequestPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/open-search/open-search.controller.ts\n            \n            controller\n            OpenSearchController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/open-search/open-search.service.ts\n            \n            injectable\n            OpenSearchService\n            \n                25 %\n                (4/16)\n            \n        \n        \n            \n                \n                src/open-search/open-search.service.ts\n            \n            interface\n            MappingInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/open-search/open-search.service.ts\n            \n            interface\n            Output\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/open-search/open-search.service.ts\n            \n            interface\n            ProcessNode\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/open-search/open-search.service.ts\n            \n            type alias\n            MappingProperties\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/open-search/opensearch-client.provider.ts\n            \n            injectable\n            OpenSearchClientProvider\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/role/dto/role.dto.ts\n            \n            interface\n            ICreateRoleRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/dto/role.dto.ts\n            \n            interface\n            IGetRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/dto/role.dto.ts\n            \n            interface\n            IGetRoleRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/role/dto/role.dto.ts\n            \n            interface\n            IUpdateRoleRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user-variable/dto/user-variable.dto.ts\n            \n            interface\n            ICreateUserVariableRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-variable/dto/user-variable.dto.ts\n            \n            interface\n            IGetUserVariable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-variable/dto/user-variable.dto.ts\n            \n            interface\n            IGetUserVariableRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-variable/dto/user-variable.dto.ts\n            \n            interface\n            IUpdateUserVariableRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-variable/user-variable.controller.ts\n            \n            controller\n            UserVariableController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-variable/user-variable.service.ts\n            \n            injectable\n            UserVariableService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/widget/dto/widget.dto.ts\n            \n            interface\n            IAggs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/widget/dto/widget.dto.ts\n            \n            interface\n            ICreateWidgetRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/widget/dto/widget.dto.ts\n            \n            interface\n            IGetQueryDataFilter\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/widget/dto/widget.dto.ts\n            \n            interface\n            IGetQueryDataRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/widget/dto/widget.dto.ts\n            \n            interface\n            IGetWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/widget/dto/widget.dto.ts\n            \n            interface\n            IGetWidgetRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/widget/dto/widget.dto.ts\n            \n            interface\n            IUpdateWidgetRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/widget/widget.controller.ts\n            \n            controller\n            WidgetController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/widget/widget.service.ts\n            \n            injectable\n            WidgetService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/widget/widget.service.ts\n            \n            interface\n            Aggregation\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'dependencies.html': {
      url: 'dependencies.html',
      title: 'package-dependencies - dependencies',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @clean-start-dashboard/database : *\n        \n            @clean-start-dashboard/shared : *\n        \n            @grpc/grpc-js : ^1.12.2\n        \n            @grpc/proto-loader : ^0.7.13\n        \n            @nestia/core : ^3.13.0\n        \n            @nestia/e2e : ^0.7.0\n        \n            @nestia/fetcher : ^3.13.0\n        \n            @nestia/sdk : ^3.13.0\n        \n            @nestjs/cache-manager : ^2.2.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/microservices : ^10.4.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.0.7\n        \n            @opensearch-project/opensearch : ^2.12.0\n        \n            bencode : ^4.0.0\n        \n            cache-manager : ^5.7.6\n        \n            cache-manager-redis-yet : ^5.1.4\n        \n            dayjs : ^1.11.13\n        \n            express-basic-auth : ^1.2.1\n        \n            nestjs-opensearch : ^0.4.0\n        \n            opossum : ^8.1.4\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typia : ^6.10.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/functions.html': {
      url: 'miscellaneous/functions.html',
      title: 'miscellaneous-functions - functions',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            listRequestToFindManyArgs   (src/.../utils.ts)\n                        \n                        \n                            nullToUndefined   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        listRequestToFindManyArgs\n                        \n                    \n                \n            \n            \n                \nlistRequestToFindManyArgs(request: IListEntitiesRequest, searchFields)\n                \n            \n\n\n\n\n            \n                \n                        Convert a list request to prisma find many args\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IListEntitiesRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The request to convert\n\n                                            \n                                        \n                                        \n                                                searchFields\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Prisma.Args\n\n                        \n                            \n                                The prisma find many args\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nullToUndefined\n                        \n                    \n                \n            \n            \n                \nnullToUndefined(value: T)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NullToUndefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'index.html': {
      url: 'index.html',
      title: 'getting-started - index',
      body: '\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you\'d like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules.html': {
      url: 'modules.html',
      title: 'modules - modules',
      body: '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CachingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DashboardCategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DashboardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DashboardProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GrpcModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenSearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserVariableModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WidgetModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'overview.html': {
      url: 'overview.html',
      title: 'overview - overview',
      body: '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CachingModule\n\n\n\ncluster_CachingModule_exports\n\n\n\ncluster_CachingModule_providers\n\n\n\ncluster_DashboardCategoryModule\n\n\n\ncluster_DashboardCategoryModule_providers\n\n\n\ncluster_DashboardModule\n\n\n\ncluster_DashboardModule_providers\n\n\n\ncluster_DashboardProfileModule\n\n\n\ncluster_DashboardProfileModule_providers\n\n\n\ncluster_GrpcModule\n\n\n\ncluster_GrpcModule_exports\n\n\n\ncluster_GrpcModule_providers\n\n\n\ncluster_OpenSearchModule\n\n\n\ncluster_OpenSearchModule_exports\n\n\n\ncluster_OpenSearchModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_UserVariableModule\n\n\n\ncluster_UserVariableModule_providers\n\n\n\ncluster_WidgetModule\n\n\n\ncluster_WidgetModule_exports\n\n\n\ncluster_WidgetModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCachingModule\n\nCachingModule\n\n\n\nOpenSearchModule\n\nOpenSearchModule\n\nOpenSearchModule -->\n\nCachingModule->OpenSearchModule\n\n\n\nAppModule -->\n\nCachingModule->AppModule\n\n\n\n\n\nCachingService \n\nCachingService \n\nCachingService  -->\n\nCachingModule->CachingService \n\n\n\n\n\nDashboardCategoryModule\n\nDashboardCategoryModule\n\nAppModule -->\n\nDashboardCategoryModule->AppModule\n\n\n\n\n\nDashboardModule\n\nDashboardModule\n\nAppModule -->\n\nDashboardModule->AppModule\n\n\n\n\n\nDashboardProfileModule\n\nDashboardProfileModule\n\nOpenSearchModule -->\n\nDashboardProfileModule->OpenSearchModule\n\n\n\nAppModule -->\n\nDashboardProfileModule->AppModule\n\n\n\n\n\nGrpcModule\n\nGrpcModule\n\nAppModule -->\n\nGrpcModule->AppModule\n\n\n\n\n\nGrpcService \n\nGrpcService \n\nGrpcService  -->\n\nGrpcModule->GrpcService \n\n\n\n\n\nWidgetModule\n\nWidgetModule\n\nWidgetModule -->\n\nOpenSearchModule->WidgetModule\n\n\n\nAppModule -->\n\nOpenSearchModule->AppModule\n\n\n\n\n\nOpenSearchService \n\nOpenSearchService \n\nOpenSearchService  -->\n\nOpenSearchModule->OpenSearchService \n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nRoleService \n\nRoleService \n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nUserVariableModule\n\nUserVariableModule\n\nAppModule -->\n\nUserVariableModule->AppModule\n\n\n\nDashboardModule -->\n\nWidgetModule->DashboardModule\n\n\n\nAppModule -->\n\nWidgetModule->AppModule\n\n\n\n\n\nWidgetService \n\nWidgetService \n\nWidgetService  -->\n\nWidgetModule->WidgetService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCachingService\n\nCachingService\n\nCachingModule -->\n\nCachingService->CachingModule\n\n\n\n\n\nDashboardCategoryService\n\nDashboardCategoryService\n\nDashboardCategoryModule -->\n\nDashboardCategoryService->DashboardCategoryModule\n\n\n\n\n\nDashboardService\n\nDashboardService\n\nDashboardModule -->\n\nDashboardService->DashboardModule\n\n\n\n\n\nDashboardProfileService\n\nDashboardProfileService\n\nDashboardProfileModule -->\n\nDashboardProfileService->DashboardProfileModule\n\n\n\n\n\nGrpcService\n\nGrpcService\n\nGrpcModule -->\n\nGrpcService->GrpcModule\n\n\n\n\n\nOpenSearchClientProvider\n\nOpenSearchClientProvider\n\nOpenSearchModule -->\n\nOpenSearchClientProvider->OpenSearchModule\n\n\n\n\n\nOpenSearchService\n\nOpenSearchService\n\nOpenSearchModule -->\n\nOpenSearchService->OpenSearchModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nUserVariableService\n\nUserVariableService\n\nUserVariableModule -->\n\nUserVariableService->UserVariableModule\n\n\n\n\n\nWidgetService\n\nWidgetService\n\nWidgetModule -->\n\nWidgetService->WidgetModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    36 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'properties.html': {
      url: 'properties.html',
      title: 'package-properties - properties',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/typealiases.html': {
      url: 'miscellaneous/typealiases.html',
      title: 'miscellaneous-typealiases - typealiases',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ComparableAttributes   (src/.../dtos.ts)\n                        \n                        \n                            EntityFilterInput   (src/.../dtos.ts)\n                        \n                        \n                            EntityFilterRecord   (src/.../dtos.ts)\n                        \n                        \n                            EntitySortInput   (src/.../dtos.ts)\n                        \n                        \n                            MappingProperties   (src/.../open-search.service.ts)\n                        \n                        \n                            NullToUndefined   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/dtos.ts\n    \n    \n        \n            \n                \n                    \n                    ComparableAttributes\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityFilterInput\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityFilterRecord\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySortInput\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/open-search/open-search.service.ts\n    \n    \n        \n            \n                \n                    \n                    MappingProperties\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/common/utils.ts\n    \n    \n        \n            \n                \n                    \n                    NullToUndefined\n                \n            \n            \n                \n                    Convert all null values in an object to undefined\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/variables.html': {
      url: 'miscellaneous/variables.html',
      title: 'miscellaneous-variables - variables',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NESTIA_CONFIG   (nestia.config.ts)\n                        \n                        \n                            Permissions   (src/.../permission.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    nestia.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NESTIA_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :     INestiaConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * Accessor of controller classes.\n   *\n   * You can specify it within two ways.\n   *\n   *   - Asynchronous function returning `INestApplication` instance\n   *   - Specify the path or directory of controller class files\n   */\n  // input: "src/controllers",\n  // input: "src/**/*.controller.ts",\n  input: async () => {\n    // change this to your own module\n    const app = await NestFactory.create(AppModule);\n    // const app = await NestFactory.create(YourModule, new FastifyAdapter());\n    // app.setGlobalPrefix("api");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: "v",\n    // })\n    return app;\n  },\n\n  /**\n   * Building `swagger.json` is also possible.\n   *\n   * If not specified, you can\'t build the `swagger.json`.\n   */\n  swagger: {\n    /**\n     * Output path of the `swagger.json`.\n     *\n     * If you\'ve configured only directory, the file name would be the `swagger.json`.\n     * Otherwise you\'ve configured the full path with file name and extension, the\n     * `swagger.json` file would be renamed to it.\n     */\n    output: \'dist/swagger.json\',\n  },\n\n  /**\n   * Output directory that SDK would be placed in.\n   *\n   * If not configured, you can\'t build the SDK library.\n   */\n  output: \'../../packages/sdk/src\',\n  distribute: \'../../packages/sdk\',\n\n  clone: true,\n\n  /**\n   * Target directory that SDK distribution files would be placed in.\n   *\n   * If you configure this property and runs `npx nestia sdk` command,\n   * distribution environments for the SDK library would be generated.\n   *\n   * After the SDK library generation, move to the `distribute` directory,\n   * and runs `npm publish` command, then you can share SDK library with\n   * other client (frontend) developers.\n   */\n  // distribute: "packages/api",\n\n  /**\n   * Whether to use propagation mode or not.\n   *\n   * If being configured, interaction functions of the SDK library would\n   * perform the propagation mode. The propagation mode means that never\n   * throwing exception even when status code is not 200 (or 201), but just\n   * returning the {@link IPropagation} typed instance, which can specify its body\n   * type through discriminated union determined by status code.\n   *\n   * @default false\n   */\n  // propagate: true,\n\n  /**\n   * Allow simulation mode.\n   *\n   * If you configure this property to be `true`, the SDK library would be contain\n   * simulation mode. In the simulation mode, the SDK library would not communicate\n   * with the real backend server, but just returns random mock-up data\n   * with requestion data validation.\n   *\n   * For reference, random mock-up data would be generated by `typia.random()`\n   * function.\n   *\n   * @default false\n   */\n  // simulate: true,\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/permission.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Permissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n    src/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
  },
};
